{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Community Edition (CE) Docs\n\n\nIntroduction\n\n\nLicense\n\n\n\n\n\n\nHistory\n\n\nVersions 1 and 2\n\n\nVersion 3\n\n\nEnter OAuth2\n\n\n\n\n\n\nDesign Goals\n\n\nFree Open Source Identity Suite\n\n\nSupport most promising open standards\n\n\nLeverage existing business processes\n\n\nFree license\n\n\nWrite as a last resort\n\n\nNot just comprehensive, but easy to use\n\n\nHorizontal scalability\n\n\nExtreme flexibility\n\n\n\n\n\n\nArchitecture\n\n\nJ2EE Servlet container\n\n\nApache HTTP front end web server\n\n\nLDAP for Persistence\n\n\nWeb container plugins\n\n\n\n\n\n\n\n\n\n\nGluu Server Community Edition (CE) Docs\n#\n\n\nGluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.\n\n\nPrimarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation\n\n\nThe code is open source, and available on \nGithub\n.\n\n\nCommunity support can be enlisted on the \nGluu support site\n. If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of \nVIP support\n options.\n\n\nIntroduction\n#\n\n\nThe Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.\n\n\nLicense\n#\n\n\nAny software published by Gluu in the OX Project is under the \nMIT License\n.\nThe third party components have separate licenses.\n\n\n\n\n\n\n\n\nComponent\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nShibboleth\n\n\nApache2\n\n\n\n\n\n\nOpenDJ\n\n\nCDDL-1.0\n\n\n\n\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\n\n\n\n\nJagger\n\n\nMIT License\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGluu maintains a fork of OpenDJ 3 in \nour Github\n.\n\n\n\n\nHistory\n#\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.\n\n\nVersions 1 and 2\n#\n\n\nVersions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.\n\n\nVersion 3\n#\n\n\nThe first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.\n\n\nEnter OAuth2\n#\n\n\nOAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for\n\nIDCubed\n. This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.\n\n\nDesign Goals\n#\n\n\nAt OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux.\n\n\nFree Open Source Identity Suite\n#\n\n\nOne of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.\n\n\nSupport most promising open standards\n#\n\n\nThe goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.\n\n\nLeverage existing business processes\n#\n\n\nWhere possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.\n\n\nFree license\n#\n\n\nThe components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.\n\n\nWrite as a last resort\n#\n\n\nUse the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!\n\n\nNot just comprehensive, but easy to use\n#\n\n\nThe Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.\n\n\nHorizontal scalability\n#\n\n\nSystem administrators should be able to add more servers to make the \nGluu Server scale as much as needed.\n\n\nExtreme flexibility\n#\n\n\nAs Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.\n\n\nArchitecture\n#\n\n\nThere are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.\nFollowing is a list of the technical components that comprise the Gluu Server.\n\n\nJ2EE Servlet container\n#\n\n\nMost of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.\n\n\nApache HTTP front end web server\n#\n\n\nAlthough there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content. \n\n\nLDAP for Persistence\n#\n\n\nLDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.\n\n\nWeb container plugins\n#\n\n\nToday, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.\n\n\nWeb agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.\n\n\nIf developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-community-edition-ce-docs",
            "text": "Gluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.  Primarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation  The code is open source, and available on  Github .  Community support can be enlisted on the  Gluu support site . If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of  VIP support  options.",
            "title": "Gluu Server Community Edition (CE) Docs"
        },
        {
            "location": "/#introduction",
            "text": "The Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.",
            "title": "Introduction"
        },
        {
            "location": "/#license",
            "text": "Any software published by Gluu in the OX Project is under the  MIT License .\nThe third party components have separate licenses.     Component  License      Shibboleth  Apache2    OpenDJ  CDDL-1.0    Asimba  GNU APGL 3.0    Jagger  MIT License      Note  Gluu maintains a fork of OpenDJ 3 in  our Github .",
            "title": "License"
        },
        {
            "location": "/#history",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.",
            "title": "History"
        },
        {
            "location": "/#versions-1-and-2",
            "text": "Versions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.",
            "title": "Versions 1 and 2"
        },
        {
            "location": "/#version-3",
            "text": "The first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.",
            "title": "Version 3"
        },
        {
            "location": "/#enter-oauth2",
            "text": "OAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for IDCubed . This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "Enter OAuth2"
        },
        {
            "location": "/#design-goals",
            "text": "At OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux.",
            "title": "Design Goals"
        },
        {
            "location": "/#free-open-source-identity-suite",
            "text": "One of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.",
            "title": "Free Open Source Identity Suite"
        },
        {
            "location": "/#support-most-promising-open-standards",
            "text": "The goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.",
            "title": "Support most promising open standards"
        },
        {
            "location": "/#leverage-existing-business-processes",
            "text": "Where possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.",
            "title": "Leverage existing business processes"
        },
        {
            "location": "/#free-license",
            "text": "The components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.",
            "title": "Free license"
        },
        {
            "location": "/#write-as-a-last-resort",
            "text": "Use the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!",
            "title": "Write as a last resort"
        },
        {
            "location": "/#not-just-comprehensive-but-easy-to-use",
            "text": "The Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.",
            "title": "Not just comprehensive, but easy to use"
        },
        {
            "location": "/#horizontal-scalability",
            "text": "System administrators should be able to add more servers to make the \nGluu Server scale as much as needed.",
            "title": "Horizontal scalability"
        },
        {
            "location": "/#extreme-flexibility",
            "text": "As Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "Extreme flexibility"
        },
        {
            "location": "/#architecture",
            "text": "There are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.\nFollowing is a list of the technical components that comprise the Gluu Server.",
            "title": "Architecture"
        },
        {
            "location": "/#j2ee-servlet-container",
            "text": "Most of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.",
            "title": "J2EE Servlet container"
        },
        {
            "location": "/#apache-http-front-end-web-server",
            "text": "Although there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content.",
            "title": "Apache HTTP front end web server"
        },
        {
            "location": "/#ldap-for-persistence",
            "text": "LDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.",
            "title": "LDAP for Persistence"
        },
        {
            "location": "/#web-container-plugins",
            "text": "Today, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.  Web agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.  If developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Web container plugins"
        },
        {
            "location": "/installation-guide/",
            "text": "1 Preparing VM for Gluu Server Installation\n#\n\n\nGluu Server Community Edition (CE) resource allocation depends on the backend data size. The requirements below are a bare minimum for Gluu CE to function properly. It is strongly recommended to allocate more resource for bigger backend data size.\n\n\n\n\n\n\n\n\nCPU Unit\n\n\nRAM\n\n\nDisk Space\n\n\nProcessor Type\n\n\n\n\n\n\n\n\n\n\n2\n\n\n4GB\n\n\n40GB\n\n\n64 Bit\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe processor type must be 64 bit for Gluu Server to function\n\n\n\n\n\n\nNote\n\n\nInsufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.\n\n\n\n\n1.1 Port\n#\n\n\nThe following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.\n\n\n\n\n\n\n\n\nPort Number\n\n\nProtocol\n\n\n\n\n\n\n\n\n\n\n80\n\n\ntcp\n\n\n\n\n\n\n443\n\n\ntcp\n\n\n\n\n\n\n\n\n1.2 Tomcat Memory Heap\n#\n\n\nThe minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). This estimate is based on the minumum RAM requirements. It is best to keep this ratio when tomcat memory is allocated in production environments as the size will depend on the available RAM; as an example, a 6GB tomcat memory heap in a production server with 8 GB ram is ideal for a small organization running Gluu CE.\n\n\n1.2.1 Alter Tomcat Memory Heap\n#\n\n\nThe tomcat heap memory is set from the \nsetup.py\n script prompt. \n\n\n\nThis property can also altered from the \n/opt/tomcat/conf/gluuTomcatWrapper.conf\n file inside the Gluu Server chroot container setting \nwrapper.java.initmemory\n and \nwrapper.java.maxmemory\n properties.\nUse the following command to open the gluuTomcatWrapper file\n\n\n# vi /opt/tomcat/conf/gluuTomcatWrapper.conf\n\n\n\n\nPlease change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.\n\n\n# Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536\n\n\n\n\n1.3 File Descriptor\n#\n\n\nGluu recommends setting the \nfile descriptors\n to 65k for Gluu Server CE. The following steps will help set the \nfile descriptor\n limit.\n\n\n\n\nEdit the \n/etc/security/limits.conf\n file.\n\n\nAdd the following lines in the \nlimits.conf\n file. Please replace the \nusername\n with the user that will install Gluu Server.\n\n\n\n\n* soft nofile 65536\n* hard nofile 262144\n\n\n\n\n\n\nEdit the \n/etc/pam.d/login\n by adding the line:\n\n\n\n\nsession required pam_limits.so\n\n\n\n\n\n\nUse the system file limit to increase the file descriptor limit to 65535. The system file limit is set in \n/proc/sys/fs/file-max\n.\n\n\n\n\necho 65535 > /proc/sys/fs/file-max\n\n\n\n\n\n\nUse the \nulimit\n command to set the file descriptor limit to the hard limit specified in \n/etc/security/limits.conf\n.\n\n\n\n\nulimit -n unlimited\n\n\n\n\n\n\nRestart your system.\n\n\n\n\n1.4 Cloud Specific Instructions\n#\n\n\n1.4.1 Amazon AWS\n#\n\n\nAmazon AWS provides a public and private IP address to its clouds. While\nrunning the \n/install/community-edition-setup/setup.py\n script, use the\nPrivate IP address.\n\n\n1.4.2 Microsoft Azure\n#\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. \n\n\n1.4.2.1 Setting up VM\n#\n\n\n\n\n\n\nLog into Windows Azure Administrative Panel\n\n\n\n\n\n\nClick on \nVirtual Machines\n tab, and click \nCreate a Virtual Machine\n link\n\n\n\n\n\n\nFrom the menu, choose \nCompute\n --> \nVirtual Machine\n --> \nFrom Gallery\n branch.\n\n\n\n\n\n\nChoose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.\n\n\n\n\n\n\nProvide a name for the VM in the \nVirtual Machine Name\n field and use\n\nStandard\n for \nTier\n.\n\n\n\n\n\n\nSelect at least \nA2\n variant equipped with 3.5GB RAM in the \nSize\n\ndropdown menu.\n\n\n\n\n\n\nProvide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click \nNext\n.\n\n\n\n\n\n\nCreate a new cloud service and select \nNone\n for \nAvailability Set\n\n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click \nNext\n.\n\n\n\n\n\n\nChoose not to install \nVM Agent\n and click the \ntick\n button to\n   finalize the VM.\n\n\n\n\n\n\nGo to the \nDashboard\n tab of VM Management Panel and copy the \nDNS\n    Name\n. This is the name that is used to access the Gluu Server.\n\n\n\n\n\n\nSSH into the VM and install the Gluu Server. See our \nInstallation Guide\n for\n    installation instructions.\n\n\n\n\n\n\n1.4.2.2 Setup.py Configuration\n#\n\n\nThis section describes what to put in the prompt when \nsetup.py\n is run\nafter installing Gluu Server.\n\n\n\n\n\n\nIP Address: Do not change the default IP address; just press \nenter\n.\n\n\n\n\n\n\nhostname: Use the DNS name that was copied from the `VM Management Panel.\n\n\n\n\n\n\nUpdate hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file \n/etc/sysconfig/networking\n, and add the full DNS name.\n\n\n\n\n\n\nNow the chosen DNS name can be used to access the Gluu Server.\n\n\n\n\n\n\n1.4.3 Linode VM\n#\n\n\nThe Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.\n\n\n\n\nCheck for the current version of the kernel. If the output contains \n-Linode\n, then proceed\n\n\n\n\n# uname -a\n\n\n\n\n\n\nRun the following command to update the kernel\n\n\n\n\n# apt-get install linux-image-virtual grub2\n\n\n\n\n\n\nModify \ngrub\n file in the \n/etc/default/\n folder\n\n\n\n\n# vim /etc/default/grub\n\n\n\n\n\n\nEnsure that the following lines are present in the grub file\n\n\n\n\nGRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"\n\n\n\n\n\n\nFinally run the following commands to update \ngrub\n and reboot\n\n\n\n\n# update-grub\n# reboot",
            "title": "1 Preparing VM"
        },
        {
            "location": "/installation-guide/#1-preparing-vm-for-gluu-server-installation",
            "text": "Gluu Server Community Edition (CE) resource allocation depends on the backend data size. The requirements below are a bare minimum for Gluu CE to function properly. It is strongly recommended to allocate more resource for bigger backend data size.     CPU Unit  RAM  Disk Space  Processor Type      2  4GB  40GB  64 Bit      Warning  The processor type must be 64 bit for Gluu Server to function    Note  Insufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.",
            "title": "1 Preparing VM for Gluu Server Installation"
        },
        {
            "location": "/installation-guide/#11-port",
            "text": "The following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.     Port Number  Protocol      80  tcp    443  tcp",
            "title": "1.1 Port"
        },
        {
            "location": "/installation-guide/#12-tomcat-memory-heap",
            "text": "The minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). This estimate is based on the minumum RAM requirements. It is best to keep this ratio when tomcat memory is allocated in production environments as the size will depend on the available RAM; as an example, a 6GB tomcat memory heap in a production server with 8 GB ram is ideal for a small organization running Gluu CE.  1.2.1 Alter Tomcat Memory Heap #  The tomcat heap memory is set from the  setup.py  script prompt.   This property can also altered from the  /opt/tomcat/conf/gluuTomcatWrapper.conf  file inside the Gluu Server chroot container setting  wrapper.java.initmemory  and  wrapper.java.maxmemory  properties.\nUse the following command to open the gluuTomcatWrapper file  # vi /opt/tomcat/conf/gluuTomcatWrapper.conf  Please change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.  # Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536",
            "title": "1.2 Tomcat Memory Heap"
        },
        {
            "location": "/installation-guide/#13-file-descriptor",
            "text": "Gluu recommends setting the  file descriptors  to 65k for Gluu Server CE. The following steps will help set the  file descriptor  limit.   Edit the  /etc/security/limits.conf  file.  Add the following lines in the  limits.conf  file. Please replace the  username  with the user that will install Gluu Server.   * soft nofile 65536\n* hard nofile 262144   Edit the  /etc/pam.d/login  by adding the line:   session required pam_limits.so   Use the system file limit to increase the file descriptor limit to 65535. The system file limit is set in  /proc/sys/fs/file-max .   echo 65535 > /proc/sys/fs/file-max   Use the  ulimit  command to set the file descriptor limit to the hard limit specified in  /etc/security/limits.conf .   ulimit -n unlimited   Restart your system.",
            "title": "1.3 File Descriptor"
        },
        {
            "location": "/installation-guide/#14-cloud-specific-instructions",
            "text": "1.4.1 Amazon AWS #  Amazon AWS provides a public and private IP address to its clouds. While\nrunning the  /install/community-edition-setup/setup.py  script, use the\nPrivate IP address.  1.4.2 Microsoft Azure #  Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started.   1.4.2.1 Setting up VM #    Log into Windows Azure Administrative Panel    Click on  Virtual Machines  tab, and click  Create a Virtual Machine  link    From the menu, choose  Compute  -->  Virtual Machine  -->  From Gallery  branch.    Choose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.    Provide a name for the VM in the  Virtual Machine Name  field and use Standard  for  Tier .    Select at least  A2  variant equipped with 3.5GB RAM in the  Size \ndropdown menu.    Provide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click  Next .    Create a new cloud service and select  None  for  Availability Set \n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click  Next .    Choose not to install  VM Agent  and click the  tick  button to\n   finalize the VM.    Go to the  Dashboard  tab of VM Management Panel and copy the  DNS\n    Name . This is the name that is used to access the Gluu Server.    SSH into the VM and install the Gluu Server. See our  Installation Guide  for\n    installation instructions.    1.4.2.2 Setup.py Configuration #  This section describes what to put in the prompt when  setup.py  is run\nafter installing Gluu Server.    IP Address: Do not change the default IP address; just press  enter .    hostname: Use the DNS name that was copied from the `VM Management Panel.    Update hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file  /etc/sysconfig/networking , and add the full DNS name.    Now the chosen DNS name can be used to access the Gluu Server.    1.4.3 Linode VM #  The Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.   Check for the current version of the kernel. If the output contains  -Linode , then proceed   # uname -a   Run the following command to update the kernel   # apt-get install linux-image-virtual grub2   Modify  grub  file in the  /etc/default/  folder   # vim /etc/default/grub   Ensure that the following lines are present in the grub file   GRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"   Finally run the following commands to update  grub  and reboot   # update-grub\n# reboot",
            "title": "1.4 Cloud Specific Instructions"
        },
        {
            "location": "/installation-guide/install/",
            "text": "2 Install Gluu Server\n#\n\n\nGluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the \napt-get\n or \nyum install\n command.\n\n\n2.1 Ubuntu\n#\n\n\n2.1.1 Ubuntu Server 14.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.2 Ubuntu Server 16.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nXenial Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.1.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.2 CentOS\n#\n\n\n2.2.1 CentOS 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.2 CentOS 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.2.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.3 Red Hat Enterprise Linux (RHEL)\n#\n\n\n2.3.1 RHEL 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.2 RHEL 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The commands are different in RHEL 6.x and RHEL 7\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.3.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.4 Debian 8 (Jessie)\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/debian/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.4.1 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder.\n\n Log into Gluu Server \nchroot\n\n\n Run the setup script\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.4.2 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*",
            "title": "2 Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#2-install-gluu-server",
            "text": "Gluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the  apt-get  or  yum install  command.",
            "title": "2 Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#21-ubuntu",
            "text": "2.1.1 Ubuntu Server 14.04 #  The following commands will install Gluu Server  chroot     Command Description  Trusty Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     Please see section 2.1.3 to complete installation.  2.1.2 Ubuntu Server 16.04 #  The following commands will install Gluu Server  chroot     Command Description  Xenial Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     Please see section 2.1.3 to complete installation.  2.1.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.   Log into Gluu Server  chroot  Run the setup script      Command Description  Trusty & Xenial Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.1.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Trusty & Xenial Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.1 Ubuntu"
        },
        {
            "location": "/installation-guide/install/#22-centos",
            "text": "2.2.1 CentOS 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  CentOS 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.2 CentOS 7.2 #  The following commands will install Gluu Server  chroot     Command Description  CentOS 7.2      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2   Log into Gluu Server  chroot  Run the setup script      Command Description  CentOS 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py        Command Description  CentOS 7.2      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.2.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.     Command Description  CentOS 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  CentOS 7.2      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.2 CentOS"
        },
        {
            "location": "/installation-guide/install/#23-red-hat-enterprise-linux-rhel",
            "text": "2.3.1 RHEL 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  RHEL 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.2 RHEL 7.2 #  The following commands will install Gluu Server  chroot     Command Description  RHEL 7      Add Gluu Repository  wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The commands are different in RHEL 6.x and RHEL 7   Log into Gluu Server  chroot  Run the setup script      Command Description  RHEL 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py        Command Description  RHEL 7      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.3.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.     Command Description  RHEL 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  RHEL 7      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.3 Red Hat Enterprise Linux (RHEL)"
        },
        {
            "location": "/installation-guide/install/#24-debian-8-jessie",
            "text": "The following commands will install Gluu Server  chroot     Command Description  Jessie Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/debian/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     2.4.1 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder.  Log into Gluu Server  chroot   Run the setup script     Command Description  Jessie Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.4.2 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Jessie Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.4 Debian 8 (Jessie)"
        },
        {
            "location": "/installation-guide/setup_py/",
            "text": "2.5.1 Setup Prompt\n#\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate as well as the IP Address and the hostname for the Gluu Server. The prompt is given below.\n\n\nEnter IP Address [192.168.122.60] :\nEnter hostname [localhost] : centos.gluu.info\nEnter your city or locality : Austin\nEnter your state or province two letter code : TX\nEnter two letter Country Code : US\nEnter Organization Name : Gluu\nEnter email address for support at your organization : support@gluu.org\nEnter maximum RAM for tomcat in MB [3072] :\nOptional: enter password for oxTrust and LDAP superuser [hlE3vzf0hMdD] :\nInstall oxAuth OAuth2 Authorization Server? [Yes] :\nInstall oxTrust Admin UI? [Yes] :\nInstall Gluu OpenDJ LDAP Server? [Yes] :\nInstall Apache HTTPD Server [Yes] :\nInstall Shibboleth SAML IDP? [No] :\nInstall Asimba SAML Proxy? [No] :\nInstall CAS? [No] :\nInstall oxAuth RP? [No] :\n\n\n\n\nIt is recommended to use \nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n for IP address. \nIf you are not using a resolvable DNS host, you will need to add the hostname to your hosts file on the server which is running your browser. Login with the default user name \nadmin\n and the password printed back in the confirmation (also contained in \nsetup.properties.last\n (use the Unix command \ngrep --color -i pass\n to find the according line quickly) and look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt setup.properties.last It has the clear text passwords for everything: \nLDAP, admin user, keystores, and 3DES salt\n. If something goes wrong, check \nsetup.log\n for a detailed step-by-step of the installation. As an alternative you may check the file \nsetup_errors.log\n to just see the errors (or stderr output from the scripts).\n\n\n\n\nWarning\n\n\nUse a FQDN (fully qualified domain name) as hostname and refrain from using 127.0.0.1 as IP address\n\n\n\n\n2.5.2 Script Command Line Options\n#\n\n\nThe \nsetup.py\n script can be used to configure your Gluu Server and to add initial data\nfor oxAuth and oxTrust to start. If \nsetup.properties\n is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.\n\n\nThe administrator can use the following command line options to include additional components:\n\n\n\n\n-a\n install Asimba\n\n\n-c\n install CAS\n\n\n-d\n specify the directory where community-edition-setup is located. Defaults to '.'\n\n\n-f\n specify \nsetup.properties\n file\n\n\n-h\n invoke this help\n\n\n-l\n install LDAP\n\n\n-n\n no interactive prompt before install starts. Run with \n-f\n\n\n-N\n no Apache httpd server\n\n\n-s\n install the Shibboleth IDP\n\n\n-u\n update hosts file with IP address/hostname\n\n\n-w\n get the development head war files\n\n\n\n\nExample Command: \n# ./setup.py -cas\n This command will install Gluu Server with CAS, Asimba and Shibboleth IDP.",
            "title": "2.5 Setup Script Options"
        },
        {
            "location": "/cluster/",
            "text": "3 Cluster with Gluu CE\n#\n\n\nIt is possible to setup a cluster of servers with Gluu Server CE. This page outlines the setup process of a cluster with two (2) nodes. It is possible to add more nodes, but it is recommened to contact Gluu for higher level solutions.\n\n\n3.1 Design\n#\n\n\nThe following diagram outlines the design of the cluster.\n\n\n\n3.2 Requirements\n#\n\n\nFor complete deployment requirements and instructions, please see the \nDeployment Page\n.\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs. Please remember that the requirements from the deployment page will apply as well.\n\n\n\n\n\n\n\n\nNumber of VMs\n\n\nCPU Units\n\n\nRAM\n\n\nRoot Partion\n\n\nPort Requirements\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2 CPU ea.\n\n\n8 GB\n\n\n40 GB\n\n\n4444 and 8989 (LDAP replication), 30865 (file system syncing)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nFor convenience, the nodes are identified as \nhost-1\n and \nhost-1\n\n\n\n\n3.2.1 Csync2 Installation\n#\n\n\n3.2.1.1 CentOS 6.x\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nInstall epel-release-latest by running \nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n\n\n\n\n\n\nInstall \ncsync2\n package by running \nyum install csync2\n\n\n\n\n\n\n3.2.1.2 CentOS 7.x\n#\n\n\nOn the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nEnable epel-release repo: \n# yum install epel-release\n\n\n\n\n\n\nInstall compiler and development environment: \n# yum group install \"Development Tools\"\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# yum install librsync-devel\n\n\n\n\n\n\n# yum install gnutls-devel\n\n\n\n\n\n\n# yum install sqlite-devel\n\n\n\n\n\n\n\n\n\n\n# mkdir building_csync && cd building_csync/\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/usr/local/etc/csync2/\n directory for storing configuration (for convenience): \n# ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install\n. Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!\n\n\n\n\n\n\n3.2.1.3 Ubuntu 14.x (compiling from sources)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# apt-get install pkg-config\n\n\n\n\n\n\n# apt-get install libsqlite-dev\n\n\n\n\n\n\n# apt-get install libsqlite3-dev\n\n\n\n\n\n\n# apt-get install librsync-dev\n\n\n\n\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/etc/csync2/\n directory for storing configuration and \n/usr/sbin\n directory for executables (for convenience): \n./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install\n\n\n\n\n\n\n3.2.1.4 Ubuntu 14.x (from repo)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nRun \napt-get install csync2\n\n[TOC]\n\n\n\n\n\n\n3.3 Preparing VMs\n#\n\n\n\n\nInstall Gluu CE following the \nDeployment Page\n in \nhost-1\n\n\n\n\n\n\nNote\n\n\nThe following step must be done right after initial installation of the Gluu CE Package but before finalizing the setup by running the \nsetup.py\n script.\n\n\n\n\n\n\n\n\nCopy the \nsetup.properties.last\n file that is generated afther finalizing the installation of Gluu CE on \nhost-1\n and paste it in the \n/install/community-edition-setup/\n folder inside the \nhost-2\n chroot. Please remember that the interactive setup mode will not run with this command, so add keywords such as \n-a\n to include asimba, shibboleth or any other component that was installed. Read \nthis section\n in case you failed to setup Gluu CE in \nhost-2\n.\n\n\n\n\n\n\nFinalize the installation by running the setup script with any additional components that was installed in \nhost-1\n.\n\n\n\n\n\n\n3.4 LDAP Replication\n#\n\n\n\n\n\n\n\n\nhost-1\n\n\nhost-2\n\n\n\n\n\n\n\n\n\n\nIP Address eg. 192.168.6.1\n\n\nIp Address eg. 192.168.6.2\n\n\n\n\n\n\nLDAP admin pass\n\n\nLDAP admin pass\n\n\n\n\n\n\nldapGeneralConfigInstall.py\n\n\n\n\n\n\n\n\nreplicationSetup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun \nldapGeneralConfigInstall.py\n in \nhost-1\n. This script will prepare the \nhost-1\n LDAP server to accept various configurations such as \nallow-pre-encoded-passwords\n or applyting the host and port for LDAP Server.\n\n\n\n\n\n\nRun \nreplicationSetup.py\n in \nhost-1\n and it will give a similar output as below:\n\n\n\n\n\n\n[ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$\n\n\n\n\n\n\nInitialize directory server replication with this command \n/opt/opendj/bin/dsreplication initialize\n and it will give the following output:\n\n\n\n\n[ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.\n\n\n\n\n\n\nNote\n\n\nOpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; an alternative is to use the same OpenDJ certificate/key pair for both nodes\n\n\n\n\n3.5 File System Replication\n#\n\n\n\n\nAdvice\n\n\nThe backup feature is broken in some of earlier versions of csync2. In that case it msut either be disabled by commenting out \nbackup-*\n clauses in tool's configuration file, or build csync2 version 2.0+ from sources and use key \n-l\n in your xinetd.d's config (like \nserver_args     = -i -l -N idp1.gluu.org\n) on both nodes.\n\n\n\n\n\n\nWarning\n\n\nPlease verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ in different linux distributions.\n\n\n\n\ncsync2\n is used for file system syncing between \nhost-1\n and \nhost-2\n. The following locations are synced in between the two VMs.\n\n\n\n\n/opt/idp/conf\n\n\n/opt/idp/metadata\n\n\n/opt/idp/ssl\n\n\n/opt/tomcat/conf\n\n\n/etc/csync2/csync2.cfg\n\n\n\n\n3.5.1 Csync2 configuration for host-1\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nGenerate \ncsync2\n private key by running \ncsync2 -k csync2.key\n and put it into \n/etc/csync2/csync2.key\n file\n\n\n\n\n\n\nCopy the private key to \nhost-2\n and put it into the same file there\n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-1\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \nEnter\n accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\n Add IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org  \n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, followed by \n# chkconfig xinetd on\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\n\n\nNote\n\n\nThe status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n\n\n Configure \ncsync2.cfg\n to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n \n\nRun `mkdir -p /var/backups/csync2`\n\n\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\n3.5.2 Csync2 configuration for host-2\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nPlease copy the private key generated on \nhost-1\n to \nhost-2\n and put it into \n/etc/csync2/csync2.key\n file \n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-2\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\nAdd IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org\n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n Run \nmkdir -p /var/backups/csync2\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\n3.6 Certificate Management\n#\n\n\nThe certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to \n/etc/certs/\n on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks: \nhttpd.*\n, \nasimba.*\n, \nasimbaIDP.*\n and \nshibIDP.*\n to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).\n\n\nAfter that's done you still will need to update default system storage (\ncacerts\n file) at the 2nd node with these newly copied certificates.\n\n\n3.7 [Optional] Actions in case setup.properties.last method of installation didn't work for you\n#\n\n\nIn this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.\n\n\nThus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.\n\n\nTo achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:\n\n\n\n\n\n\nComment out \nauto younger;\n string in \ncsync2.cfg\n on both nodes to disable autoresolution of conflicts\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp1.gluu.org\n on the 1st node\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp2.gluu.org\n on the 2nd node\n\n\n\n\n\n\nPrevious commands did initial scan and filled metadata database. Now run \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.\n\n\n\n\n\n\nYou should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this \n# csync2 -frvvv -N idp1.gluu.org /\n on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.\n\n\n\n\n\n\nRun \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.\n\n\n\n\n\n\nUncomment \nauto younger;\n string and proceed to installing cron jobs",
            "title": "3 Cluster Deployment Guide"
        },
        {
            "location": "/cluster/#3-cluster-with-gluu-ce",
            "text": "It is possible to setup a cluster of servers with Gluu Server CE. This page outlines the setup process of a cluster with two (2) nodes. It is possible to add more nodes, but it is recommened to contact Gluu for higher level solutions.",
            "title": "3 Cluster with Gluu CE"
        },
        {
            "location": "/cluster/#31-design",
            "text": "The following diagram outlines the design of the cluster.",
            "title": "3.1 Design"
        },
        {
            "location": "/cluster/#32-requirements",
            "text": "For complete deployment requirements and instructions, please see the  Deployment Page .\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs. Please remember that the requirements from the deployment page will apply as well.     Number of VMs  CPU Units  RAM  Root Partion  Port Requirements      2  2 CPU ea.  8 GB  40 GB  4444 and 8989 (LDAP replication), 30865 (file system syncing)      Note  For convenience, the nodes are identified as  host-1  and  host-1   3.2.1 Csync2 Installation #  3.2.1.1 CentOS 6.x #    Log into Gluu-Server container    Install epel-release-latest by running  rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm    Install  csync2  package by running  yum install csync2    3.2.1.2 CentOS 7.x #  On the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.    Log into Gluu-Server container    Enable epel-release repo:  # yum install epel-release    Install compiler and development environment:  # yum group install \"Development Tools\"    Install csync2's dependencies:    # yum install librsync-devel    # yum install gnutls-devel    # yum install sqlite-devel      # mkdir building_csync && cd building_csync/    Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /usr/local/etc/csync2/  directory for storing configuration (for convenience):  # ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install . Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!    3.2.1.3 Ubuntu 14.x (compiling from sources) #    Log into Gluu-Server container    Run  apt-get update    Install csync2's dependencies:    # apt-get install pkg-config    # apt-get install libsqlite-dev    # apt-get install libsqlite3-dev    # apt-get install librsync-dev      Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /etc/csync2/  directory for storing configuration and  /usr/sbin  directory for executables (for convenience):  ./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install    3.2.1.4 Ubuntu 14.x (from repo) #    Log into Gluu-Server container    Run  apt-get update    Run  apt-get install csync2 \n[TOC]",
            "title": "3.2 Requirements"
        },
        {
            "location": "/cluster/#33-preparing-vms",
            "text": "Install Gluu CE following the  Deployment Page  in  host-1    Note  The following step must be done right after initial installation of the Gluu CE Package but before finalizing the setup by running the  setup.py  script.     Copy the  setup.properties.last  file that is generated afther finalizing the installation of Gluu CE on  host-1  and paste it in the  /install/community-edition-setup/  folder inside the  host-2  chroot. Please remember that the interactive setup mode will not run with this command, so add keywords such as  -a  to include asimba, shibboleth or any other component that was installed. Read  this section  in case you failed to setup Gluu CE in  host-2 .    Finalize the installation by running the setup script with any additional components that was installed in  host-1 .",
            "title": "3.3 Preparing VMs"
        },
        {
            "location": "/cluster/#34-ldap-replication",
            "text": "host-1  host-2      IP Address eg. 192.168.6.1  Ip Address eg. 192.168.6.2    LDAP admin pass  LDAP admin pass    ldapGeneralConfigInstall.py     replicationSetup.py        Run  ldapGeneralConfigInstall.py  in  host-1 . This script will prepare the  host-1  LDAP server to accept various configurations such as  allow-pre-encoded-passwords  or applyting the host and port for LDAP Server.    Run  replicationSetup.py  in  host-1  and it will give a similar output as below:    [ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$   Initialize directory server replication with this command  /opt/opendj/bin/dsreplication initialize  and it will give the following output:   [ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.   Note  OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; an alternative is to use the same OpenDJ certificate/key pair for both nodes",
            "title": "3.4 LDAP Replication"
        },
        {
            "location": "/cluster/#35-file-system-replication",
            "text": "Advice  The backup feature is broken in some of earlier versions of csync2. In that case it msut either be disabled by commenting out  backup-*  clauses in tool's configuration file, or build csync2 version 2.0+ from sources and use key  -l  in your xinetd.d's config (like  server_args     = -i -l -N idp1.gluu.org ) on both nodes.    Warning  Please verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ in different linux distributions.   csync2  is used for file system syncing between  host-1  and  host-2 . The following locations are synced in between the two VMs.   /opt/idp/conf  /opt/idp/metadata  /opt/idp/ssl  /opt/tomcat/conf  /etc/csync2/csync2.cfg   3.5.1 Csync2 configuration for host-1 #    Log into Gluu-Server container    Generate  csync2  private key by running  csync2 -k csync2.key  and put it into  /etc/csync2/csync2.key  file    Copy the private key to  host-2  and put it into the same file there    Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-1  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit  Enter  accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.    Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org      Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , followed by  # chkconfig xinetd on   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on   Note  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.     Configure  csync2.cfg  to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org     Run `mkdir -p /var/backups/csync2`     Add cronjob to automate csync2 run. The cronjob example is given below:   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log   3.5.2 Csync2 configuration for host-2 #    Log into Gluu-Server container    Please copy the private key generated on  host-1  to  host-2  and put it into  /etc/csync2/csync2.key  file     Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-2  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.   Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org    Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org    Run  mkdir -p /var/backups/csync2    Add cronjob to automate csync2 run. The cronjob example is given below:  1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log",
            "title": "3.5 File System Replication"
        },
        {
            "location": "/cluster/#36-certificate-management",
            "text": "The certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to  /etc/certs/  on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks:  httpd.* ,  asimba.* ,  asimbaIDP.*  and  shibIDP.*  to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).  After that's done you still will need to update default system storage ( cacerts  file) at the 2nd node with these newly copied certificates.",
            "title": "3.6 Certificate Management"
        },
        {
            "location": "/cluster/#37-optional-actions-in-case-setuppropertieslast-method-of-installation-didnt-work-for-you",
            "text": "In this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.  Thus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.  To achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:    Comment out  auto younger;  string in  csync2.cfg  on both nodes to disable autoresolution of conflicts    Run  # csync2 -crvvv -N idp1.gluu.org  on the 1st node    Run  # csync2 -crvvv -N idp2.gluu.org  on the 2nd node    Previous commands did initial scan and filled metadata database. Now run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.    You should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this  # csync2 -frvvv -N idp1.gluu.org /  on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.    Run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.    Uncomment  auto younger;  string and proceed to installing cron jobs",
            "title": "3.7 [Optional] Actions in case setup.properties.last method of installation didn't work for you"
        },
        {
            "location": "/upgrade/",
            "text": "4 Upgrading Gluu Server CE\n#\n\n\nUpgrading a Gluu Server is NOT a simple \napt-get upgrade\n. The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:\n\n\n\n\nInstall new version\n\n\nExport the data from your current version\n\n\nStop the current Gluu Server\n\n\nStart the new version of Gluu Server\n\n\nImport data into the new server\n\n\n\n\nGluu provides the necessary \nscripts\n to perform the import and export of the data in and out of the servers.\n\n\n\n\nNOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one. \n\n\n\n\n4.1 Export the data from the current installation\n#\n\n\n# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py\n\n\n\n\nThe export script will generate a directory called \nbackup_24\n which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.\n\n\n4.2 Install the latest version of the Gluu server\n#\n\n\nStop the current version of the gluu-server.\n\n\n# service gluu-server-2.4.x stop\n\n\n\n\nConsult the \ninstallation guide\n of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version \n2.4.y\n, then:\n\n\n# cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py\n\n\n\n\nEnter the required information for the setup and complete the installation.\n\n\n4.3 Import your old data\n#\n\n\nGo to the folder where you have the \nbackup_24\n folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.\n\n\n# cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py\n\n\n\n\nInstall the \npython-pip\n package using your package manager.\n\n\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip\n\n\n\n\nInstall the \njson-merge\n Python package and run the import script.\n\n\n# pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24\n\n\n\n\nAny error or warning will 4be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "4 Upgrade Guide"
        },
        {
            "location": "/upgrade/#4-upgrading-gluu-server-ce",
            "text": "Upgrading a Gluu Server is NOT a simple  apt-get upgrade . The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:   Install new version  Export the data from your current version  Stop the current Gluu Server  Start the new version of Gluu Server  Import data into the new server   Gluu provides the necessary  scripts  to perform the import and export of the data in and out of the servers.   NOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one.",
            "title": "4 Upgrading Gluu Server CE"
        },
        {
            "location": "/upgrade/#41-export-the-data-from-the-current-installation",
            "text": "# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.",
            "title": "4.1 Export the data from the current installation"
        },
        {
            "location": "/upgrade/#42-install-the-latest-version-of-the-gluu-server",
            "text": "Stop the current version of the gluu-server.  # service gluu-server-2.4.x stop  Consult the  installation guide  of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version  2.4.y , then:  # cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py  Enter the required information for the setup and complete the installation.",
            "title": "4.2 Install the latest version of the Gluu server"
        },
        {
            "location": "/upgrade/#43-import-your-old-data",
            "text": "Go to the folder where you have the  backup_24  folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.  # cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py  Install the  python-pip  package using your package manager.  # apt-get install python-pip\n\nor\n\n# yum -y install python-pip  Install the  json-merge  Python package and run the import script.  # pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24  Any error or warning will 4be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "4.3 Import your old data"
        },
        {
            "location": "/oxtrust/",
            "text": "Gluu Server Administrative Interface\n\n\nWelcome Page\n\n\nConfiguration\n\n\nOrganization Configuration\n\n\nJSON Configuration\n\n\nManage Authentication\n\n\nManage Custom Scripts\n\n\nManage Registration\n\n\nAttributes\n\n\nCache Refresh\n\n\nConfigure Log Viewer\n\n\nView Log File\n\n\nServer Status\n\n\nCertificates\n\n\n\n\n\n\nSAML\n\n\nOutbound\n\n\n\n\n\n\nOpenID Connect\n\n\nUMA\n\n\n\n\n\n\n\n\n\n\nGluu Server Administrative Interface\n#\n\n\nThe administration interface (oxTrust) is accessible from the \nhostname\n provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username \nadmin\n and the \nLDAP superuser\n password. \n\n\nWelcome Page\n#\n\n\nThe administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.\n\n\n\nThe menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under \nUsers\n and the user-profile is under \nPersonal\n.\n\n\nConfiguration\n#\n\n\n\n\nThe configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.\n\n\nOrganization Configuration\n#\n\n\nThere are three sections in the organization configuration page which are \nSystem Configuration\n, \nSMTP Server Configuration\n and \nOxTrust Settings\n. These sections are detailed below with screenshots.\n\n\n\n\nSystem Configuration\n\nGluu Server CE is shipped with a built-in \nWhite Pages\n feature which can be enabled from the system configuration page. This page also contains the options to enable \nSelf-Service Password Reset\n which allows the Gluu Server users to reset their password via email. This options depends on the \nSMTP Server Configuration\n, also available under the organization configuration page. Additionally the \nSCIM Support\n can be enabled from the System Configuration page. If the organization uses any custom \nDNS Server(s)\n, the address should be updated from the System Configuration interface.\n\n\n\nSMTP Server Configuration\n\nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.\n\n\n\nOxTrust Settings\n\nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.\n\n\n\n\nJSON Configuration\n#\n\n\nThe configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the \nJSON Configuration\n menu\n\n\n\nThe oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the \nUpdate\n button on the bottom of the page. The details of the file is given later in the \nReference Guide\n.\n\n\nThe oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.\n\n\nThe oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a \nxls\n file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields\n\n\nManage Authentication\n#\n\n\nThe \nManage Authentication\n page contains the internal OpenDJ settings for Gluu Server CE. The \nDefault Authentication Method\n defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The \noxTrust authentication mode\n decides the authentication mechasims for the users logging into the oxTrust admin interface.\n\n\n\nManage Custom Scripts\n#\n\n\nIt will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.\n\n\n\n\nThe details about the custom scripts are given later in this guide.\n\n\nManage Registration\n#\n\n\nGluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.\n\n\nAttributes\n#\n\n\nThe attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The \nShow All Attributes\n button will show the inactive attributes too. Custom attributes can be added by clicking the \nAdd Attribute\n button and filling up a simple form.\n\n\n\n\nCache Refresh\n#\n\n\nCache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The \nCache Refresh\n will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the \nPolling interval (minutes)\n form. The key attributes, object class and the source attributes can be defined from the \nCustomer BackendKey/Attributes\n tab. The backend server address, bind DN and other information must go to the \nSource Backend LDAP Servers\n tab. The details about performing cache refresh will follow later in this guide.\n\n\nConfigure Log Viewer\n#\n\n\nThe logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.\n\n\nView Log File\n#\n\n\nThe log files are listed in the \nView Log File\n page under the \nAllowed Log Files\n tab. The individual logs can be tailed by clicking them. The \nConfiguration\n contains the last line count which will show the number of lines specified from the log in the \nTail of Log File\n tab. This section is an alternative to getting into the Gluu \nchroot\n and tailing the log files.\n\n\nServer Status\n#\n\n\nThis page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.\n\n\nCertificates\n#\n\n\nThe certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.\n\n\nSAML\n#\n\n\nGluu Server CE contains all SAML related functionalities under the \nSAML\n tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA. \n\n\nOutbound\n#\n\n\n\n\nThe \nTrust Relationships\n page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.\n\n\nOpenID Connect\n#\n\n\nOpenID Connect is another protocol supported by Gluu Server CE following the \nopenID Connect specifications\n. The scopes page contains the \nAdd Scope\n button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.\n\n\n\n\nThe OpenID Connect clients are accessible from the \nClients\n page under \nOpenID Connect\n tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the \nAdd Client\n button.\n\n\n\n\nUMA\n#\n\n\nUMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the \nAdd Scope Description\n button.\n\n\n\nUMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the \nAdd Resource Set\n button.",
            "title": "oxTrust Admin Interface"
        },
        {
            "location": "/oxtrust/#gluu-server-administrative-interface",
            "text": "The administration interface (oxTrust) is accessible from the  hostname  provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username  admin  and the  LDAP superuser  password.",
            "title": "Gluu Server Administrative Interface"
        },
        {
            "location": "/oxtrust/#welcome-page",
            "text": "The administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.  The menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under  Users  and the user-profile is under  Personal .",
            "title": "Welcome Page"
        },
        {
            "location": "/oxtrust/#configuration",
            "text": "The configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.  Organization Configuration #  There are three sections in the organization configuration page which are  System Configuration ,  SMTP Server Configuration  and  OxTrust Settings . These sections are detailed below with screenshots.   System Configuration \nGluu Server CE is shipped with a built-in  White Pages  feature which can be enabled from the system configuration page. This page also contains the options to enable  Self-Service Password Reset  which allows the Gluu Server users to reset their password via email. This options depends on the  SMTP Server Configuration , also available under the organization configuration page. Additionally the  SCIM Support  can be enabled from the System Configuration page. If the organization uses any custom  DNS Server(s) , the address should be updated from the System Configuration interface.  SMTP Server Configuration \nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.  OxTrust Settings \nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.   JSON Configuration #  The configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the  JSON Configuration  menu  The oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the  Update  button on the bottom of the page. The details of the file is given later in the  Reference Guide .  The oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.  The oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a  xls  file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields  Manage Authentication #  The  Manage Authentication  page contains the internal OpenDJ settings for Gluu Server CE. The  Default Authentication Method  defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The  oxTrust authentication mode  decides the authentication mechasims for the users logging into the oxTrust admin interface.  Manage Custom Scripts #  It will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.   The details about the custom scripts are given later in this guide.  Manage Registration #  Gluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.  Attributes #  The attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The  Show All Attributes  button will show the inactive attributes too. Custom attributes can be added by clicking the  Add Attribute  button and filling up a simple form.   Cache Refresh #  Cache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The  Cache Refresh  will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the  Polling interval (minutes)  form. The key attributes, object class and the source attributes can be defined from the  Customer BackendKey/Attributes  tab. The backend server address, bind DN and other information must go to the  Source Backend LDAP Servers  tab. The details about performing cache refresh will follow later in this guide.  Configure Log Viewer #  The logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.  View Log File #  The log files are listed in the  View Log File  page under the  Allowed Log Files  tab. The individual logs can be tailed by clicking them. The  Configuration  contains the last line count which will show the number of lines specified from the log in the  Tail of Log File  tab. This section is an alternative to getting into the Gluu  chroot  and tailing the log files.  Server Status #  This page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.  Certificates #  The certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.",
            "title": "Configuration"
        },
        {
            "location": "/oxtrust/#saml",
            "text": "Gluu Server CE contains all SAML related functionalities under the  SAML  tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA.   Outbound #   The  Trust Relationships  page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.",
            "title": "SAML"
        },
        {
            "location": "/oxtrust/#openid-connect",
            "text": "OpenID Connect is another protocol supported by Gluu Server CE following the  openID Connect specifications . The scopes page contains the  Add Scope  button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.   The OpenID Connect clients are accessible from the  Clients  page under  OpenID Connect  tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the  Add Client  button.",
            "title": "OpenID Connect"
        },
        {
            "location": "/oxtrust/#uma",
            "text": "UMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the  Add Scope Description  button.  UMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the  Add Resource Set  button.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/",
            "text": "1.1 SAML\n\n\n1.2 OpenID Connect\n\n\n1.2.1 Terminology\n\n\n1.2.2 Discovery\n\n\n\n\n\n\n1.3 User-Managed Access (UMA)\n\n\n1.3.1 Enterprise UMA\n\n\n1.3.2 Terminology\n\n\n1.3.3 UMA Workflow\n\n\n1.3.3.1 Authorization\n\n\n1.3.3.2 Authorization Token\n\n\n\n\n\n\n1.3.4 Discovery\n\n\n\n\n\n\n1.4 OAuth2.0\n\n\n1.4.1 Terminology\n\n\n1.4.2 Workflows\n\n\n1.4.2.1 Client Credentials Grant\n\n\n1.4.2.2 Resource Owner Password Credential Grant\n\n\n1.4.2.2.1 Security Properties\n\n\n1.4.2.2.2 User Experience\n\n\n\n\n\n\n1.4.2.3 Gluu OAuth2 Access Management\n\n\n\n\n\n\n\n\n\n\n1.5 SCIM\n\n\n1.5.1 Terminology\n\n\n\n\n\n\n\n\n\n\nGluu Server supports Security Assertion Markup Language (SAML) and OpenID Connect protocols to authenticate users against Service Providers (SPs) and Requesting Parties (RPs). There are two different flows of SAML known as outbound SAML and inbound SAML, both supported out-of-the-box in Gluu Server Community Edition (Gluu CE).\n\n\n1.1 SAML\n#\n\n\n\n\nSecurity Assertion Markup Language (SAML) is an authentication and authorization protocol that defines the transaction process for XML-encoded assertions about authentication, authorization and attributes. The protocol is goverened by \nSecurity Assertion Markup Language Core\n(SAML) V2.0\n. The goal of this protocol is to exchange authentication and authorization data between Service Providers (SP) and the Identity Provider (IDP).\nGluu Server supports both inbound and outbound flow of SAML transaction. The oxTrutst administrator interface makes it easy to use SAML.\n\n\nTrust Relationships are the foundation on which SAML works. Gluu Server makes it easy to setup Trust Relationships from the oxTrust admin interface. There are two types of flow Gluu CE supports, inbound and outbound SAML.\nTrust Relationship creation is mandatory in both flows; however, the inbound flow also acts as a SAML proxy. The details about how to setup a Trust Relationship and how to setup SAML proxy follows later in this documentation. The image below is taken from wikipedia, showing a SAML transaction workflow.\n\n\n\n\n1.2 OpenID Connect\n#\n\n\n\n\nOpenID Connect\n is a standard profile of OAuth2 which defines a protocol to enable any website, mobile application to verify the identity of the user accessing its resources through an authorization server or identity server. The protocol is API friendly and works through endpoints making it easy for applications to use it. \n\n\nOpenID Connect specification consists of different documents which outline different aspects of the protocol. The basic implementation requires the \nOpenID Connect Core Specification\n. The figure below taken from the \nOpenID Connect website\n shows the overview of the protocol and the different parts of the specification.\n\n\n\n\n1.2.1 Terminology\n#\n\n\n\n\nClaim: Information about the entity\n\n\nID Token: JSON Web Token (JWT) that contains claims about the authentication\n\n\nIssuer: The authority that issues the claims\n\n\nOpenID Provider (OP): OAuth2.0 authorization server that authenticates user through claims to the Relying Party (RP)\n\n\nRelying Party (RP): OAuth 2.0 Client application that requires authentication and claims from an OpenID Provider(OP)\n\n\nUserInfo Endpoint: An URL using https that returns authorization for the user from the OP to the RP\n\n\n\n\n1.2.2 Discovery\n#\n\n\nOpenID Connect provides a simple mechanism to notify about the available endpoints. This is difined in the \nOpenID Connect Discovery Specification\n. \n\n\nIn order for an OpenID Connect Relying Party (RP) to utilize OpenID Connect services for an End-User, the RP needs to know where the OpenID Provider is. OpenID Connect uses WebFinger to locate the OpenID Provider for an End-User.\nOnce the OpenID Provider has been identified, the configuration information for the OP is retrieved from a well-known location as a JSON document, including its OAuth 2.0 endpoint locations.\nIf you want to try a discovery request, you can make the following WebFinger request to discover the Issuer location:\n\n\nGET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}\n\n\n\n\n1.3 User-Managed Access (UMA)\n#\n\n\n\n\nUMA is an oAuth based protocol to \"enable a resource owner to control the authorization of data sharing and other protected-resource access made between online services on the owner\u2019s behalf or with the owner\u2019s authorization by an autonomous requesting party\"\n1\n.\n\n\n1.3.1 Enterprise UMA\n#\n\n\nThe Gluu Server implements UMA in a way that enables the protection of any web resource. Through the oxTrust interface, the server admin can write \ncustom authorization interception scripts\n which may contain logic to grant (or forbid) access. The diagram below shows an overview of the UMA Authorization workflow.\n\n\n\n\n1.3.2 Terminology\n#\n\n\n\n\nResource Server (RS): Where the resources are held. \n\n\nAuthorization Server (AS): A server that governs access based on resource owner policies. \n\n\nRequesting Party (RP): An end-user, or a corporation or other legal person, that uses a client to seek access to a protected resource. The requesting party may or may not be the same party as the resource owner. \n\n\nClient: A web or native app that is used to access a digital resource. \n\n\nProtection API Token (PAT): An entity seeking protection API access MUST have the scope \"uma_protection\". An access token with at least this scope is called a protection API token (PAT) and an entity that can acquire an access token with this scope is by definition a resource server. \n\n\nRequesting Party Token (RPT): the token that a client presents to a resource server when trying to access a protected resource. \n\n\nAuthorization API Token (AAT): An entity seeking authorization API access MUST have the scope \"uma_authorization\". An access token with at least this scope is called an authorization API token (AAT) and an entity that can acquire an access token with this scope is by definition a client.\n\n\n\n\n1.3.3 UMA Workflow\n#\n\n\nThe complete workflow sequence is shown in the diagram below. However there are two different authorization workflow given below for authorization and authorization token.\n\n\n\n\n1.3.3.1 Authorization\n#\n\n\n\n\n1.3.3.2 Authorization Token\n#\n\n\n\n\n1.3.4 Discovery\n#\n\n\nGluu Server CE provides an endpoint for discovering information about UMA Provider configuration. A resource server or client can perform an HTTP GET on \nhttps://<hostname>/.well-known/uma-configuration\n to retrieve a JSON object indicating the UMA Provider configuration.\n\n\nThe following is an example of a GET request to the UMA configuration discovery endpoint:\n\n\n{\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}\n\n\n\n\n\n\nNote\n\n\nThe UMA Response  may contain custom properties which are uniquely named for convenience and disguishing between standard & custom properties.\n\n\n\n\n1.4 OAuth2.0\n#\n\n\n\n\nOAuth2.0 is the next version in the OAuth protocol focusing on simplicity with specific authorization flows for different platforms. The core specification is called the \nOAuth 2.0 Authorization Framework\n. OAuth introduces an authorization layer and separates the role of the client from the resource owner. The resource is accessed using access tokens instead of credentials.\n\n\n1.4.1 Terminology\n#\n\n\n\n\nResource Owner (RO): Entity that owns and controls the access to any resource\n\n\nResource Server (RS): Where the resources are held\n\n\nClient: Any application/web-site that requests access to the protected resource stored in any RS.\n\n\nAuthorization Server: The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization\n\n\n\n\n1.4.2 Workflows\n#\n\n\n1.4.2.1 Client Credentials Grant\n#\n\n\nThe Client Credentials Grant allows \nRO\n to use username and password as an authorization grant to obtain an access token. This flow is only encouraged when there is high degree of trust between \nRO\n and the client and no other grant types are not available.\n\n\nAlthough this grant requires direct client access to the \nRO\n credentials it is used for a single request for an access token. This grant type can eliminate the need for the client to store the \nRO\n credentials for future use, by exchanging the credentials with a long-lived access token or refresh token.\n\n\n\n\nThe steps of the flow are:\n\n\n\n\nThe application requests an access token from the authorization server, authenticating the request with its client credentials.\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client.\n\n\n\n\nThis flow should be used when the resources of or any application/service are stored externally in cloud storages such as Google Storage or Amazon S3 which can be accessed using API. In this case the application needs to read and update these resources, but acting on behalf of the app itself rather than any individual user. The application can ask the OAuth authorization server for an access token directly, without the involvement of any end user.\n\n\nThe following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer\n\n\n\n\nThe message sent to the authorization server is\n\n\n\n\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\n\n\n\n\n\n\nHost: seed.gluu.org\n\n\n\n\n\n\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\n\n\n\n\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\ngrant_type=client_credentials&scope=storage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse upon successful authentication\n\n\n\n\n\n\n\n\n\n\nHTTP/1.1 200\n\n\n\n\n\n\nContent-Type: application/json\n\n\n\n\n\n\nCache-Control: no-store, private\n\n\n\n\n\n\nPragma: no-cache\n\n\n\n\n\n\n{\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}\n\n\n\n\n\n\n\n\n1.4.2.2 Resource Owner Password Credential Grant\n#\n\n\nThis grant allows the usage of \nRO\n password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below shows the flow\n\n\n\n\nThe steps of the flow are:\n1. User presents their credentials to the application in addition to a username and password.\n2. If the client credentials are successfully authenticated, an access token is returned to the client\n\n\nThis flow should be sparingly used becase the password for the \nRO\n is exposed to the application/client. It is recommended only for first-party \u201cofficial\u201d applications released by the API provider, and not opened up to wider third-party developer communities. If a user is asked to type their password into \u201cofficial\u201d applications, they may become accustomed to doing so and become vulnerable to phishing attempts by other apps. In order to mitigate this concern, developers and IT administrators should clearly educate their users how they should determine which apps are \u201cofficial\u201d and which are not.\n\n\nThe following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28\n\n\n\n\nThe message sent to the authorization server is\n\n\n\n\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\n\n\n\n\n\n\nHost: seed.gluu.org\n\n\n\n\n\n\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\n\n\n\n\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\ngrant_type=password&scope=openid&username=mike&password=secret\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse upon successful authentication\n\n\n\n\n\n\n\n\n\n\nHTTP/1.1 200\n\n\n\n\n\n\nContent-Type: application/json\n\n\n\n\n\n\nCache-Control: no-store, private\n\n\n\n\n\n\nPragma: no-cache\n\n\n\n\n\n\n{\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}\n\n\n\n\n\n\n\n\n1.4.2.2.1 Security Properties\n#\n\n\nThere are some security benefits to using this flow against authenticating API calls with a username and password (via HTTP Basic access authentication or similar) although the application has access to the resource owner's password. With Basic authentication, an application needs to have continuous access to the user\u2019s password in order to make API calls. If the user wants to revoke the access of the client, he must change the password and re-enter the password in all the applications that are allowed access to the resource.\n\n\nHowever, if the OAuth Resource Owner Password flow is used, the application only needs access to the user\u2019s credentials once: on first use when the credentials are exchanged for an access token. This means there\u2019s no requirement for the app to store these credentials within the application or on the device, and revoking access is easy as well.\n\n\n1.4.2.2.2 User Experience\n#\n\n\nThe user experience for this flow is identical to typical password-based access requests. The application asks the user for their username and password and the user provides the information. The application then makes either a server-side or client-side request to the API provider\u2019s authorization server, without any user-facing interface changes. If the API provider does not issue a refresh_token and the issued access_token is short-lived, the application will likely store the username and password for future authentication attempts. Unfortunately, this defeats some of the benefit of this flow.\n\n\n1.4.2.3 Gluu OAuth2 Access Management\n#\n\n\nThis flow uses Gluu Access Token (GAT) for access management. The flow needs a profile enabling a client to obtain a token from the \nAS\n by explicitly specifyting the requested scopes. The diagram below shows the overview of the flow.\n\n\n\n\nGAT\n as a plain json object looks like the example below\n\n\n{\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n} \n\n\n\n\nThe \nGAT\n is issued at the endpoint published at \nhttps://<hostname>/.well-known/uma-configuration\n. Please note that all requests/response to/from/between RP, [RS][], \nAS\n must contain \"\nGAT\n\" HTTP header with \ntrue\n value. In this way \nAS\n differentiantes calls from normal UMA.The example below shows a response with \nGAT\n value set to \ntrue\n.\n\n\nPOST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}\n\n\n\n\nThe message sent to the authorization server is\n\n\n\n\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nGET /users/alice/album/photo.jpg HTTP/1.1\n\n\n\n\n\n\nAuthorization: Bearer vF9dft4qmT\n\n\n\n\n\n\nHost: gluu.example.com\n\n\n\n\n\n\nGAT: true\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse with \nrpt\n\n\n\n\n\n\n\n\n\n\nHTTP/1.1 200 OK\n\n\n\n\n\n\nContent-Type: application/json\n\n\n\n\n\n\nGAT: true\n\n\n\n\n\n\n{\n\n\n\n\n\n\n\"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n1.5 SCIM\n#\n\n\nSCIM stands for System for Cross-domain Identity Management which is a specification to manage users in a cloud environment. Gluu Server supports SCIM version 1.0 and 2.0 out of the box. The following diagram shows the SCIM model from the \nSCIM Website\n.\n\n\n\n\nThe SCIM Specifications are available from the SCIM Website. There are two specifications in SCIM 2.0:\n\n\n\n\nSCIM 2.0 Core Specifications\n\n\nSCIM 2.0 Protocol Specification\n\n\n\n\n1.5.1 Terminology\n#\n\n\nThe SCIM specification defines some basic terms that are used in the document. The basic terms like attribute, [SP][] are same across all the protocols. A few confusing ones are listed below from the \nSCIM 2.0 Specs\n.\n\n\n\n\n\n\nResource:  An artifact that is managed by a service provider and that\n      contains one or more attributes, e.g., \"User\" or \"Group\".\n\n\n\n\n\n\nResource Type:  A type of a resource that is managed by a service provider.  The\n      resource type defines the resource name, endpoint URL, schemas,\n      and other metadata that indicate where a resource is managed and\n      how it is composed, e.g., \"User\" or \"Group\".\n\n\n\n\n\n\nSchema: A collection of attribute definitions that describe the contents of an entire or partial resource, e.g.,\n      \"urn:ietf:params:scim:schemas:core:2.0:User\".\n\n\n\n\n\n\nThe details of the SCIM API are given later in this documentation.",
            "title": "1. Introduction"
        },
        {
            "location": "/admin-guide/#11-saml",
            "text": "Security Assertion Markup Language (SAML) is an authentication and authorization protocol that defines the transaction process for XML-encoded assertions about authentication, authorization and attributes. The protocol is goverened by  Security Assertion Markup Language Core\n(SAML) V2.0 . The goal of this protocol is to exchange authentication and authorization data between Service Providers (SP) and the Identity Provider (IDP).\nGluu Server supports both inbound and outbound flow of SAML transaction. The oxTrutst administrator interface makes it easy to use SAML.  Trust Relationships are the foundation on which SAML works. Gluu Server makes it easy to setup Trust Relationships from the oxTrust admin interface. There are two types of flow Gluu CE supports, inbound and outbound SAML.\nTrust Relationship creation is mandatory in both flows; however, the inbound flow also acts as a SAML proxy. The details about how to setup a Trust Relationship and how to setup SAML proxy follows later in this documentation. The image below is taken from wikipedia, showing a SAML transaction workflow.",
            "title": "1.1 SAML"
        },
        {
            "location": "/admin-guide/#12-openid-connect",
            "text": "OpenID Connect  is a standard profile of OAuth2 which defines a protocol to enable any website, mobile application to verify the identity of the user accessing its resources through an authorization server or identity server. The protocol is API friendly and works through endpoints making it easy for applications to use it.   OpenID Connect specification consists of different documents which outline different aspects of the protocol. The basic implementation requires the  OpenID Connect Core Specification . The figure below taken from the  OpenID Connect website  shows the overview of the protocol and the different parts of the specification.   1.2.1 Terminology #   Claim: Information about the entity  ID Token: JSON Web Token (JWT) that contains claims about the authentication  Issuer: The authority that issues the claims  OpenID Provider (OP): OAuth2.0 authorization server that authenticates user through claims to the Relying Party (RP)  Relying Party (RP): OAuth 2.0 Client application that requires authentication and claims from an OpenID Provider(OP)  UserInfo Endpoint: An URL using https that returns authorization for the user from the OP to the RP   1.2.2 Discovery #  OpenID Connect provides a simple mechanism to notify about the available endpoints. This is difined in the  OpenID Connect Discovery Specification .   In order for an OpenID Connect Relying Party (RP) to utilize OpenID Connect services for an End-User, the RP needs to know where the OpenID Provider is. OpenID Connect uses WebFinger to locate the OpenID Provider for an End-User.\nOnce the OpenID Provider has been identified, the configuration information for the OP is retrieved from a well-known location as a JSON document, including its OAuth 2.0 endpoint locations.\nIf you want to try a discovery request, you can make the following WebFinger request to discover the Issuer location:  GET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}",
            "title": "1.2 OpenID Connect"
        },
        {
            "location": "/admin-guide/#13-user-managed-access-uma",
            "text": "UMA is an oAuth based protocol to \"enable a resource owner to control the authorization of data sharing and other protected-resource access made between online services on the owner\u2019s behalf or with the owner\u2019s authorization by an autonomous requesting party\" 1 .  1.3.1 Enterprise UMA #  The Gluu Server implements UMA in a way that enables the protection of any web resource. Through the oxTrust interface, the server admin can write  custom authorization interception scripts  which may contain logic to grant (or forbid) access. The diagram below shows an overview of the UMA Authorization workflow.   1.3.2 Terminology #   Resource Server (RS): Where the resources are held.   Authorization Server (AS): A server that governs access based on resource owner policies.   Requesting Party (RP): An end-user, or a corporation or other legal person, that uses a client to seek access to a protected resource. The requesting party may or may not be the same party as the resource owner.   Client: A web or native app that is used to access a digital resource.   Protection API Token (PAT): An entity seeking protection API access MUST have the scope \"uma_protection\". An access token with at least this scope is called a protection API token (PAT) and an entity that can acquire an access token with this scope is by definition a resource server.   Requesting Party Token (RPT): the token that a client presents to a resource server when trying to access a protected resource.   Authorization API Token (AAT): An entity seeking authorization API access MUST have the scope \"uma_authorization\". An access token with at least this scope is called an authorization API token (AAT) and an entity that can acquire an access token with this scope is by definition a client.   1.3.3 UMA Workflow #  The complete workflow sequence is shown in the diagram below. However there are two different authorization workflow given below for authorization and authorization token.   1.3.3.1 Authorization #   1.3.3.2 Authorization Token #   1.3.4 Discovery #  Gluu Server CE provides an endpoint for discovering information about UMA Provider configuration. A resource server or client can perform an HTTP GET on  https://<hostname>/.well-known/uma-configuration  to retrieve a JSON object indicating the UMA Provider configuration.  The following is an example of a GET request to the UMA configuration discovery endpoint:  {\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}   Note  The UMA Response  may contain custom properties which are uniquely named for convenience and disguishing between standard & custom properties.",
            "title": "1.3 User-Managed Access (UMA)"
        },
        {
            "location": "/admin-guide/#14-oauth20",
            "text": "OAuth2.0 is the next version in the OAuth protocol focusing on simplicity with specific authorization flows for different platforms. The core specification is called the  OAuth 2.0 Authorization Framework . OAuth introduces an authorization layer and separates the role of the client from the resource owner. The resource is accessed using access tokens instead of credentials.  1.4.1 Terminology #   Resource Owner (RO): Entity that owns and controls the access to any resource  Resource Server (RS): Where the resources are held  Client: Any application/web-site that requests access to the protected resource stored in any RS.  Authorization Server: The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization   1.4.2 Workflows #  1.4.2.1 Client Credentials Grant #  The Client Credentials Grant allows  RO  to use username and password as an authorization grant to obtain an access token. This flow is only encouraged when there is high degree of trust between  RO  and the client and no other grant types are not available.  Although this grant requires direct client access to the  RO  credentials it is used for a single request for an access token. This grant type can eliminate the need for the client to store the  RO  credentials for future use, by exchanging the credentials with a long-lived access token or refresh token.   The steps of the flow are:   The application requests an access token from the authorization server, authenticating the request with its client credentials.  If the client credentials are successfully authenticated, an access token is returned to the client.   This flow should be used when the resources of or any application/service are stored externally in cloud storages such as Google Storage or Amazon S3 which can be accessed using API. In this case the application needs to read and update these resources, but acting on behalf of the app itself rather than any individual user. The application can ask the OAuth authorization server for an access token directly, without the involvement of any end user.  The following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer  The message sent to the authorization server is     Request      POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1    Host: seed.gluu.org    Authorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==    Content-Type: application/x-www-form-urlencoded    grant_type=client_credentials&scope=storage        Response upon successful authentication      HTTP/1.1 200    Content-Type: application/json    Cache-Control: no-store, private    Pragma: no-cache    {\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}     1.4.2.2 Resource Owner Password Credential Grant #  This grant allows the usage of  RO  password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below shows the flow   The steps of the flow are:\n1. User presents their credentials to the application in addition to a username and password.\n2. If the client credentials are successfully authenticated, an access token is returned to the client  This flow should be sparingly used becase the password for the  RO  is exposed to the application/client. It is recommended only for first-party \u201cofficial\u201d applications released by the API provider, and not opened up to wider third-party developer communities. If a user is asked to type their password into \u201cofficial\u201d applications, they may become accustomed to doing so and become vulnerable to phishing attempts by other apps. In order to mitigate this concern, developers and IT administrators should clearly educate their users how they should determine which apps are \u201cofficial\u201d and which are not.  The following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28  The message sent to the authorization server is     Request      POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1    Host: seed.gluu.org    Authorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==    Content-Type: application/x-www-form-urlencoded    grant_type=password&scope=openid&username=mike&password=secret        Response upon successful authentication      HTTP/1.1 200    Content-Type: application/json    Cache-Control: no-store, private    Pragma: no-cache    {\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}     1.4.2.2.1 Security Properties #  There are some security benefits to using this flow against authenticating API calls with a username and password (via HTTP Basic access authentication or similar) although the application has access to the resource owner's password. With Basic authentication, an application needs to have continuous access to the user\u2019s password in order to make API calls. If the user wants to revoke the access of the client, he must change the password and re-enter the password in all the applications that are allowed access to the resource.  However, if the OAuth Resource Owner Password flow is used, the application only needs access to the user\u2019s credentials once: on first use when the credentials are exchanged for an access token. This means there\u2019s no requirement for the app to store these credentials within the application or on the device, and revoking access is easy as well.  1.4.2.2.2 User Experience #  The user experience for this flow is identical to typical password-based access requests. The application asks the user for their username and password and the user provides the information. The application then makes either a server-side or client-side request to the API provider\u2019s authorization server, without any user-facing interface changes. If the API provider does not issue a refresh_token and the issued access_token is short-lived, the application will likely store the username and password for future authentication attempts. Unfortunately, this defeats some of the benefit of this flow.  1.4.2.3 Gluu OAuth2 Access Management #  This flow uses Gluu Access Token (GAT) for access management. The flow needs a profile enabling a client to obtain a token from the  AS  by explicitly specifyting the requested scopes. The diagram below shows the overview of the flow.   GAT  as a plain json object looks like the example below  {\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n}   The  GAT  is issued at the endpoint published at  https://<hostname>/.well-known/uma-configuration . Please note that all requests/response to/from/between RP, [RS][],  AS  must contain \" GAT \" HTTP header with  true  value. In this way  AS  differentiantes calls from normal UMA.The example below shows a response with  GAT  value set to  true .  POST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}  The message sent to the authorization server is     Request      GET /users/alice/album/photo.jpg HTTP/1.1    Authorization: Bearer vF9dft4qmT    Host: gluu.example.com    GAT: true        Response with  rpt      HTTP/1.1 200 OK    Content-Type: application/json    GAT: true    {    \"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"    }",
            "title": "1.4 OAuth2.0"
        },
        {
            "location": "/admin-guide/#15-scim",
            "text": "SCIM stands for System for Cross-domain Identity Management which is a specification to manage users in a cloud environment. Gluu Server supports SCIM version 1.0 and 2.0 out of the box. The following diagram shows the SCIM model from the  SCIM Website .   The SCIM Specifications are available from the SCIM Website. There are two specifications in SCIM 2.0:   SCIM 2.0 Core Specifications  SCIM 2.0 Protocol Specification   1.5.1 Terminology #  The SCIM specification defines some basic terms that are used in the document. The basic terms like attribute, [SP][] are same across all the protocols. A few confusing ones are listed below from the  SCIM 2.0 Specs .    Resource:  An artifact that is managed by a service provider and that\n      contains one or more attributes, e.g., \"User\" or \"Group\".    Resource Type:  A type of a resource that is managed by a service provider.  The\n      resource type defines the resource name, endpoint URL, schemas,\n      and other metadata that indicate where a resource is managed and\n      how it is composed, e.g., \"User\" or \"Group\".    Schema: A collection of attribute definitions that describe the contents of an entire or partial resource, e.g.,\n      \"urn:ietf:params:scim:schemas:core:2.0:User\".    The details of the SCIM API are given later in this documentation.",
            "title": "1.5 SCIM"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml/",
            "text": "2.1 Outbound SAML\n#\n\n\nOutbound SAML can also be called SP-initiated Single Sign On (SSO) or traditional SAML. In an outbound SAML transaction, the SP redirects the user to the designated Identity Provider (IDP) for authentication and authorization. The IDP will ask for the username and password for the user and up on successful authentication, the user is sent back to the SP logged in. The requirement for the IDP is a trust relationship (TR) set up beforehand with the SP. The next section covers how to set up a TR in Gluu Server.\n\n\n\n\nNote\n\n\nFor any SAML transaction, a trust relationship must be created with the IDP.\n\n\n\n\n2.1.1 Trust Relationship Requirements\n#\n\n\nTrust Relationship requires the infomation listed below.\n\n\n\n\nMetadata of website\n\n\nRequired attribute of website\n\n\nSSO testing endpoint of website\n\n\n\n\n2.1.1.1 Metadata of the SP\n#\n\n\nMetadata is a XML file which has configuration data used to provision any website (SP) or IDP (Gluu Server) to communicate with each other. It is interchangeable between the IDP and the SP.\n\n\nWebsites (SP) can provide metadata via URL or as a separate file.\n\n\n2.1.1.2 Required Attributes\n#\n\n\nEvery organization has their own policy to release/share attributes with\nany IDP or SP. The oxTrust GUI supports both preconfigured and custom attribute\nRelease to the SP. The administrator only needs to click on the desired \nattribute and it will be released to the SP.\n\n\n2.1.1.3 SSO Testing Endpoint\n#\n\n\nEvery website (SP) should have both a staging and a production URI\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.\n\n\n2.1.2 Create a Trust Relationship\n#\n\n\n\n\nGo to SAML \u2192 Trust Relationships\n\n\nClick on \u201cAdd Relationship\u201d\n\n\n\n\n\n\n\n\nA new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.\n\n\n\n\n\n\n\n\nDisplay Name\n: Name of the Trust Relationship (it should be unique for every trust relationship)\n\n\nDescription\n: Little description. Purpose and SSO link can be added here.\n\n\nMetadata Type\n: Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server\n\n\nFile\n: If SP has uploadable metadata in XML format, this option works best.\n\n\nURI\n: If the metadata of SP has URI link and accessible from the internet, Gluu Server Administrator can use this option.\n\n\n\n\n\n\nReleased\n: The attributes that are required for the SP must be in this pane. The required attributes can be selected from the left side pane with the heading \u201cRelease Additional Attributes\u201d.\nThe TR is added by clicking on the \nAdd\n button located in the lower left side of the page.\n\n\n\n\n2.1.2.1 Relying Party Configuration\n#\n\n\nThe Relying Party must be configured for some SPs. The relying party configuration is accessible on the TR Creation page. The checkbox \nConfigure specific Relying Party\n must be checked.\n\n\n\n\nThe checkbox will result in a link which can be accessed to configure relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.\n\n\n\n\n2.1.2.2 Federation Configuration\n#\n\n\nIf the SP is part of any identity federation such as InCommon Federation, then the administrator must add the federation as a SP in Gluu Server. This will allow the administrator to add SPs under the federation easily from a TR. The requirement of a federation TR created using the general TR is a must. The example below shows an administrator adding a TR for InCommon Federation.\n\n\n\n\nOnce this is done, the SPs under the federation can be added by selecting the Federation from the \nFederation Name\n drop down menu and selecting the entity-id for the SP.\n\n\n\n\n2.2 Inbound SAML\n#\n\n\nGluu Server uses an open source product called Asimba to achieve inbound SAML. Asimba allows websites to use a single IDP for SSO even when the organization has multiple trusted IDPs. Please see the \nAsimba website\n for more information.\n\n\nGluu Server is shipped with the SAML Script which simplifies the process of using SAML Proxy. The SAML proxy configuration is made easy from the oxTrust admin interface. This section provides a step-by-step method of configuring the proxy with two (2) IDPs and a single SP. The administrator can add multiple IDPs or SPs if required using the same method. However, it is mandatory that all the SPs and IDPs are connected to the Asimba server, or the IDP that has the Asimba module enabled.\ni\n\n\n2.2.1 Required Setup\n#\n\n\n\n\n\n\n\n\nSetup hostname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://sp.gluu.org/protected/print.py\n\n\nThis is a shibboleth SP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\nhttps://test.gluu.org\n\n\nThis is a Gluu Server SAML IdP with Asimba\n\n\n\n\n\n\nhttps://nest.gluu.org\n\n\nThis is a second Gluu Server SAML IdP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nDescription of SAML Authentication Module is available here: https://github.com/GluuFederation/oxAuth/tree/master/Server/integrations/saml\n\n\n\n\n2.2.1.1 Specific Setup Details\n#\n\n\nThe Gluu Server setup with the hostname \nhttps://test.gluu.org\n must be setup with Asimba. This is done by typing \nyes\n to the \nsetup script prompt\n.\n\n\n\n\n2.2.2 Custom Script Configuration\n#\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://test.gluu.org\n.\n\n\n\n\n\n\n\n\nLog into the oxTrust interface as \nadmin\n\n\n\n\n\n\nNavigate to Configuration --> Manage Custom Scripts\n\n\n\n\n\n\n\n\n\n\nSelect/Add \nsaml\n script from \nPerson Authentication\n tab\n\n\n\n\n\n\n\n\nName: saml\n\n\nDescription: Saml Authentication module\n\n\nProgramming Language: Python\n\n\nLevel: 1\n\n\nLocation Type: LDAP\n\n\nUsage Type: Web\n\n\nCustom property (key/value)\n\n\nsaml_deployment_type: enroll\n\n\nsaml_idp_sso_target_url: https://test.gluu.org/asimba/profiles/saml2/sso/web\n\n\nsaml_validate_response: false\n\n\nasimba_entity_id: https://test.gluu.org/saml\n\n\nasimba_saml_certificate_file: /etc/certs/saml.pem \n\n\nnote: Deployer need to copy 'asimba.crt' in 'saml.pem' without the 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag. \n\n\n\n\n\n\nuser_object_classes: eduPerson\n\n\nsaml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] } \n\n\nexample: \n{\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }\n\n\n\n\n\n\nenforce_uniqueness_attr_list: attribute1, attribute2\n\n\nexample: \nedupersonprincipalname, uid, mail, givenName\n\n\n\n\n\n\nsaml_use_authn_context: false\n\n\nsaml_generate_name_id: true\n\n\nScript: Please copy the \nSAML Script\n from Github. \n\n\nEnabled: True\n\n\n\n\n\n\n\n\n\n\n2.2.3 Adding IDP in Asimba Server\n#\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://test.gluu.org\n.\n\n\n\n\n\n\n\n\nLog into the oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> Idp\n\n\n\n\n\n\n\n\n\n\nClick on 'Add IDP' button\n\n\n\n\n\n\n\n\n\n\nFill up the form with the information below:\n\n\n\n\n\n\nID: The entityID of the remote ID/ADFS \n\n\n\n\nExample: \nhttps:<hostname_of_gluu_server>/idp/shibboleth\n  \n\n\n\n\n\n\n\n\nFriendly Name: There is no particular format for this field, use anything \n\n\n\n\n\n\nMetadata URL: Keep it blank, we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Keep it as it is. \n\n\n\n\n\n\nMetadata File: Download metadata of remote IDP/ADFS and upload that XML file. \n\n\n\n\nExample: The metadata for Gluu IdP can be downloaded using \nwget -c https:<hostname_of_gluu_server>/idp/shibboleth\n\n\n\n\n\n\n\n\nTrust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 certificate\n\n\n\n\nExample: You will get the SAML certificate from Gluu Server's metadata link or available inside \n/etc/certs/shibIDP.crt\n\n\n\n\n\n\n\n\nNameIDFormat: SAML2 URI nameID format if remote IDP is a Gluu Server otherwise ask for their nameID format.\n\n\n\n\nExample: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'\n\n\n\n\n\n\n\n\nEnabled: Yes\n\n\n\n\n\n\nSend Scoping: Yes\n\n\n\n\n\n\nAllowCreate: Yes\n\n\n\n\n\n\nDisable SSO for IDP: No\n\n\n\n\n\n\nACS index: Yes\n\n\n\n\n\n\nSend NameIDPolicy: Yes\n\n\n\n\n\n\nAvoid Subject Confirmations: No\n\n\n\n\n\n\n\n\n\n\n\n\n2.2.3 Adding SP Requestor in Asimba Server\n#\n\n\n\n\n\n\nLog into oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> SP Requestor\n\n\n\n\n\n\n\n\n\n\nClick on 'Add SP Requestor'\n\n\n\n\n\n\n\n\nPlease fill up the form with the information below:\n\n\nSelect parent SP Pool: requestorpool.1\n\n\nID: https://test.gluu.org/saml\n\n\nFriendly Name: oxAuth SAML\n\n\nMetadata URL: Not required\n\n\nMetadata Timeout: -1\n\n\nMetadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata. \n\n\nTrust Certificate File: Not required\n\n\nProperties: Not required\n\n\nEnabled: Yes\n\n\nSigning: No\n\n\nmetadata snippet: \n\n\n\n\n\n\n\n\n<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor> \n\n\n\n\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://test.gluu.org\n.\n\n\n\n\nCreate Trust relationships for all service provides which are included in SAML Proxy SSO workflow. In our test setup we created Trust relationship for remote SP which has entityID 'https://sp.gluu.org/shibboleth'. How to create Trust Relationship is available in \nSection 2.1\n.\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://nest.gluu.org\n.\n\n\n\n\nLog into the oxTrust inteface and follow the steps to add a new Trust Relationship.\n\n\n\n\nGluu Server's Asimba metadata can be achieved from 'https://test.gluu.org/asimba/profiles/saml2'\n\n\nDownload the metadata and use 'File' method to create Trust relationship\n\n\n\n\n\n\nRelying Party Configuration: 'SAML2SSO' Profile \n![\n\n\nexample: \n\n\nincludeAttributeStatement: Yes\n\n\nassertionLifeTime: 300000\n\n\nassertionProxyCount: 0\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never\n\n\n\n\n\n\n\n\n\n\nAttribute: Any attribute Service Providers require. Any kind of nameID from below list is mandatory. \n\n\nnameID: \n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"\n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n\n\n\n\n\n\nHow to create nameID in Gluu Server is available \nhere\n\n\n\n\n\n\n\n\n2.2.5 Test Asimba with SAML Proxy\n#\n\n\nHere is a quick video on how SAML Proxy SSO might look like. Here in this video we are using 'https://sp.gluu.org/protected/print.py' as our protected service provider link. After initiating the SSO, we are moved to Gluu Server's SAML Proxy discovery page ( https://test.gluu.org ). From there we selected 'Nest' as our desired authentication server. After succesful authentication we are landing to proctected resource. \n\n\n\n\nYoutube Video Link",
            "title": "2. SAML"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml/#21-outbound-saml",
            "text": "Outbound SAML can also be called SP-initiated Single Sign On (SSO) or traditional SAML. In an outbound SAML transaction, the SP redirects the user to the designated Identity Provider (IDP) for authentication and authorization. The IDP will ask for the username and password for the user and up on successful authentication, the user is sent back to the SP logged in. The requirement for the IDP is a trust relationship (TR) set up beforehand with the SP. The next section covers how to set up a TR in Gluu Server.   Note  For any SAML transaction, a trust relationship must be created with the IDP.   2.1.1 Trust Relationship Requirements #  Trust Relationship requires the infomation listed below.   Metadata of website  Required attribute of website  SSO testing endpoint of website   2.1.1.1 Metadata of the SP #  Metadata is a XML file which has configuration data used to provision any website (SP) or IDP (Gluu Server) to communicate with each other. It is interchangeable between the IDP and the SP.  Websites (SP) can provide metadata via URL or as a separate file.  2.1.1.2 Required Attributes #  Every organization has their own policy to release/share attributes with\nany IDP or SP. The oxTrust GUI supports both preconfigured and custom attribute\nRelease to the SP. The administrator only needs to click on the desired \nattribute and it will be released to the SP.  2.1.1.3 SSO Testing Endpoint #  Every website (SP) should have both a staging and a production URI\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.  2.1.2 Create a Trust Relationship #   Go to SAML \u2192 Trust Relationships  Click on \u201cAdd Relationship\u201d     A new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.     Display Name : Name of the Trust Relationship (it should be unique for every trust relationship)  Description : Little description. Purpose and SSO link can be added here.  Metadata Type : Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server  File : If SP has uploadable metadata in XML format, this option works best.  URI : If the metadata of SP has URI link and accessible from the internet, Gluu Server Administrator can use this option.    Released : The attributes that are required for the SP must be in this pane. The required attributes can be selected from the left side pane with the heading \u201cRelease Additional Attributes\u201d.\nThe TR is added by clicking on the  Add  button located in the lower left side of the page.   2.1.2.1 Relying Party Configuration #  The Relying Party must be configured for some SPs. The relying party configuration is accessible on the TR Creation page. The checkbox  Configure specific Relying Party  must be checked.   The checkbox will result in a link which can be accessed to configure relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.   2.1.2.2 Federation Configuration #  If the SP is part of any identity federation such as InCommon Federation, then the administrator must add the federation as a SP in Gluu Server. This will allow the administrator to add SPs under the federation easily from a TR. The requirement of a federation TR created using the general TR is a must. The example below shows an administrator adding a TR for InCommon Federation.   Once this is done, the SPs under the federation can be added by selecting the Federation from the  Federation Name  drop down menu and selecting the entity-id for the SP.",
            "title": "2.1 Outbound SAML"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml/#22-inbound-saml",
            "text": "Gluu Server uses an open source product called Asimba to achieve inbound SAML. Asimba allows websites to use a single IDP for SSO even when the organization has multiple trusted IDPs. Please see the  Asimba website  for more information.  Gluu Server is shipped with the SAML Script which simplifies the process of using SAML Proxy. The SAML proxy configuration is made easy from the oxTrust admin interface. This section provides a step-by-step method of configuring the proxy with two (2) IDPs and a single SP. The administrator can add multiple IDPs or SPs if required using the same method. However, it is mandatory that all the SPs and IDPs are connected to the Asimba server, or the IDP that has the Asimba module enabled.\ni  2.2.1 Required Setup #     Setup hostname  Description      https://sp.gluu.org/protected/print.py  This is a shibboleth SP connected to  https://test.gluu.org    https://test.gluu.org  This is a Gluu Server SAML IdP with Asimba    https://nest.gluu.org  This is a second Gluu Server SAML IdP connected to  https://test.gluu.org      Note  Description of SAML Authentication Module is available here: https://github.com/GluuFederation/oxAuth/tree/master/Server/integrations/saml   2.2.1.1 Specific Setup Details #  The Gluu Server setup with the hostname  https://test.gluu.org  must be setup with Asimba. This is done by typing  yes  to the  setup script prompt .   2.2.2 Custom Script Configuration #   Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://test.gluu.org .     Log into the oxTrust interface as  admin    Navigate to Configuration --> Manage Custom Scripts      Select/Add  saml  script from  Person Authentication  tab     Name: saml  Description: Saml Authentication module  Programming Language: Python  Level: 1  Location Type: LDAP  Usage Type: Web  Custom property (key/value)  saml_deployment_type: enroll  saml_idp_sso_target_url: https://test.gluu.org/asimba/profiles/saml2/sso/web  saml_validate_response: false  asimba_entity_id: https://test.gluu.org/saml  asimba_saml_certificate_file: /etc/certs/saml.pem   note: Deployer need to copy 'asimba.crt' in 'saml.pem' without the 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag.     user_object_classes: eduPerson  saml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] }   example:  {\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }    enforce_uniqueness_attr_list: attribute1, attribute2  example:  edupersonprincipalname, uid, mail, givenName    saml_use_authn_context: false  saml_generate_name_id: true  Script: Please copy the  SAML Script  from Github.   Enabled: True      2.2.3 Adding IDP in Asimba Server #   Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://test.gluu.org .     Log into the oxTrust interface    Navigate to SAML --> Idp      Click on 'Add IDP' button      Fill up the form with the information below:    ID: The entityID of the remote ID/ADFS    Example:  https:<hostname_of_gluu_server>/idp/shibboleth        Friendly Name: There is no particular format for this field, use anything     Metadata URL: Keep it blank, we will upload metadata    Metadata Timeout: Keep it as it is.     Metadata File: Download metadata of remote IDP/ADFS and upload that XML file.    Example: The metadata for Gluu IdP can be downloaded using  wget -c https:<hostname_of_gluu_server>/idp/shibboleth     Trust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 certificate   Example: You will get the SAML certificate from Gluu Server's metadata link or available inside  /etc/certs/shibIDP.crt     NameIDFormat: SAML2 URI nameID format if remote IDP is a Gluu Server otherwise ask for their nameID format.   Example: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'     Enabled: Yes    Send Scoping: Yes    AllowCreate: Yes    Disable SSO for IDP: No    ACS index: Yes    Send NameIDPolicy: Yes    Avoid Subject Confirmations: No       2.2.3 Adding SP Requestor in Asimba Server #    Log into oxTrust interface    Navigate to SAML --> SP Requestor      Click on 'Add SP Requestor'     Please fill up the form with the information below:  Select parent SP Pool: requestorpool.1  ID: https://test.gluu.org/saml  Friendly Name: oxAuth SAML  Metadata URL: Not required  Metadata Timeout: -1  Metadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata.   Trust Certificate File: Not required  Properties: Not required  Enabled: Yes  Signing: No  metadata snippet:      <md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor>     Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://test.gluu.org .   Create Trust relationships for all service provides which are included in SAML Proxy SSO workflow. In our test setup we created Trust relationship for remote SP which has entityID 'https://sp.gluu.org/shibboleth'. How to create Trust Relationship is available in  Section 2.1 .   Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://nest.gluu.org .   Log into the oxTrust inteface and follow the steps to add a new Trust Relationship.   Gluu Server's Asimba metadata can be achieved from 'https://test.gluu.org/asimba/profiles/saml2'  Download the metadata and use 'File' method to create Trust relationship    Relying Party Configuration: 'SAML2SSO' Profile \n![  example:   includeAttributeStatement: Yes  assertionLifeTime: 300000  assertionProxyCount: 0  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never      Attribute: Any attribute Service Providers require. Any kind of nameID from below list is mandatory.   nameID:   nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"  nameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"  nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"    How to create nameID in Gluu Server is available  here     2.2.5 Test Asimba with SAML Proxy #  Here is a quick video on how SAML Proxy SSO might look like. Here in this video we are using 'https://sp.gluu.org/protected/print.py' as our protected service provider link. After initiating the SSO, we are moved to Gluu Server's SAML Proxy discovery page ( https://test.gluu.org ). From there we selected 'Nest' as our desired authentication server. After succesful authentication we are landing to proctected resource.    Youtube Video Link",
            "title": "2.2 Inbound SAML"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml-test/",
            "text": "This section provides steps to test the SAML protocol for Gluu Server Community Edition (CE) with Shibboleth SP.\n\n\n3.1 Ubuntu Server 14.04\n#\n\n\nThe \nmod-shib2\n module is installed with Apache Server to enable Shibboleth SP in Ubuntu. The following command will install the necessary packages to install Apache Server with Shibboleth SP and enable the \nhttps\n protocol.\n\n\n# apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n\n\n\n\nThe next step is to generate a self-signed certificate for the \nhttps\n protocol. If there is any available signed-certificate, that can be used too. This guide is for testing purpose only, so we used a self-signed certificate. The following commands will generate and sign the certificate.\n\n\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n\n\n\n\nIt is necessary to generate a metadata for the Shibboleth SP which will be used to create the Trust Relationship in Gluu Server. The following commands will generate the metadata and start the Apache Server with Shibboleth daemon.\n\n\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start\n\n\n\n\n\n\nNote\n\n\nDownload the \nminnow-metadata.xml\n file to create the Trust Relationship in Gluu Server CE.\n\n\n\n\nAt this point, a folder protected by Shibboleth should be created and and added into the \ndefault-ssl.conf\n file. The following command will create a folder named \nprotected\n and add the location in the SSL config file.\n\n\n# mkdir /var/www/protected \n# vim /etc/apache2/sites-available/default-ssl.conf\n\n\n\n\nPlease add the following in the default-ssl.conf file\n\n\nScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>\n\n\n\n\nA python script is created inside the protected directory to confirm that the SAML TR is working. The following commands will create the script.\n\n\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n# vim /var/www/protected/printHeaders.py\n\n\n\n\nPlease add the following the printHeaders.py file\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\nThe \nshibboleth2.xml\n file is quite large and confusing. It is recommended to use the following shortened configuration file and replace the same with the content below. The following command will open the Shibboleth configuration file in \nvim\n.\n\n\n# vim /etc/shibboleth/shibboleth2.xml\n\n\n\n\n\n\nNote\n\n\nPlease replace \nminnow.gluu.info\n with the hostname of the Shibboleth SP and \nalbacore.gluu.info\n with the hostname of Gluu CE.\n\n\n\n\nThe IDP metadata is downloaded and named \nalbacore.xml\n and placed in the \n/etc/shibboleth/\n folder.\n\n\n<SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"minnow.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://minnow.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/minnow.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>\n\n\n\n\nThe \nattribute-map.xml\n file is shortened as well for this guide. The following command will open the file in \nvim\n.\n\n\n# vim /etc/shibboleth/attribute-map.xml\n\n<--Please replace the file with the contents below-->\n\n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>\n\n\n\n\nThe final step is to test the configuration by creating a trust relationship. Please see section \n2.1\n for creating a Trust Relationship. The following attributes must be released: \n\n\n\n\nEmail\n\n\nDisplay Name\n\n\nFirst Name\n\n\nLast Name\n\n\nUsername\n\n\n\n\n\n\nNote\n\n\nPlease configure specific Relying Party and select the \nSAML2SSO\n profile with default options.\n\n\n\n\nTo test the setup, use this URL in your browser \nhttps://minnow.gluu.info/protected/printHeaders.py\n  and use valid credentials in Gluu Server which will produce something similar to the example given below.\n\n\n**Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://albacore.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f\n\n\n\n\n3.2 CentOS 6.8\n#\n\n\nThe Shibboleth SP is available for download from the Shibboleth repo in CentOS 6.x. The shibboleth repo is available in the follwoing link:\n\n\nhttp://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo\n\n\n\n\nPlease use the following command to download the shibboleth repo and install shibboleth SP.\n\n\n# wget http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo -O /etc/yum.repos.d/shib.repo\n# yum install shibboleth\n# service shibd start\n# chkconfig shibd on\n\n\n\n\nThe next step is to install Apache server in the machine.\n\n\n# yum install httpd\n# service httpd start\n# service iptables stop\n\n\n\n\nThe following changes should be made in \nhttpd.conf\n file. Use the following command to open the file:\n\n\n# vi /etc/httpd/conf/httpd.conf\n\n\n\n\n\n\nChange the \nServerName\n directive to the server name of the SP\n\n\nSet \nUseCanonicalName\n On\n\n\nRestart the httpd service using the command \nservice httpd restart\n\n\nCreate an index.html file inside the directory \n/var/www/html\n\n\nRestart the httpd service using the command \nservice httpd restart\n\n\nCheck from your browser if the file \nindex.html\n is visible.\n\n\n\n\nThe next step is to generate a self-signed certificate for the https protocol. If there is any available signed-certificate, that can be used too. This guide is for testing purpose only, so we used a self-signed certificate. The following commands will generate and sign the certificate.\n\n\n# cd /etc/shibboleth\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n\n\n\n\nThe final step is to configure the shibboleth SP in the VM. For testing purpose a folder is created called \nsecure\n which will be protected by Shibboleth. Use the following command to create a folder named \nsecure\n:\n\n\n# mkdir /var/www/secure\n# chmod apache:apache /var/www/secure\n\n\n\n\nPlease add the location of the folder in the \nhttpd.conf\n file. Use the following command to open the file.\n\n\n# vim /etc/httpd/conf/httpd.conf\n\n\n\n\nPlease add the location of the folder and the authorization type in the file:\n\n\n<Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>\n\n\n\n\nRestart the Apache Server and the Shibboleth daemon using the following commands:\n\n\n# service shibd restart\n# service httpd restart\n\n\n\n\nA python script is created inside the protected directory to confirm that the SAML TR is working. The following commands will create the script.\n\n\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n# vim /var/www/protected/printHeaders.py\n\n\n\n\nPlease add the following in the file:\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\nThe shibboleth2.xml file is quite large and confusing. It is recommended to use the following shortened configuration file and replace the same with the content below. The following command will open the Shibboleth configuration file in \nvim\n.\n\n\n# vim /etc/shibboleth/shibboleth2.xml\n\n\n\n\n\n\nNote\n\n\nPlease replace \nminnow.gluu.info\n with the hostname of the Shibboleth SP and \nalbacore.gluu.info\n with the hostname of Gluu CE.\n\n\n\n\nThe IDP metadata is downloaded and named \nalbacore.xml\n and placed in the \n/etc/shibboleth/\n folder.\n\n\n<SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"minnow.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://minnow.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/minnow.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>\n\n\n\n\nThe \nattribute-map.xml\n file is shortened as well for this guide. The following command will open the file in \nvim\n.\n\n\n# vim /etc/shibboleth/attribute-map.xml\n\n\n\n\nPlease add the following in the file:\n\n\n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>\n\n\n\n\nThe final step is to test the configuration by creating a trust relationship. Please see section \n2.1\n for creating a Trust Relationship. The following attributes must be released:\n\n\n\n\nEmail\n\n\nDisplay Name\n\n\nFirst Name\n\n\nLast Name\n\n\nUsername\n\n\n\n\n\n\nNote\n\n\nPlease configure specific Relying Party and select the \nSAML2SSO\n profile with default options.\n\n\n\n\nTo test the setup, use this URL in your browser \nhttps://minnow.gluu.info/protected/printHeaders.py\n and use valid credentials in Gluu Server.\n\n\n3.3 Windows 7\n#\n\n\nThe Shibboleth SP is available for download in windows from the following link:\n\n\n\n\nhttp://www.shibboleth.net/downloads/service-provider/latest/\n\n\n\n\nPlease download the windows setup and start the installation. For testing purposes, the default path \nC:\\opt\\shibboleth-sp\n and port \n1600\n is shown in the screenshot below.\n\n\n\n\n\n\n\n\nThis guide is used to test Shibboleth SP with Apache Server, and for that reason remember to uncheck the \nInstall ISAPI filter and configure IIS\n option from the next screenshot.\n\n\n\n\n\n\nNote\n\n\nAllow the operation if the UAC of windows asks for permission.\n\n\n\n\nThe next step is to install the apache server which is available for download from the \nApache Website\n. Download and start the installation \n\n\n\n\n\n\nThe default domain and hostname can be used for testing purpose. The final testing will require specific changes that follow later.\n\n\n\n\nThe Shibboleth SP will be configured with Apache now. The following steps will guide you through the process.\n\n\n\n\nChange the permission of the Apache installation directory, and provide \nwrite\n access\n\n\nThe following changes are for the \nhttpd.conf\n file:\n\n\nChange \nServerName localhost:80\n for local testing\n\n\nCopy \napache22.conf\n from the Shibboleth directory to \n~/apache/conf/extra/\n\n\n\n\n\n\nThe following changes are for \nShibboleth2.xml\n file\n\n\nChange Host name=\u201clocalhost\u201d\n\n\nChange  entityID=\u201chttps://localhost/shibboleth\u201d \n\n\nChange ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d\n\n\n\n\n\n\nReboot the Windows machine\n\n\nEnter the address \nlocalhost/Shibboleth.sso/Status\n in the browser and the following screen should appear\n\n\n\n\n\n\nThe final step is to test the configuration by creating a trust relationship. Please see section \n2.1\n for creating a Trust Relationship.\n\n\n3.4 IIS\n#\n\n\nThis section will guide the administrator through the SAML SP setup process in IIS server.\n\n\n\n\nPlease navigate to \nStart\n --> \nControl Panel\n --> \nPrograms\n --> \nTurn Windows features on or off\n\n\n\n\nSelect the following from the menu and press \nOK\n\n\n\n\nInternet Information Services\n\n\nWeb Management Tools\n\n\nII6 Management Compatibility\n\n\nIS Management Console\n\n\nIIS Management Scripts and Tools\n\n\nIIS Management Service\n\n\nWorld Wide Web Services\n\n\nCGI\n\n\nISAPI Filters\n\n\nISAPI Extensions\n\n\n\n\n\n\n\n\n\nTest IIS from your system by accessing \n127.0.0.1\n in the web browser\n\n\n\n\n\n\n\n\nThe next configuration is for ISAPI Filter which is accessed from the Internet Information Services (IIS) Manager.\n\n\n\n\nStart --> Administrative Tools --> Internet Information Service/IIS Manager\n\n\nDouble click on \"ISAPI and CGI Restrictions\" \n\n\n\n\n\n\n\n\nAdd a new Filter\n\n\nClick Actions --> Add (upper right corner)\n\n\nSelect \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\nDescription: \"Shibboleth\"\n\n\nClick \"Allow\" (from the right hand side)\n\n\n\n\n\n\n\n\n\n\n\n\nSSO file extension mapping\n\n\nClick on \"Handler Mapping\" from main page\n\n\n\n\n\n\n\n\n\n\n- Click \"Add Script Map\" from Action\n\n\n\n\n\n- Request Path :\".sso\"\n- Executable should be pointed to \"isapi_shib.dll\"\n\n\n\n\n\n\n\nRestart IIS\n\n\nCheck Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete. \n\n\n\n\n\n\nThe next step is to configure the Shibboleth SP.\n\n\n\n\nOpen up \"Server Manager\", scroll down and click on \"Add Roles\"\n\n\n\n\n\n\n\n\n\n\nSelect  \"Web Server (IIS)\", hit \"Next\"\n\n\n\n\n\n\n\n\nSelect the following\n\n\nCGI\n\n\nISAPI Extensions\n\n\nISAPI Filters\n\n\n\n\n\n\n\n\n\n\n- Management Tools\n- IIS Management Console\n- IIS Management Scripts and Tools\n- Management Service\n- All IIS6 Management Compatibility\n\n\n\n\n\n\n\nHit \"Next\", for the confirmation, check the list of plugins.\n\n\n\n\n\n\n\n\nHit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.\n\n\n\n\n\n\n\n\nDownload the \nShibboleth SP\n\n\nStart the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\"\n\n\n\n\n\n\n\n\n\n\nReboot the system after successful installation\n\n\n\n\n\n\nCreate a Trust Relationship in Gluu CE and test the Shibboleth SP",
            "title": "3 Test SAML"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml-test/#31-ubuntu-server-1404",
            "text": "The  mod-shib2  module is installed with Apache Server to enable Shibboleth SP in Ubuntu. The following command will install the necessary packages to install Apache Server with Shibboleth SP and enable the  https  protocol.  # apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl  The next step is to generate a self-signed certificate for the  https  protocol. If there is any available signed-certificate, that can be used too. This guide is for testing purpose only, so we used a self-signed certificate. The following commands will generate and sign the certificate.  # mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt  It is necessary to generate a metadata for the Shibboleth SP which will be used to create the Trust Relationship in Gluu Server. The following commands will generate the metadata and start the Apache Server with Shibboleth daemon.  # shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start   Note  Download the  minnow-metadata.xml  file to create the Trust Relationship in Gluu Server CE.   At this point, a folder protected by Shibboleth should be created and and added into the  default-ssl.conf  file. The following command will create a folder named  protected  and add the location in the SSL config file.  # mkdir /var/www/protected \n# vim /etc/apache2/sites-available/default-ssl.conf  Please add the following in the default-ssl.conf file  ScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>  A python script is created inside the protected directory to confirm that the SAML TR is working. The following commands will create the script.  # touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n# vim /var/www/protected/printHeaders.py  Please add the following the printHeaders.py file  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"  The  shibboleth2.xml  file is quite large and confusing. It is recommended to use the following shortened configuration file and replace the same with the content below. The following command will open the Shibboleth configuration file in  vim .  # vim /etc/shibboleth/shibboleth2.xml   Note  Please replace  minnow.gluu.info  with the hostname of the Shibboleth SP and  albacore.gluu.info  with the hostname of Gluu CE.   The IDP metadata is downloaded and named  albacore.xml  and placed in the  /etc/shibboleth/  folder.  <SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"minnow.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://minnow.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/minnow.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>  The  attribute-map.xml  file is shortened as well for this guide. The following command will open the file in  vim .  # vim /etc/shibboleth/attribute-map.xml\n\n<--Please replace the file with the contents below-->\n\n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>  The final step is to test the configuration by creating a trust relationship. Please see section  2.1  for creating a Trust Relationship. The following attributes must be released:    Email  Display Name  First Name  Last Name  Username    Note  Please configure specific Relying Party and select the  SAML2SSO  profile with default options.   To test the setup, use this URL in your browser  https://minnow.gluu.info/protected/printHeaders.py   and use valid credentials in Gluu Server which will produce something similar to the example given below.  **Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://albacore.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f",
            "title": "3.1 Ubuntu Server 14.04"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml-test/#32-centos-68",
            "text": "The Shibboleth SP is available for download from the Shibboleth repo in CentOS 6.x. The shibboleth repo is available in the follwoing link:  http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo  Please use the following command to download the shibboleth repo and install shibboleth SP.  # wget http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo -O /etc/yum.repos.d/shib.repo\n# yum install shibboleth\n# service shibd start\n# chkconfig shibd on  The next step is to install Apache server in the machine.  # yum install httpd\n# service httpd start\n# service iptables stop  The following changes should be made in  httpd.conf  file. Use the following command to open the file:  # vi /etc/httpd/conf/httpd.conf   Change the  ServerName  directive to the server name of the SP  Set  UseCanonicalName  On  Restart the httpd service using the command  service httpd restart  Create an index.html file inside the directory  /var/www/html  Restart the httpd service using the command  service httpd restart  Check from your browser if the file  index.html  is visible.   The next step is to generate a self-signed certificate for the https protocol. If there is any available signed-certificate, that can be used too. This guide is for testing purpose only, so we used a self-signed certificate. The following commands will generate and sign the certificate.  # cd /etc/shibboleth\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt  The final step is to configure the shibboleth SP in the VM. For testing purpose a folder is created called  secure  which will be protected by Shibboleth. Use the following command to create a folder named  secure :  # mkdir /var/www/secure\n# chmod apache:apache /var/www/secure  Please add the location of the folder in the  httpd.conf  file. Use the following command to open the file.  # vim /etc/httpd/conf/httpd.conf  Please add the location of the folder and the authorization type in the file:  <Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>  Restart the Apache Server and the Shibboleth daemon using the following commands:  # service shibd restart\n# service httpd restart  A python script is created inside the protected directory to confirm that the SAML TR is working. The following commands will create the script.  # touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n# vim /var/www/protected/printHeaders.py  Please add the following in the file:  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"  The shibboleth2.xml file is quite large and confusing. It is recommended to use the following shortened configuration file and replace the same with the content below. The following command will open the Shibboleth configuration file in  vim .  # vim /etc/shibboleth/shibboleth2.xml   Note  Please replace  minnow.gluu.info  with the hostname of the Shibboleth SP and  albacore.gluu.info  with the hostname of Gluu CE.   The IDP metadata is downloaded and named  albacore.xml  and placed in the  /etc/shibboleth/  folder.  <SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"minnow.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://minnow.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/minnow.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>  The  attribute-map.xml  file is shortened as well for this guide. The following command will open the file in  vim .  # vim /etc/shibboleth/attribute-map.xml  Please add the following in the file:  <Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>  The final step is to test the configuration by creating a trust relationship. Please see section  2.1  for creating a Trust Relationship. The following attributes must be released:   Email  Display Name  First Name  Last Name  Username    Note  Please configure specific Relying Party and select the  SAML2SSO  profile with default options.   To test the setup, use this URL in your browser  https://minnow.gluu.info/protected/printHeaders.py  and use valid credentials in Gluu Server.",
            "title": "3.2 CentOS 6.8"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml-test/#33-windows-7",
            "text": "The Shibboleth SP is available for download in windows from the following link:   http://www.shibboleth.net/downloads/service-provider/latest/   Please download the windows setup and start the installation. For testing purposes, the default path  C:\\opt\\shibboleth-sp  and port  1600  is shown in the screenshot below.     This guide is used to test Shibboleth SP with Apache Server, and for that reason remember to uncheck the  Install ISAPI filter and configure IIS  option from the next screenshot.    Note  Allow the operation if the UAC of windows asks for permission.   The next step is to install the apache server which is available for download from the  Apache Website . Download and start the installation     The default domain and hostname can be used for testing purpose. The final testing will require specific changes that follow later.   The Shibboleth SP will be configured with Apache now. The following steps will guide you through the process.   Change the permission of the Apache installation directory, and provide  write  access  The following changes are for the  httpd.conf  file:  Change  ServerName localhost:80  for local testing  Copy  apache22.conf  from the Shibboleth directory to  ~/apache/conf/extra/    The following changes are for  Shibboleth2.xml  file  Change Host name=\u201clocalhost\u201d  Change  entityID=\u201chttps://localhost/shibboleth\u201d   Change ApplicationOverride id=\u201cadmin\u201d entityID=\u201chttps://localhost/shibboleth/\u201d    Reboot the Windows machine  Enter the address  localhost/Shibboleth.sso/Status  in the browser and the following screen should appear    The final step is to test the configuration by creating a trust relationship. Please see section  2.1  for creating a Trust Relationship.",
            "title": "3.3 Windows 7"
        },
        {
            "location": "/admin-guide/authentication-protocol-saml-test/#34-iis",
            "text": "This section will guide the administrator through the SAML SP setup process in IIS server.   Please navigate to  Start  -->  Control Panel  -->  Programs  -->  Turn Windows features on or off   Select the following from the menu and press  OK   Internet Information Services  Web Management Tools  II6 Management Compatibility  IS Management Console  IIS Management Scripts and Tools  IIS Management Service  World Wide Web Services  CGI  ISAPI Filters  ISAPI Extensions     Test IIS from your system by accessing  127.0.0.1  in the web browser     The next configuration is for ISAPI Filter which is accessed from the Internet Information Services (IIS) Manager.   Start --> Administrative Tools --> Internet Information Service/IIS Manager  Double click on \"ISAPI and CGI Restrictions\"      Add a new Filter  Click Actions --> Add (upper right corner)  Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"  Description: \"Shibboleth\"  Click \"Allow\" (from the right hand side)       SSO file extension mapping  Click on \"Handler Mapping\" from main page      - Click \"Add Script Map\" from Action   - Request Path :\".sso\"\n- Executable should be pointed to \"isapi_shib.dll\"    Restart IIS  Check Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.     The next step is to configure the Shibboleth SP.   Open up \"Server Manager\", scroll down and click on \"Add Roles\"      Select  \"Web Server (IIS)\", hit \"Next\"     Select the following  CGI  ISAPI Extensions  ISAPI Filters      - Management Tools\n- IIS Management Console\n- IIS Management Scripts and Tools\n- Management Service\n- All IIS6 Management Compatibility    Hit \"Next\", for the confirmation, check the list of plugins.     Hit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.     Download the  Shibboleth SP  Start the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\"      Reboot the system after successful installation    Create a Trust Relationship in Gluu CE and test the Shibboleth SP",
            "title": "3.4 IIS"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid/",
            "text": "3.1 Scopes\n#\n\n\n\n\nThe SAML counterpart to scopes is attributes which is released to service providers, or in this case Relying Party. \nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims. \n\n\n\n\n3.1.1 Add Scope\n#\n\n\nThe Gluu Server administrator can easily add more scopes in the GUI.\n\n\n\n\nClick \nAdd Scope\n and you will be presented with the following screen:\n\n\n\n\nThe following fields are available for input.\n\n\n\n\nDisplay Name\n\n\nDescription\n\n\nScope Type\n\n\nDefault Scope\n\n\nClaims\n\n\n\n\nDefault Scope:\n When a client uses dynamic\nclient registration, the OpenID Connect specification says that the\n\nopenid\n scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to \ntrue\n for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.\n\n\nClaims:\n The administrator can add claims in the scope by clicking on \nAdd Claim\n button. The following screen shall appear on clicking the button.\n\n\n\n3.2 Client\n#\n\n\n\n\nA client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for \nDynamic Client\nRegistration\n\nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the\n\noxAuth-RP\n and there is also another in \nPHP\nRP\n.\n\n\nA new client can be added by clicking the \nAdd Client\n link.\n\n\n\n\nAvailable \nClients\n can be seen by hitting the \nSearch\n button\nleaving the search box empty.\n\n\n\n\n3.2.1 Register Client\n#\n\n\nGluu Server Administrators can click on the \nAdd Client\n button to register new clients. It is possible to dynamically register any client by calling the dynamic registration endpoint, but this section focuses on the manual registration of the client. The following screen appears when the \nAdd Client\n button is clicked.\n\n\n\n\n\n\n\n\nClient Name:\n This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.\n\n\n\n\n\n\nClient Secret:\n This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for the secret can be inserted manually.\n\n\n\n\n\n\nApplication Type:\n There are two types of applications, Web and\n  Native.\n\n\n\n\n\n\nWeb:\n The Dynamic Client Registration is the default for web. In this type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP. The web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.\n\n\n\n\n\n\nNative:\n Custom uri for Native type application have to follow HTTP with localhost. This is suitable for a mobile app which cannot maintain the client secret between itself and the authorization server.\n\n\n\n\n\n\n\n\n\n\nPre Authorization:\n Allow pre-authorized Client Applications \n\n\n\n\n\n\nLogo URI:\n The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.\n\n\n\n\n\n\nClient URI:\n The URL of the home page of the client.\n\n\n\n\n\n\nPolicy URI:\n The URL of the Privacy policy.\n\n\n\n\n\n\nTerms of Service URI:\n The URL to the Terms of Use of the Client.\n\n\n\n\n\n\nJWKS URI:\n The URL for the Client's JSON Web Key Set.\n\n\n\n\n\n\nJWKS:\n The value of  Client's JSON Web Key Set. The jwks_uri and jwks parameters MUST NOT be used together.\n\n\n\n\n\n\n\n\n\n\n\n\nSector Identifier URI:\n URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.\n\n\n\n\n\n\nSubject Type:\n The subject type requested for responses to this Client.\n\n\n\n\n\n\nJWS alg Algorithm for signing the ID Token:\n JWS alg algorithm for signing the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting the ID Token:\n JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the ID Token:\n JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing the UserInfo Responses:\n JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for encrypting the UserInfo Responses:\n  JWE alg algorithm for encrypting UserInfo Responses.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the UserInfo Responses:\n JWE enc algorithm for encrypting UserInfo Responses. \n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing Request Objects:\n JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The value none can be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting Request Objects:\n JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting Request Objects:\n JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nAuthentication method for the Token Endpoint:\n Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\n\n\n\n\n\n\nJWS alg Algorithm for Authentication method to Token Endpoint:\n JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nDefault Maximum Authentication Age:\n Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nRequire Auth Time:\n Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.\n\n\n\n\n\n\nPersist Client Authorizations*:\n Specifies whether to persist user authorizations.\n\n\n\n\n\n\n\n\n\n\n\n\nInitiate Login URI:\n URI using the https scheme that a third party can use to initiate a login by the RP.\n\n\n\n\n\n\nRequest URIs:\n Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.\n\n\n\n\n\n\nLogout URIs:\n Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.\n\n\n\n\n\n\nLogout Session Required*:\n Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.\n\n\n\n\n\n\nClient Secret Expires:\n Time at which the client will expire or 0 if it will not expire.\n\n\n\n\n\n\nAdd Login URI:\n This option can be used to add the login URL.\n\n\n\n\n\n\n\nAdd Redirect Logout URI:\n The logout request, if requires a redirection can be added here.\n\n\n\n\n\n\n\nAdd Scopes:\n This option can be used to add the required scopes in the Gluu Server.\n\nThe available scopes can be listed by hitting the \nSearch\n button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server administrator can select the required scopes.\n\n\n\n\n\n\nAdd Response Type:\n There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.\n\n\n\n\n\n\n\nAdd Grant Type:\n There are 3 grant type available in this option \nauthorization_code, implicit, refresh_token\n\n\n\n\n\n\n\n\nAdd Contact:\n Use this option to add the email address for the Client contact\n\n\n\n\n\n\nAdd Default ACR value:\n The default ACR Value is defined through this option and it is used to include multi-factor authentication in registered clients. Please use this option to define which from of authentication to use for specific client. See section 3.3.2.1 for details.\n\n\n\n\n\n\n\nAdd Request URI:\n Use this option to add the Request URI\n\n\n\n\n\n\nAdd Logout URI:\n Use this option to add the logout URI.\n\n\n\n\n\n\n3.2.2 Multi-Factor Authentication for Clients\n#\n\n\nThe \nacr_values\n parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the \nacr_value\n parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in \nAdd Default ACR value\n to chosen mechanism. The authentication mechanism must be enabled in the \nCustom Scripts\n section as well.\n\n\n\n\nNote\n\n\nSupported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"\n\n\n\n\nThe values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.\n\n\n\n\n\n\n\n\nACR Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nu2f\n\n\nFIDO U2F Device\n\n\n\n\n\n\nduo\n\n\nDuo soft-token authentication\n\n\n\n\n\n\nbasic\n\n\nUsername/Password authentication from LDAP Server\n\n\n\n\n\n\noxpush2\n\n\nMulti-factor authentication\n\n\n\n\n\n\ngplus\n\n\nGoogle+ authentication\n\n\n\n\n\n\ninternal\n\n\nUse Gluu Server LDAP to authenticate users\n\n\n\n\n\n\n\n\n3.2.3 Algorithm\n#\n\n\noxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.\n\n\nNote:\n It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.\n\n\nAvailable Signature Algorithms:\n none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.\n\n\nEncryption, Key Encryption Algorithms:\n RSA1_5, RSA-OAEP, A128KW, A256KW.\n\n\nBlock Encryption Algorithms:\n A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,\n\n\n3.3 Custom Client Registration\n#\n\n\nUsing interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use \nredirect_uri\n to determine if we need to allow access to\nadditional scopes or not.\n\n\nTo access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.\n\n\n\n\n\n\nThe script is \navailable here\n\n\n3.4 Testing with oxAuth RP\n#",
            "title": "4. OpenID Connect"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid/#31-scopes",
            "text": "The SAML counterpart to scopes is attributes which is released to service providers, or in this case Relying Party. \nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims.    3.1.1 Add Scope #  The Gluu Server administrator can easily add more scopes in the GUI.   Click  Add Scope  and you will be presented with the following screen:   The following fields are available for input.   Display Name  Description  Scope Type  Default Scope  Claims   Default Scope:  When a client uses dynamic\nclient registration, the OpenID Connect specification says that the openid  scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to  true  for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.  Claims:  The administrator can add claims in the scope by clicking on  Add Claim  button. The following screen shall appear on clicking the button.",
            "title": "3.1 Scopes"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid/#32-client",
            "text": "A client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for  Dynamic Client\nRegistration \nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the oxAuth-RP  and there is also another in  PHP\nRP .  A new client can be added by clicking the  Add Client  link.   Available  Clients  can be seen by hitting the  Search  button\nleaving the search box empty.   3.2.1 Register Client #  Gluu Server Administrators can click on the  Add Client  button to register new clients. It is possible to dynamically register any client by calling the dynamic registration endpoint, but this section focuses on the manual registration of the client. The following screen appears when the  Add Client  button is clicked.     Client Name:  This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.    Client Secret:  This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for the secret can be inserted manually.    Application Type:  There are two types of applications, Web and\n  Native.    Web:  The Dynamic Client Registration is the default for web. In this type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP. The web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.    Native:  Custom uri for Native type application have to follow HTTP with localhost. This is suitable for a mobile app which cannot maintain the client secret between itself and the authorization server.      Pre Authorization:  Allow pre-authorized Client Applications     Logo URI:  The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.    Client URI:  The URL of the home page of the client.    Policy URI:  The URL of the Privacy policy.    Terms of Service URI:  The URL to the Terms of Use of the Client.    JWKS URI:  The URL for the Client's JSON Web Key Set.    JWKS:  The value of  Client's JSON Web Key Set. The jwks_uri and jwks parameters MUST NOT be used together.       Sector Identifier URI:  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.    Subject Type:  The subject type requested for responses to this Client.    JWS alg Algorithm for signing the ID Token:  JWS alg algorithm for signing the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting the ID Token:  JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting the ID Token:  JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWS alg Algorithm for signing the UserInfo Responses:  JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  See  Algorithms section  for options.    JWS alg Algorithm for encrypting the UserInfo Responses:   JWE alg algorithm for encrypting UserInfo Responses.\n  See  Algorithms section  for options.       JWE enc Algorithm for encrypting the UserInfo Responses:  JWE enc algorithm for encrypting UserInfo Responses. \n  See  Algorithms section  for options.    JWS alg Algorithm for signing Request Objects:  JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The value none can be used.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting Request Objects:  JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting Request Objects:  JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    Authentication method for the Token Endpoint:  Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.       JWS alg Algorithm for Authentication method to Token Endpoint:  JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  See  Algorithms section  for options.    Default Maximum Authentication Age:  Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.    Require Auth Time:  Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.    Persist Client Authorizations*:  Specifies whether to persist user authorizations.       Initiate Login URI:  URI using the https scheme that a third party can use to initiate a login by the RP.    Request URIs:  Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.    Logout URIs:  Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.    Logout Session Required*:  Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.    Client Secret Expires:  Time at which the client will expire or 0 if it will not expire.    Add Login URI:  This option can be used to add the login URL.    Add Redirect Logout URI:  The logout request, if requires a redirection can be added here.    Add Scopes:  This option can be used to add the required scopes in the Gluu Server. The available scopes can be listed by hitting the  Search  button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server administrator can select the required scopes.    Add Response Type:  There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.    Add Grant Type:  There are 3 grant type available in this option  authorization_code, implicit, refresh_token     Add Contact:  Use this option to add the email address for the Client contact    Add Default ACR value:  The default ACR Value is defined through this option and it is used to include multi-factor authentication in registered clients. Please use this option to define which from of authentication to use for specific client. See section 3.3.2.1 for details.    Add Request URI:  Use this option to add the Request URI    Add Logout URI:  Use this option to add the logout URI.    3.2.2 Multi-Factor Authentication for Clients #  The  acr_values  parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the  acr_value  parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in  Add Default ACR value  to chosen mechanism. The authentication mechanism must be enabled in the  Custom Scripts  section as well.   Note  Supported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"   The values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.     ACR Value  Description      u2f  FIDO U2F Device    duo  Duo soft-token authentication    basic  Username/Password authentication from LDAP Server    oxpush2  Multi-factor authentication    gplus  Google+ authentication    internal  Use Gluu Server LDAP to authenticate users     3.2.3 Algorithm #  oxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.  Note:  It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.  Available Signature Algorithms:  none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.  Encryption, Key Encryption Algorithms:  RSA1_5, RSA-OAEP, A128KW, A256KW.  Block Encryption Algorithms:  A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,",
            "title": "3.2 Client"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid/#33-custom-client-registration",
            "text": "Using interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use  redirect_uri  to determine if we need to allow access to\nadditional scopes or not.  To access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.    The script is  available here",
            "title": "3.3 Custom Client Registration"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid/#34-testing-with-oxauth-rp",
            "text": "",
            "title": "3.4 Testing with oxAuth RP"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid-test/",
            "text": "[TOC]\nOpenID Connect in Gluu Server can be tested using the Apache module for the protocol. This section defines the installation for Apache Server with the OpenID Connect module and testing against Gluu Server. There are two different registration methods for the OpenID clients called Dynamic and Manual.\n\n\n5.1 Ubuntu Server 14.04\n#\n\n\nThis section defines the steps to install the OpenID Connect module for Apache, \nauth_openidc\n in Ubuntu. Please use the following commands to install Apache2, enable SSL and restart the server:\n\n\n$ sudo apt-get install apache2\n$ sudo a2enmod ssl\n$ service apache2 restart\n\n\n\n\nThe next step is to create a self-signed certificate for SSL. The following commands will create a directory \n/etc/apache2/ssl\n and generate the certificates.\n\n\n$ sudo mkdir /etc/apache2/ssl\n$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt\n\n\n\n\nA prompt shall appear where the information related to the certificate needs filling. A template is given below:\n\n\n    Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:Texas\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu Inc\n    Organizational Unit Name (eg, section) []:Gluu Test\n    Common Name (e.g. server FQDN or YOUR name) []:gluu.org\n    Email Address []:support@gluu.org\n\n\n\n\nThe apache configuration to enable the SSL module comes next. The \ndefault-ssl.conf\n file should be updated with the newly generated certificate locations.\n\n\n$ sudo vim /etc/apache2/sites-available/default-ssl.conf\n\n\n\n\nPlease update the location of the certificates with the following if you have used the commands given here. If you have used your own certificates or generated the certificates with a different name, please use that.\n\n\n/etc/apache2/ssl/apache.key\n/etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nNote\n\n\nActivate the SSl Virtual Host, if you are running \nauth_oidc\n and \nGluu Server\n in the same machine, and restart Apache Server\n\n\n\n\nPlease enable the SSL configuration and restart the Apache Server for the changes to take effect with the following commands:\n\n\n$ sudo a2ensite default-ssl.conf\n$ sudo service apache2 restart\n\n\n\n\nThe next step is to install and configure the Apache module for OpenID Connect. Run the following command to download and install the \nauth_openidc\n module:\n\n\n$ sudo wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n$ sudo dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n\n\n\n\nIf the package is not available, please check this \nGithub Page\n\n\n\n\nWarning\n\n\nThis module depends on \nlibhiredis0.10, libpcre3, & libjansson4\n package. If the dependencies are not met, please install them manually using the \napt-get\n command\n\n\n\n\nThe default ports for \nhttp\n and \nhttps\n are not used for \nauth_openidc\n module, therefore it is necessary to update three files. The changes are done to avoid a conflict with the Gluu Server's Apache ports. \nBut, if the Gluu Server and the Apache server are different, there is no need to change the ports.\n\n\nChange port numbers to \n44443\n (for SSL) and \n8000\n (for non-SSL) in these three files.\n\n\n\n\n/etc/apache2/ports.conf\n\n\n/etc/apache2/sites-available/000-default.conf\n\n\n/etc/apache2/sites-available/default-ssl.conf\n\n\n\n\n5.2 CentOS 6.x\n#\n\n\nThe Apache module in CentOS Server requires the Extra Packages for Enterprise Linux (EPEL) repository. Please use the following command to add the `EPEL` repository:\n\n\n\n# rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\n\n\n\nThe Apache webserver is installed next with the SSL module. There are some additional components that are required for the OpenID Connect module which are installed as well. Please use the following command to install the software:\n\n\n# yum install httpd mod_ssl\n# yum install curl hiredis jansson\n\n\n\n\nThe next step is to generate the SSL certificates for the SSL module in Apache Server. The certificates are kept in the \n/etc/httpd/ssl\n folder. Please use the following commands to create the directory and generate the certificates:\n\n\n# mkdir /etc/httpd/ssl\n# openssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key\n\n\n\n\nThis command for the certificate will generate a prompt where some values such as company name, country, state must be entered. Please fill them up and the certificate will be generated. Alternatively if there is any certificate available, that can also be used.\n\n\nThe next step is to configure the Apache server to use the newly generated certificates. The certificate location is updated in the \nvhost.conf\n file. Please use the following command to open the file:\n\n\n# vi /etc/httpd/conf.d/vhost.conf\n\n\n\n\nPlease add the certificate location and the correct server name in the file. The template below shows an example:\n\n\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org\n\n\n\n\nPlease restart the Apache server for the changes to take effect:\n\n\n# service httpd restart\n\n\n\n\nThe Apache module is installed using the \nrpm\n command which is given below:\n\n\nrpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm\n\n\n\n\n\n\n\nNote\n\n\nIf there are any difficulties installing the package, please run \nyum upgrade\n\n\n\n\nThe existance of the package can be tested using the \nls\n command. Please use the following command if there is any doubt to check that the apache module for openid connect is present:\n\n\n# ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so\n\n\n\n\nThe next command will create the apache configuration file for the OpenID Connect module.\n\n\necho -e \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\\nListen 44443\" > /etc/httpd/conf.d/mod_auth_openidc.conf\n\n\n\n\nPlease use the following command to start the Apache Server where the OpenID Connect module will listen to port \n44443\n.\n\n\n# service httpd start\n\n\n\n\n5.3 Client Registration\n#\n\n\n5.3.1 Dynamic\n#\n\n\nThe following example shows the configuration for dynamic client registration.\nThe OpenID Connect module requires a folder to store the metadata, therefore create a metadata folder and change permission using the following commands.\n\n\n# mkdir /var/cache/apache2/metadata\n\n\n\n\nThe command to change the permission is different in Ubuntu and CentOS. The commands are given in the table below. Please use the appropriate command according to the host operating system.\n\n\n\n\n\n\n\n\nUbuntu Server 14.04\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\n# chown -R www-data:www-data /var/cache/apache2/metadata\n\n\n# chown -R apache:apache /var/cache/apache2/metadata\n\n\n\n\n\n\n\n\nThe next step is to prepare the protected resource. In this example we shall create a simple \nhtml\n page and put it in a protected folder. The following commands will create a directory named \ndynamic\n and create a file `index.html:\n\n\n$ sudo mkdir /var/www/html/dynamic\n$ sudo vim /var/www/html/dynamic/index.html\n\n\n\n\nPlease add the following in the \nindex.html\n file. If you have anything else prepared for this purpose, you can use that as well.\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>\n\n\n\n\nThe ownership of the entire html directory must be changed to Apache. Please use the following command to change the ownership:\n\n\n\n\n\n\n\n\nUbuntu Server 14.04\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\n$ sudo chown -R www-data:www-data /var/www/html\n\n\n$ sudo chown -R apache:apache /var/www/html\n\n\n\n\n\n\n\n\nThe next step is to prepare the configuration file for the Apache module for openid connect. The location of the configuration files are different, but the content is same for both Ubuntu Server and CentOS Server.\n\n\n5.3.1.1 Ubuntu Server 14.04 Configurations\n#\n\n\nPlease add the following lines in the \nauth_openidc.conf\n configuration file under \n/etc/apache2/mods-available/\n folder.\n\n\nOIDCMetadataDir /var/cache/apache2/metadata\nOIDCClientSecret secret\nOIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\nOIDCCryptoPassphrase secret\nOIDCSSLValidateServer Off\n\n\n\n\nThe apache module can be enabled now and the following command will do the same. Please restart the Apache Server as well.\n\n\n$ sudo a2enmod auth_openidc\n$ sudo service apache2 restart\n\n\n\n\n\n\nNote\n\n\nRestart the server after configuring the module, else the server will not restart and it will throw errors. To check for errors, please chek the \nerrors.log\n file in \n/var/log/apache/\n folder\n\n\n\n\nThe apache configuration file must be added to the \n/sites-available/\n folder. The file is named \ndynamic.conf\n for convinience. Please use the following command to create the file and open it using \nvim\n editor:\n\n\n$ cd /etc/apache2/sites-available/\n$ vim dynamic.conf\n\n\n\n\nPlease add the follwoing in the \ndynamic.conf\n file:\n\n\n<VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/apache2/ssl/apache.crt\n    SSLCertificateKeyFile /etc/apache2/ssl/apache.key\n</VirtualHost>\n\n\n\n\n\n\nNote\n\n\nWe are using a custom port 44443 in this example, but it is possible to use the default SSL port 443, if the Apache server is stand-alone.\n\n\n\n\nThe dynamic site is added and configured in apache server. The following commands will enable the site and restart apache server so that the dynamic site is accessible:\n\n\n$ sudo a2ensite dynamic.conf\n$ sudo service apache2 restart\n\n\n\n\n5.3.1.2 CentOS 6.x Server\n#\n\n\nThe apache configuration for the dynamic client registration is located in the \n/etc/httpd/conf.d/dynamic.conf\n file. Please use the command below to create the configuration file:\n\n\n# vi /etc/httpd/conf.d/dynamic.conf\n\n\n\n\nPlease add the following in the configuration file:\n\n\n<VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n</VirtualHost>\n\n\n\n\nPlease use the commands below to enable the dynamic site and restart the Apache server.\n\n\n# ln -s /etc/httpd/sites-available/dynamic.conf\n# service httpd restart\n\n\n\n\n5.3.1.3 Testing Dynamic Registration\n#\n\n\nPlease access the site @ \nhttps://dynamic.gluu.org:44443/dynamic\n and the discovery page will appear.\n\n\n\n\nThere are two ways the IDP is presented in the discovery page\n\n\n\n\nadmin@gluu-server-hostname.org\n\n\ngluu-server-hostname.org\n\n\n\n\nThe administrator or the user can enter the data in any of the format shown above and click on submit. The user will be redirected to the Gluu Server CE oxAuth login page for credentials. If the authentication is successful, the client will be added in Gluu Server and the protected resource will be shown in the browser.\n\n\n\n\n5.3.2 Manual\n#\n\n\nIt is time to prepare the protected resource for Manual Client Registration test. In this example we shall create a simple html page and put it in a protected folder. The following commands will create a directory named static and create a file \nindex.html\n:\n\n\n$ sudo mkdir /var/www/html/static\n$ sudo vim /var/www/html/static/index.html\n\n\n\n\nPlease add the following in the \nindex.html\n file. If you have anything else prepared for this purpose, you can use that as well.\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Static Registration\n    </body>\n</html>\n\n\n\n\nThe ownership of the entire html directory must be changed to Apache. Please use the following command to change the ownership:\n\n\n\n\n\n\n\n\nUbuntu Server 14.04\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\n$ sudo chown -R www-data:www-data /var/www/html\n\n\n$ sudo chown -R apache:apache /var/www/html\n\n\n\n\n\n\n\n\n5.3.2.1 Ubuntu Server 14.04\n#\n\n\nThe configuration for the manual client is put in the \nauth_openidc\n configuration file inside the apache folder. Please use the following command to open the file:\n\n\n$ sudo vim /etc/apache2/mods-available/auth_openidc.conf\n\n\n\n\nThe following lines must be added in the file. Please remember to change the \nOIDCProviderIssuer\n to the hostname of the IDP you are using, as we are using \nce.gluu.org\n in this example.\n\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n\n\n\nThe next command will enable the Apache module.\n\n\n$ sudo a2enmod auth_openidc\n\n\n\n\nThe apache configuration file must be added to the \n/sites-available/\n folder. The file is named \nstatic.conf\n for convinience. Please use the following command to create the file and open it using \nvim\n editor:\n\n\n$ cd /etc/apache2/sites-available/\n$ vim static.conf\n\n\n\n\nPlease add the following in the \nstatic.conf\n file:\n\n\n<VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n</VirtualHost>\n\n\n\n\nThe site must be enabled before it can be accessed from the outside. Please use the following command to enable the site and restart the Apache Server.\n\n\n$ sudo a2ensite static.conf\n$ sudo service apache2 restart\n\n\n\n\nPlease use the following address in your browser \nhttps://static.gluu.org:44443/static\n to access the oxAuth login page where the credentials for Gluu CE must be put to authenticate the user.\n\n\n\n\n5.3.2.2 CentOS Server\n#\n\n\nThe manual client registration configuration is kept in the \nstatic.conf\n file under\n/etc/httpd/conf.d/\n folder. Please use the command below to create the file:\n\n\n# vi /etc/httpd/conf.d/static.conf\n\n\n\n\nPlease add the contents given below in the file:\n\n\n<VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n</VirtualHost>\n\n\n\n\nThe site is enabled using the \nln\n command. Please use the command given below to enable the site and restart the Apache Server.\n\n\n# ln -s /etc/httpd/sites-available/sites-available/static.conf\n# service httpd restart\n\n\n\n\nPlease use the following address in your browser \nhttps://static.gluu.org:44443/static\n to access the oxAuth login page where the credentials for Gluu CE must be put to authenticate the user.\n\n\n\n\n5.3.3 Troubleshooting\n#\n\n\nThere is a possibility that the following error will be shown in the browser:\n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\n\nThe apache logs will contain the following if the error shown above is visible:\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\n\nThis error is mitigated by the following procedure. \n\n\n$ sudo service gluu-server login\n\n\n\n\nThe ClientID is available from the oxTrust admin interface and the DN is searched from the Gluu Opendj with the following command:\n\n\n/opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'\n\n\n\n\nPlease create a file named \nmod.ldif\n with the contents given below. The \nDN\n used in \nmod.ldif\n is obtained from output of the command given above.\n\n\ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n\n\n\n\nThe \nldapmodify\n command is used to insert the \noxAuthSubjectIdentifier\n. An exampleof the command is given below:\n\n\n$ sudo /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\n\nNow the manual client can be accessed from \nhttps://static.gluu.org:44443/static\n and the protected resource accessed.",
            "title": "5. Test OpenID"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid-test/#51-ubuntu-server-1404",
            "text": "This section defines the steps to install the OpenID Connect module for Apache,  auth_openidc  in Ubuntu. Please use the following commands to install Apache2, enable SSL and restart the server:  $ sudo apt-get install apache2\n$ sudo a2enmod ssl\n$ service apache2 restart  The next step is to create a self-signed certificate for SSL. The following commands will create a directory  /etc/apache2/ssl  and generate the certificates.  $ sudo mkdir /etc/apache2/ssl\n$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt  A prompt shall appear where the information related to the certificate needs filling. A template is given below:      Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:Texas\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Gluu Inc\n    Organizational Unit Name (eg, section) []:Gluu Test\n    Common Name (e.g. server FQDN or YOUR name) []:gluu.org\n    Email Address []:support@gluu.org  The apache configuration to enable the SSL module comes next. The  default-ssl.conf  file should be updated with the newly generated certificate locations.  $ sudo vim /etc/apache2/sites-available/default-ssl.conf  Please update the location of the certificates with the following if you have used the commands given here. If you have used your own certificates or generated the certificates with a different name, please use that.  /etc/apache2/ssl/apache.key\n/etc/apache2/ssl/apache.crt   Note  Activate the SSl Virtual Host, if you are running  auth_oidc  and  Gluu Server  in the same machine, and restart Apache Server   Please enable the SSL configuration and restart the Apache Server for the changes to take effect with the following commands:  $ sudo a2ensite default-ssl.conf\n$ sudo service apache2 restart  The next step is to install and configure the Apache module for OpenID Connect. Run the following command to download and install the  auth_openidc  module:  $ sudo wget http://ftp.us.debian.org/debian/pool/main/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_1.6.0-1_amd64.deb\n$ sudo dpkg -i libapache2-mod-auth-openidc_1.6.0-1_amd64.deb  If the package is not available, please check this  Github Page   Warning  This module depends on  libhiredis0.10, libpcre3, & libjansson4  package. If the dependencies are not met, please install them manually using the  apt-get  command   The default ports for  http  and  https  are not used for  auth_openidc  module, therefore it is necessary to update three files. The changes are done to avoid a conflict with the Gluu Server's Apache ports. \nBut, if the Gluu Server and the Apache server are different, there is no need to change the ports.  Change port numbers to  44443  (for SSL) and  8000  (for non-SSL) in these three files.   /etc/apache2/ports.conf  /etc/apache2/sites-available/000-default.conf  /etc/apache2/sites-available/default-ssl.conf",
            "title": "5.1 Ubuntu Server 14.04"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid-test/#52-centos-6x",
            "text": "The Apache module in CentOS Server requires the Extra Packages for Enterprise Linux (EPEL) repository. Please use the following command to add the `EPEL` repository:  # rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm  The Apache webserver is installed next with the SSL module. There are some additional components that are required for the OpenID Connect module which are installed as well. Please use the following command to install the software:  # yum install httpd mod_ssl\n# yum install curl hiredis jansson  The next step is to generate the SSL certificates for the SSL module in Apache Server. The certificates are kept in the  /etc/httpd/ssl  folder. Please use the following commands to create the directory and generate the certificates:  # mkdir /etc/httpd/ssl\n# openssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key  This command for the certificate will generate a prompt where some values such as company name, country, state must be entered. Please fill them up and the certificate will be generated. Alternatively if there is any certificate available, that can also be used.  The next step is to configure the Apache server to use the newly generated certificates. The certificate location is updated in the  vhost.conf  file. Please use the following command to open the file:  # vi /etc/httpd/conf.d/vhost.conf  Please add the certificate location and the correct server name in the file. The template below shows an example:      SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org  Please restart the Apache server for the changes to take effect:  # service httpd restart  The Apache module is installed using the  rpm  command which is given below:  rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm   Note  If there are any difficulties installing the package, please run  yum upgrade   The existance of the package can be tested using the  ls  command. Please use the following command if there is any doubt to check that the apache module for openid connect is present:  # ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so  The next command will create the apache configuration file for the OpenID Connect module.  echo -e \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\\nListen 44443\" > /etc/httpd/conf.d/mod_auth_openidc.conf  Please use the following command to start the Apache Server where the OpenID Connect module will listen to port  44443 .  # service httpd start",
            "title": "5.2 CentOS 6.x"
        },
        {
            "location": "/admin-guide/authentication-protocol-openid-test/#53-client-registration",
            "text": "5.3.1 Dynamic #  The following example shows the configuration for dynamic client registration.\nThe OpenID Connect module requires a folder to store the metadata, therefore create a metadata folder and change permission using the following commands.  # mkdir /var/cache/apache2/metadata  The command to change the permission is different in Ubuntu and CentOS. The commands are given in the table below. Please use the appropriate command according to the host operating system.     Ubuntu Server 14.04  CentOS 6.x      # chown -R www-data:www-data /var/cache/apache2/metadata  # chown -R apache:apache /var/cache/apache2/metadata     The next step is to prepare the protected resource. In this example we shall create a simple  html  page and put it in a protected folder. The following commands will create a directory named  dynamic  and create a file `index.html:  $ sudo mkdir /var/www/html/dynamic\n$ sudo vim /var/www/html/dynamic/index.html  Please add the following in the  index.html  file. If you have anything else prepared for this purpose, you can use that as well.  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>  The ownership of the entire html directory must be changed to Apache. Please use the following command to change the ownership:     Ubuntu Server 14.04  CentOS 6.x      $ sudo chown -R www-data:www-data /var/www/html  $ sudo chown -R apache:apache /var/www/html     The next step is to prepare the configuration file for the Apache module for openid connect. The location of the configuration files are different, but the content is same for both Ubuntu Server and CentOS Server.  5.3.1.1 Ubuntu Server 14.04 Configurations #  Please add the following lines in the  auth_openidc.conf  configuration file under  /etc/apache2/mods-available/  folder.  OIDCMetadataDir /var/cache/apache2/metadata\nOIDCClientSecret secret\nOIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\nOIDCCryptoPassphrase secret\nOIDCSSLValidateServer Off  The apache module can be enabled now and the following command will do the same. Please restart the Apache Server as well.  $ sudo a2enmod auth_openidc\n$ sudo service apache2 restart   Note  Restart the server after configuring the module, else the server will not restart and it will throw errors. To check for errors, please chek the  errors.log  file in  /var/log/apache/  folder   The apache configuration file must be added to the  /sites-available/  folder. The file is named  dynamic.conf  for convinience. Please use the following command to create the file and open it using  vim  editor:  $ cd /etc/apache2/sites-available/\n$ vim dynamic.conf  Please add the follwoing in the  dynamic.conf  file:  <VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/apache2/ssl/apache.crt\n    SSLCertificateKeyFile /etc/apache2/ssl/apache.key\n</VirtualHost>   Note  We are using a custom port 44443 in this example, but it is possible to use the default SSL port 443, if the Apache server is stand-alone.   The dynamic site is added and configured in apache server. The following commands will enable the site and restart apache server so that the dynamic site is accessible:  $ sudo a2ensite dynamic.conf\n$ sudo service apache2 restart  5.3.1.2 CentOS 6.x Server #  The apache configuration for the dynamic client registration is located in the  /etc/httpd/conf.d/dynamic.conf  file. Please use the command below to create the configuration file:  # vi /etc/httpd/conf.d/dynamic.conf  Please add the following in the configuration file:  <VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n</VirtualHost>  Please use the commands below to enable the dynamic site and restart the Apache server.  # ln -s /etc/httpd/sites-available/dynamic.conf\n# service httpd restart  5.3.1.3 Testing Dynamic Registration #  Please access the site @  https://dynamic.gluu.org:44443/dynamic  and the discovery page will appear.   There are two ways the IDP is presented in the discovery page   admin@gluu-server-hostname.org  gluu-server-hostname.org   The administrator or the user can enter the data in any of the format shown above and click on submit. The user will be redirected to the Gluu Server CE oxAuth login page for credentials. If the authentication is successful, the client will be added in Gluu Server and the protected resource will be shown in the browser.   5.3.2 Manual #  It is time to prepare the protected resource for Manual Client Registration test. In this example we shall create a simple html page and put it in a protected folder. The following commands will create a directory named static and create a file  index.html :  $ sudo mkdir /var/www/html/static\n$ sudo vim /var/www/html/static/index.html  Please add the following in the  index.html  file. If you have anything else prepared for this purpose, you can use that as well.  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Static Registration\n    </body>\n</html>  The ownership of the entire html directory must be changed to Apache. Please use the following command to change the ownership:     Ubuntu Server 14.04  CentOS 6.x      $ sudo chown -R www-data:www-data /var/www/html  $ sudo chown -R apache:apache /var/www/html     5.3.2.1 Ubuntu Server 14.04 #  The configuration for the manual client is put in the  auth_openidc  configuration file inside the apache folder. Please use the following command to open the file:  $ sudo vim /etc/apache2/mods-available/auth_openidc.conf  The following lines must be added in the file. Please remember to change the  OIDCProviderIssuer  to the hostname of the IDP you are using, as we are using  ce.gluu.org  in this example.      OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off  The next command will enable the Apache module.  $ sudo a2enmod auth_openidc  The apache configuration file must be added to the  /sites-available/  folder. The file is named  static.conf  for convinience. Please use the following command to create the file and open it using  vim  editor:  $ cd /etc/apache2/sites-available/\n$ vim static.conf  Please add the following in the  static.conf  file:  <VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem\n    SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n</VirtualHost>  The site must be enabled before it can be accessed from the outside. Please use the following command to enable the site and restart the Apache Server.  $ sudo a2ensite static.conf\n$ sudo service apache2 restart  Please use the following address in your browser  https://static.gluu.org:44443/static  to access the oxAuth login page where the credentials for Gluu CE must be put to authenticate the user.   5.3.2.2 CentOS Server #  The manual client registration configuration is kept in the  static.conf  file under /etc/httpd/conf.d/  folder. Please use the command below to create the file:  # vi /etc/httpd/conf.d/static.conf  Please add the contents given below in the file:  <VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n</VirtualHost>  The site is enabled using the  ln  command. Please use the command given below to enable the site and restart the Apache Server.  # ln -s /etc/httpd/sites-available/sites-available/static.conf\n# service httpd restart  Please use the following address in your browser  https://static.gluu.org:44443/static  to access the oxAuth login page where the credentials for Gluu CE must be put to authenticate the user.   5.3.3 Troubleshooting #  There is a possibility that the following error will be shown in the browser:  Error:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  The apache logs will contain the following if the error shown above is visible:  [Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  This error is mitigated by the following procedure.   $ sudo service gluu-server login  The ClientID is available from the oxTrust admin interface and the DN is searched from the Gluu Opendj with the following command:  /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'  Please create a file named  mod.ldif  with the contents given below. The  DN  used in  mod.ldif  is obtained from output of the command given above.  dn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650  The  ldapmodify  command is used to insert the  oxAuthSubjectIdentifier . An exampleof the command is given below:  $ sudo /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif  Now the manual client can be accessed from  https://static.gluu.org:44443/static  and the protected resource accessed.",
            "title": "5.3 Client Registration"
        },
        {
            "location": "/admin-guide/uma/",
            "text": "This section describes the adminisration of UMA in Gluu Server CE. The UMA administration is accessible from the oxTrust administrator interface.\n\n\n\n\n6.1 Resource Registration\n#\n\n\nThe resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:\n\n\n\n\nname\n\n\nscopes\n\n\ntype\n\n\nicon_uri\n\n\n\n\nThe resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:\n\n\n{\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}\n\n\n\n\n\n\nNote\n\n\nResource JSON may contain custom properties.\n\n\n\n\n\n\nThe search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the \nAdd Resource Set\n button. The following screenshot shows the page that will appear up on clicking the add resource button.\n\n\n\n\nThe properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.\n\n\n\n\n\n\n6.2 Scopes\n#\n\n\nThe scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:\n\n\n\n\nname\n\n\nicon_uri\n\n\n\n\nAn example  of the scope JSON is given below:\n\n\n{\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}\n\n\n\n\n\n\nNote\n\n\nScope JSON may contain custom properties.\n\n\n\n\nThere are three (3) types of scopes in UMA:\n\n\n\n\ninternal\n: the scope is hosted within oxAuth in Gluu Server CE\n\n\nexternal\n: the scope is hosted in a different server\n\n\nexternal_auto\n: the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration\n\n\n\n\nThere is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format\n\n\nUMA URL=uma_scopes_endpoint+\"/\"+oxId;\n\n\n\n\nThe following is an example of an UMA URL:\n\n\nhttps://gluu.org/uma/scopes/view\n\n\n\n\n\n\nNote\n\n\nThe scope endpoint has to be present in UMA configuration to make it discoverable.\n\n\n\n\nThe \nldif\n for both external and internal scope is given below:\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\n6.2.1 Add Scope\n#\n\n\nThis section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the \nScopes\n page under \nUMA\n from the oxTrust menu.\n\n\n\n\nThe search bar can be used to look for available scopes. New scopes are added by clicking on the \nAdd Scope Description\n button which will bring up the interface shown below.\n\n\n\n\nAdditionally there is an option to add authorization policy with the new scope.\n\n\n6.3 UMA Policies\n#\n\n\nUMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:\n\n\n\n\nscopes: policy protects resources by scopes\n\n\nauthorization script: script that is evaluated in order to grant/deny access\n\n\nname: a human readable name to the UMA policy\n\n\n\n\nThe following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed from the Configuration Menu.\n\n\n\n\n\n\n6.3.1 UMA Policy Algorithm\n#\n\n\nThe UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.\n\n\n\n\n\n\nUMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn \ntrue\n in order to authorize access during RPT authorization.\n\n\n\n\n\n\nMultiple policies can protect a single scope. In such a case, all the policies must retun \ntrue\n to authorize access else aceess will be denied.",
            "title": "6. UMA"
        },
        {
            "location": "/admin-guide/uma/#61-resource-registration",
            "text": "The resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:   name  scopes  type  icon_uri   The resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:  {\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}   Note  Resource JSON may contain custom properties.    The search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the  Add Resource Set  button. The following screenshot shows the page that will appear up on clicking the add resource button.   The properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.",
            "title": "6.1 Resource Registration"
        },
        {
            "location": "/admin-guide/uma/#62-scopes",
            "text": "The scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:   name  icon_uri   An example  of the scope JSON is given below:  {\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}   Note  Scope JSON may contain custom properties.   There are three (3) types of scopes in UMA:   internal : the scope is hosted within oxAuth in Gluu Server CE  external : the scope is hosted in a different server  external_auto : the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration   There is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format  UMA URL=uma_scopes_endpoint+\"/\"+oxId;  The following is an example of an UMA URL:  https://gluu.org/uma/scopes/view   Note  The scope endpoint has to be present in UMA configuration to make it discoverable.   The  ldif  for both external and internal scope is given below:  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png  6.2.1 Add Scope #  This section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the  Scopes  page under  UMA  from the oxTrust menu.   The search bar can be used to look for available scopes. New scopes are added by clicking on the  Add Scope Description  button which will bring up the interface shown below.   Additionally there is an option to add authorization policy with the new scope.",
            "title": "6.2 Scopes"
        },
        {
            "location": "/admin-guide/uma/#63-uma-policies",
            "text": "UMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:   scopes: policy protects resources by scopes  authorization script: script that is evaluated in order to grant/deny access  name: a human readable name to the UMA policy   The following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed from the Configuration Menu.    6.3.1 UMA Policy Algorithm #  The UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.    UMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn  true  in order to authorize access during RPT authorization.    Multiple policies can protect a single scope. In such a case, all the policies must retun  true  to authorize access else aceess will be denied.",
            "title": "6.3 UMA Policies"
        },
        {
            "location": "/admin-guide/scim/",
            "text": "Gluu Server Community Edition supports System for Cross-domain Identity Management (SCIM) Version 1.0 and 2.0 out of the box, operated using HTTP \nGET\n and \nPOST\n commands. SCIM uses a REST API for operations which are disabled by default. The support for SCIM must be enabled from the oxTrust admin interface. \n\n\n7.1 Enable SCIM\n#\n\n\nSCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to \nOrganization Configuration\n --> \nSystem Configuration\n.\n\n\n\n\nPlease navigate down the page to find \nSCIM Support\n in the \nSYstem Configuration\n page and select \nEnabled\n.",
            "title": "7. SCIM"
        },
        {
            "location": "/admin-guide/scim/#71-enable-scim",
            "text": "SCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to  Organization Configuration  -->  System Configuration .   Please navigate down the page to find  SCIM Support  in the  SYstem Configuration  page and select  Enabled .",
            "title": "7.1 Enable SCIM"
        },
        {
            "location": "/reference-guide/",
            "text": "Reference Guide\n#",
            "title": "1. 'Introduction'"
        },
        {
            "location": "/reference-guide/#reference-guide",
            "text": "",
            "title": "Reference Guide"
        }
    ]
}