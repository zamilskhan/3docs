{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Community Edition (CE) Docs\n#\n\n\nGluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.\n\n\nPrimarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation\n\n\nThe code is open source, and available on \nGithub\n.\n\n\nCommunity support can be enlisted on the \nGluu support site\n. If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of \nVIP support\n options. \n\n\nTable of Contents\n#\n\n\n\n\nIntroduction\n\n\nHistory\n\n\nDesign Goals\n\n\nArchitecture\n \n\n\n\n\n\n\n\n\nSupport\n#\n\n\nPlease see the \nFAQ Page\n for basic troubleshooting, or \nopen a ticket\n on our support portal for community support. Gluu also offers paid support. Please view our \npricing page\n to learn more about our VIP support options.",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-community-edition-ce-docs",
            "text": "Gluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.  Primarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation  The code is open source, and available on  Github .  Community support can be enlisted on the  Gluu support site . If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of  VIP support  options.",
            "title": "Gluu Server Community Edition (CE) Docs"
        },
        {
            "location": "/#table-of-contents",
            "text": "Introduction  History  Design Goals  Architecture",
            "title": "Table of Contents"
        },
        {
            "location": "/#support",
            "text": "Please see the  FAQ Page  for basic troubleshooting, or  open a ticket  on our support portal for community support. Gluu also offers paid support. Please view our  pricing page  to learn more about our VIP support options.",
            "title": "Support"
        },
        {
            "location": "/introduction/",
            "text": "Introduction\n\n\nHistory\n\n\nDesign Goals\n\n\nArchitecture\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nIntroduction\n#\n\n\nThe Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.\n\n\nHistory\n#\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.(\nRead More\n)\n\n\nDesign Goals\n#\n\n\nAt OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux...(\nRead More\n)\n\n\nArchitecture\n#\n\n\nThere are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.(\nRead More\n)\n\n\nLicense\n#\n\n\nAny software published by Gluu in the OX Project is under the \nMIT License\n.\nThe third party components have separate licenses.\n\n\n\n\n\n\n\n\nComponent\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nShibboleth\n\n\nApache2\n\n\n\n\n\n\nOpenDJ\n\n\nCDDL-1.0\n\n\n\n\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\n\n\n\n\nJagger\n\n\nMIT License\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGluu maintains a fork of OpenDJ 3 in \nour Github\n.",
            "title": "1.1 Summary"
        },
        {
            "location": "/introduction/#introduction",
            "text": "The Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.",
            "title": "Introduction"
        },
        {
            "location": "/introduction/#history",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.( Read More )",
            "title": "History"
        },
        {
            "location": "/introduction/#design-goals",
            "text": "At OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux...( Read More )",
            "title": "Design Goals"
        },
        {
            "location": "/introduction/#architecture",
            "text": "There are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.( Read More )",
            "title": "Architecture"
        },
        {
            "location": "/introduction/#license",
            "text": "Any software published by Gluu in the OX Project is under the  MIT License .\nThe third party components have separate licenses.     Component  License      Shibboleth  Apache2    OpenDJ  CDDL-1.0    Asimba  GNU APGL 3.0    Jagger  MIT License      Note  Gluu maintains a fork of OpenDJ 3 in  our Github .",
            "title": "License"
        },
        {
            "location": "/introduction/history/",
            "text": "History\n\n\nHow we got started\n\n\nVersions 1 and 2\n\n\nVersion 3\n\n\nEnter OAuth2\n\n\n\n\n\n\n\n\n\n\nHistory\n#\n\n\nHow we got started\n#\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.\n\n\nVersions 1 and 2\n#\n\n\nVersions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.\n\n\nVersion 3\n#\n\n\nThe first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.\n\n\nEnter OAuth2\n#\n\n\nOAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for\n\nIDCubed\n. This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "1.2 History"
        },
        {
            "location": "/introduction/history/#history",
            "text": "",
            "title": "History"
        },
        {
            "location": "/introduction/history/#how-we-got-started",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.",
            "title": "How we got started"
        },
        {
            "location": "/introduction/history/#versions-1-and-2",
            "text": "Versions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.",
            "title": "Versions 1 and 2"
        },
        {
            "location": "/introduction/history/#version-3",
            "text": "The first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.",
            "title": "Version 3"
        },
        {
            "location": "/introduction/history/#enter-oauth2",
            "text": "OAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for IDCubed . This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "Enter OAuth2"
        },
        {
            "location": "/introduction/design/",
            "text": "Design Goals\n\n\nFree Open Source Identity Suite\n\n\nSupport most promising open standards\n\n\nLeverage existing business processes\n\n\nFree license\n\n\nWrite as a last resort\n\n\nNot just comprehensive, but easy to use\n\n\nHorizontal scalability\n\n\nExtreme flexibility\n\n\n\n\n\n\n\n\n\n\nDesign Goals\n#\n\n\nFree Open Source Identity Suite\n#\n\n\nOne of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.\n\n\nSupport most promising open standards\n#\n\n\nThe goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.\n\n\nLeverage existing business processes\n#\n\n\nWhere possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.\n\n\nFree license\n#\n\n\nThe components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.\n\n\nWrite as a last resort\n#\n\n\nUse the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!\n\n\nNot just comprehensive, but easy to use\n#\n\n\nThe Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.\n\n\nHorizontal scalability\n#\n\n\nSystem administrators should be able to add more servers to make the \nGluu Server scale as much as needed.\n\n\nExtreme flexibility\n#\n\n\nAs Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "1.3 Design Goals"
        },
        {
            "location": "/introduction/design/#design-goals",
            "text": "",
            "title": "Design Goals"
        },
        {
            "location": "/introduction/design/#free-open-source-identity-suite",
            "text": "One of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.",
            "title": "Free Open Source Identity Suite"
        },
        {
            "location": "/introduction/design/#support-most-promising-open-standards",
            "text": "The goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.",
            "title": "Support most promising open standards"
        },
        {
            "location": "/introduction/design/#leverage-existing-business-processes",
            "text": "Where possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.",
            "title": "Leverage existing business processes"
        },
        {
            "location": "/introduction/design/#free-license",
            "text": "The components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.",
            "title": "Free license"
        },
        {
            "location": "/introduction/design/#write-as-a-last-resort",
            "text": "Use the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!",
            "title": "Write as a last resort"
        },
        {
            "location": "/introduction/design/#not-just-comprehensive-but-easy-to-use",
            "text": "The Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.",
            "title": "Not just comprehensive, but easy to use"
        },
        {
            "location": "/introduction/design/#horizontal-scalability",
            "text": "System administrators should be able to add more servers to make the \nGluu Server scale as much as needed.",
            "title": "Horizontal scalability"
        },
        {
            "location": "/introduction/design/#extreme-flexibility",
            "text": "As Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "Extreme flexibility"
        },
        {
            "location": "/introduction/architecture/",
            "text": "Architecture\n\n\nJ2EE Servlet container\n\n\nApache HTTP front end web server\n\n\nLDAP for Persistence\n\n\nWeb container plugins\n\n\n\n\n\n\n\n\n\n\nArchitecture\n#\n\n\nFollowing is a list of the technical components that comprise the Gluu Server.\n\n\nJ2EE Servlet container\n#\n\n\nMost of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.\n\n\nApache HTTP front end web server\n#\n\n\nAlthough there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content. \n\n\nLDAP for Persistence\n#\n\n\nLDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.\n\n\nWeb container plugins\n#\n\n\nToday, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.\n\n\nWeb agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.\n\n\nIf developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "1.4 Gluu Server Architecture"
        },
        {
            "location": "/introduction/architecture/#architecture",
            "text": "Following is a list of the technical components that comprise the Gluu Server.",
            "title": "Architecture"
        },
        {
            "location": "/introduction/architecture/#j2ee-servlet-container",
            "text": "Most of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.",
            "title": "J2EE Servlet container"
        },
        {
            "location": "/introduction/architecture/#apache-http-front-end-web-server",
            "text": "Although there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content.",
            "title": "Apache HTTP front end web server"
        },
        {
            "location": "/introduction/architecture/#ldap-for-persistence",
            "text": "LDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.",
            "title": "LDAP for Persistence"
        },
        {
            "location": "/introduction/architecture/#web-container-plugins",
            "text": "Today, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.  Web agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.  If developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Web container plugins"
        },
        {
            "location": "/installation-guide/",
            "text": "1 Preparing VM for Gluu Server Installation\n#\n\n\nGluu Server Community Edition (CE) does not have any fixed requirement to function properly, as the requirements depend on the data size it will handle. However there is a recommended minimum that Gluu suggests. If all the components are installed and used, then the VM needs at least the following:\n\n\n\n\n\n\n\n\nCPU Unit\n\n\nRAM\n\n\nDisk Space\n\n\nProcessor Type\n\n\n\n\n\n\n\n\n\n\n2\n\n\n4GB\n\n\n40GB\n\n\n64 Bit\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe processor type must be 64 bit for Gluu Server to function\n\n\n\n\n\n\nNote\n\n\nInsufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.\n\n\n\n\nThere are some other requirements that must fulfilled before you can install Gluu Server CE in the VM regarding tomcat memory heap and file descriptor settings.\n\n\n1.1 Port\n#\n\n\nThe following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.\n\n\n\n\n\n\n\n\nPort Number\n\n\nProtocol\n\n\n\n\n\n\n\n\n\n\n80\n\n\ntcp\n\n\n\n\n\n\n443\n\n\ntcp\n\n\n\n\n\n\n\n\n1.2 Tomcat Memory Heap\n#\n\n\nThe minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). The minimum recommended tomcat heap memory is scaled higher for production instance at 4GB .\n\n\n1.2.1 Alter Tomcat Memory Heap\n#\n\n\nThe tomcat heap memory is set generally from the \nsetup.py\n script prompt. This property can also altered from the \n/opt/tomcat/conf/gluuTomcatWrapper.conf\n file inside the Gluu Server chroot container setting \nwrapper.java.initmemory\n and \nwrapper.java.maxmemory\n properties.\nUse the following command to open the gluuTomcatWrapper file\n\n\n# vi /opt/tomcat/conf/gluuTomcatWrapper.conf\n\n\n\n\nPlease change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.\n\n\n# Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536\n\n\n\n\n1.3 File Descriptor\n#\n\n\nGluu recommends setting the \nfile descriptors\n to 65k for Gluu Server CE. The following steps will help set the \nfile descriptor\n limit.\n\n\n\n\nEdit the \n/etc/security/limits.conf\n file.\n\n\nAdd the following lines in the \nlimits.conf\n file. Please replace the \nusername\n with the user that will install Gluu Server.\n\n\n\n\n* soft nofile 65536\n* hard nofile 262144\n\n\n\n\n\n\nEdit the \n/etc/pam.d/login\n by adding the line:\n\n\n\n\nsession required /lib/security/pam_limits.so\n\n\n\n\n\n\nUse the system file limit to increase the file descriptor limit to 65535. The system file limit is set in \n/proc/sys/fs/file-max\n.\n\n\n\n\necho 65535 > /proc/sys/fs/file-max\n\n\n\n\n\n\nUse the \nulimit\n command to set the file descriptor limit to the hard limit specified in \n/etc/security/limits.conf\n.\n\n\n\n\nulimit -n unlimited\n\n\n\n\n\n\nRestart your system.\n\n\n\n\n1.4 Cloud Specific Instructions\n#\n\n\n1.4.1 Amazon AWS\n#\n\n\nAmazon AWS provides a public and private IP address to its clouds. While\nrunning the \n/install/community-edition-setup/setup.py\n script, use the\nPrivate IP address.\n\n\n1.4.2 Microsoft Azure\n#\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. \n\n\n1.4.2.1 Setting up VM\n#\n\n\n\n\n\n\nLog into Windows Azure Administrative Panel\n\n\n\n\n\n\nClick on \nVirtual Machines\n tab, and click \nCreate a Virtual Machine\n link\n\n\n\n\n\n\nFrom the menu, choose \nCompute\n --> \nVirtual Machine\n --> \nFrom Gallery\n branch.\n\n\n\n\n\n\nChoose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.\n\n\n\n\n\n\nProvide a name for the VM in the \nVirtual Machine Name\n field and use\n\nStandard\n for \nTier\n.\n\n\n\n\n\n\nSelect at least \nA2\n variant equipped with 3.5GB RAM in the \nSize\n\ndropdown menu.\n\n\n\n\n\n\nProvide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click \nNext\n.\n\n\n\n\n\n\nCreate a new cloud service and select \nNone\n for \nAvailability Set\n\n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click \nNext\n.\n\n\n\n\n\n\nChoose not to install \nVM Agent\n and click the \ntick\n button to\n   finalize the VM.\n\n\n\n\n\n\nGo to the \nDashboard\n tab of VM Management Panel and copy the \nDNS\n    Name\n. This is the name that is used to access the Gluu Server.\n\n\n\n\n\n\nSSH into the VM and install the Gluu Server. See our \nInstallation Guide\n for\n    installation instructions.\n\n\n\n\n\n\n1.4.2.2 Setup.py Configuration\n#\n\n\ns section describes what to put in the prompt when \nsetup.py\n is run\nafter installing Gluu Server.\n\n\n\n\n\n\nIP Address: Do not change the default IP address; just press \nenter\n.\n\n\n\n\n\n\nhostname: Use the DNS name that was copied from the `VM Management Panel.\n\n\n\n\n\n\nUpdate hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file \n/etc/sysconfig/networking\n,\n      and add the full DNS name.\n\n\n\n\n\n\nOther Settings: The other settings can be left to the default values.\n        * Recommendation: the Gluu Server requires a 64bit OS, and allocates\n      at least 4GB of RAM for Apache Tomcat in production environments.\n\n\n\n\n\n\nNow the chosen DNS name can be used to access the Gluu Server.\n\n\n\n\n\n\n1.4.3 Linode VM\n#\n\n\nThe Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.\n\n\n\n\nCheck for the current version of the kernel. If the output contains \n-Linode\n, then proceed\n\n\n\n\n# uname -a\n\n\n\n\n\n\nRun the following command to update the kernel\n\n\n\n\n# apt-get install linux-image-virtual grub2\n\n\n\n\n\n\nModify \ngrub\n file in the \n/etc/default/\n folder\n\n\n\n\n# vim /etc/default/grub\n\n\n\n\n- Ensure that the following lines are present in the glub file\n\n\n\nGRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"\n\n\n\n\n\n\nFinally run the following commands to update \ngrub\n and reboot\n\n\n\n\n# update-grub\n# reboot",
            "title": "1 Preparing VM"
        },
        {
            "location": "/installation-guide/#1-preparing-vm-for-gluu-server-installation",
            "text": "Gluu Server Community Edition (CE) does not have any fixed requirement to function properly, as the requirements depend on the data size it will handle. However there is a recommended minimum that Gluu suggests. If all the components are installed and used, then the VM needs at least the following:     CPU Unit  RAM  Disk Space  Processor Type      2  4GB  40GB  64 Bit      Warning  The processor type must be 64 bit for Gluu Server to function    Note  Insufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.   There are some other requirements that must fulfilled before you can install Gluu Server CE in the VM regarding tomcat memory heap and file descriptor settings.",
            "title": "1 Preparing VM for Gluu Server Installation"
        },
        {
            "location": "/installation-guide/#11-port",
            "text": "The following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.     Port Number  Protocol      80  tcp    443  tcp",
            "title": "1.1 Port"
        },
        {
            "location": "/installation-guide/#12-tomcat-memory-heap",
            "text": "The minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). The minimum recommended tomcat heap memory is scaled higher for production instance at 4GB .  1.2.1 Alter Tomcat Memory Heap #  The tomcat heap memory is set generally from the  setup.py  script prompt. This property can also altered from the  /opt/tomcat/conf/gluuTomcatWrapper.conf  file inside the Gluu Server chroot container setting  wrapper.java.initmemory  and  wrapper.java.maxmemory  properties.\nUse the following command to open the gluuTomcatWrapper file  # vi /opt/tomcat/conf/gluuTomcatWrapper.conf  Please change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.  # Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536",
            "title": "1.2 Tomcat Memory Heap"
        },
        {
            "location": "/installation-guide/#13-file-descriptor",
            "text": "Gluu recommends setting the  file descriptors  to 65k for Gluu Server CE. The following steps will help set the  file descriptor  limit.   Edit the  /etc/security/limits.conf  file.  Add the following lines in the  limits.conf  file. Please replace the  username  with the user that will install Gluu Server.   * soft nofile 65536\n* hard nofile 262144   Edit the  /etc/pam.d/login  by adding the line:   session required /lib/security/pam_limits.so   Use the system file limit to increase the file descriptor limit to 65535. The system file limit is set in  /proc/sys/fs/file-max .   echo 65535 > /proc/sys/fs/file-max   Use the  ulimit  command to set the file descriptor limit to the hard limit specified in  /etc/security/limits.conf .   ulimit -n unlimited   Restart your system.",
            "title": "1.3 File Descriptor"
        },
        {
            "location": "/installation-guide/#14-cloud-specific-instructions",
            "text": "1.4.1 Amazon AWS #  Amazon AWS provides a public and private IP address to its clouds. While\nrunning the  /install/community-edition-setup/setup.py  script, use the\nPrivate IP address.  1.4.2 Microsoft Azure #  Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started.   1.4.2.1 Setting up VM #    Log into Windows Azure Administrative Panel    Click on  Virtual Machines  tab, and click  Create a Virtual Machine  link    From the menu, choose  Compute  -->  Virtual Machine  -->  From Gallery  branch.    Choose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.    Provide a name for the VM in the  Virtual Machine Name  field and use Standard  for  Tier .    Select at least  A2  variant equipped with 3.5GB RAM in the  Size \ndropdown menu.    Provide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click  Next .    Create a new cloud service and select  None  for  Availability Set \n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click  Next .    Choose not to install  VM Agent  and click the  tick  button to\n   finalize the VM.    Go to the  Dashboard  tab of VM Management Panel and copy the  DNS\n    Name . This is the name that is used to access the Gluu Server.    SSH into the VM and install the Gluu Server. See our  Installation Guide  for\n    installation instructions.    1.4.2.2 Setup.py Configuration #  s section describes what to put in the prompt when  setup.py  is run\nafter installing Gluu Server.    IP Address: Do not change the default IP address; just press  enter .    hostname: Use the DNS name that was copied from the `VM Management Panel.    Update hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file  /etc/sysconfig/networking ,\n      and add the full DNS name.    Other Settings: The other settings can be left to the default values.\n        * Recommendation: the Gluu Server requires a 64bit OS, and allocates\n      at least 4GB of RAM for Apache Tomcat in production environments.    Now the chosen DNS name can be used to access the Gluu Server.    1.4.3 Linode VM #  The Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.   Check for the current version of the kernel. If the output contains  -Linode , then proceed   # uname -a   Run the following command to update the kernel   # apt-get install linux-image-virtual grub2   Modify  grub  file in the  /etc/default/  folder   # vim /etc/default/grub  - Ensure that the following lines are present in the glub file  GRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"   Finally run the following commands to update  grub  and reboot   # update-grub\n# reboot",
            "title": "1.4 Cloud Specific Instructions"
        },
        {
            "location": "/installation-guide/install/",
            "text": "2 Install Gluu Server\n#\n\n\nGluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package is installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the \napt-get\n or \nyum install\n command.\n\n\n2.1 Ubuntu\n#\n\n\n2.1.1 Ubuntu Server 14.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.2 Ubuntu Server 16.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nXenial Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.1.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.2 CentOS\n#\n\n\n2.2.1 CentOS 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.2 CentOS 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.2.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.3 Red Hat Enterprise Linux (RHEL)\n#\n\n\n2.3.1 RHEL 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.2 RHEL 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The commands are different in RHEL 6.x and RHEL 7\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.3.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.4 Debian 8 (Jessie)\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/debian/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.4.1 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder.\n\n Log into Gluu Server \nchroot\n\n\n Run the setup script\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.4.2 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*",
            "title": "2 Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#2-install-gluu-server",
            "text": "Gluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package is installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the  apt-get  or  yum install  command.",
            "title": "2 Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#21-ubuntu",
            "text": "2.1.1 Ubuntu Server 14.04 #  The following commands will install Gluu Server  chroot     Command Description  Trusty Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     Please see section 2.1.3 to complete installation.  2.1.2 Ubuntu Server 16.04 #  The following commands will install Gluu Server  chroot     Command Description  Xenial Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     Please see section 2.1.3 to complete installation.  2.1.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.   Log into Gluu Server  chroot  Run the setup script      Command Description  Trusty & Xenial Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.1.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Trusty & Xenial Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.1 Ubuntu"
        },
        {
            "location": "/installation-guide/install/#22-centos",
            "text": "2.2.1 CentOS 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  CentOS 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.2 CentOS 7.2 #  The following commands will install Gluu Server  chroot     Command Description  CentOS 7.2      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2   Log into Gluu Server  chroot  Run the setup script      Command Description  CentOS 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py        Command Description  CentOS 7.2      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.2.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.     Command Description  CentOS 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  CentOS 7.2      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.2 CentOS"
        },
        {
            "location": "/installation-guide/install/#23-red-hat-enterprise-linux-rhel",
            "text": "2.3.1 RHEL 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  RHEL 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.2 RHEL 7.2 #  The following commands will install Gluu Server  chroot     Command Description  RHEL 7      Add Gluu Repository  wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The commands are different in RHEL 6.x and RHEL 7   Log into Gluu Server  chroot  Run the setup script      Command Description  RHEL 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py        Command Description  RHEL 7      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.3.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.     Command Description  RHEL 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  RHEL 7      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.3 Red Hat Enterprise Linux (RHEL)"
        },
        {
            "location": "/installation-guide/install/#24-debian-8-jessie",
            "text": "The following commands will install Gluu Server  chroot     Command Description  Jessie Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/debian/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     2.4.1 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder.  Log into Gluu Server  chroot   Run the setup script     Command Description  Jessie Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.4.2 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Jessie Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.4 Debian 8 (Jessie)"
        },
        {
            "location": "/installation-guide/setup_py/",
            "text": "2.5.1 Setup Prompt\n#\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate as well as the IP Address and the hostname for the Gluu Server. The prompt is given below.\n\n\nEnter IP Address [192.168.122.60] :\nEnter hostname [localhost] : centos.gluu.info\nEnter your city or locality : Austin\nEnter your state or province two letter code : TX\nEnter two letter Country Code : US\nEnter Organization Name : Gluu\nEnter email address for support at your organization : support@gluu.org\nEnter maximum RAM for tomcat in MB [3072] :\nOptional: enter password for oxTrust and LDAP superuser [hlE3vzf0hMdD] :\nInstall oxAuth OAuth2 Authorization Server? [Yes] :\nInstall oxTrust Admin UI? [Yes] :\nInstall Gluu OpenDJ LDAP Server? [Yes] :\nInstall Apache HTTPD Server [Yes] :\nInstall Shibboleth SAML IDP? [No] :\nInstall Asimba SAML Proxy? [No] :\nInstall CAS? [No] :\nInstall oxAuth RP? [No] :\n\n\n\n\nIt is recommended to use \nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n for IP address. \nIf you are not using a resolvable DNS host, you will need to add the hostname to your hosts file on the server which is running your browser. Login with the default user name \nadmin\n and the password printed back in the confirmation (also contained in \nsetup.properties.last\n (use the Unix command \ngrep --color -i pass\n to find the according line quickly) and look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt setup.properties.last It has the clear text passwords for everything: \nLDAP, admin user, keystores, and 3DES salt\n. If something goes wrong, check \nsetup.log\n for a detailed step-by-step of the installation. As an alternative you may check the file \nsetup_errors.log\n to just see the errors (or stderr output from the scripts).\n\n\n\n\nWarning\n\n\nUse a FQDN (fully qualified domain name) as hostname and refrain from using 127.0.0.1 as IP address\n\n\n\n\n2.5.2 Script Command Line Options\n#\n\n\nThe \nsetup.py\n script can be used to configure your Gluu Server and to add initial data\nfor oxAuth and oxTrust to start. If \nsetup.properties\n is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.\n\n\nThe administrator can use the following command line options to include additional components:\n\n\n\n\n-a\n install Asimba\n\n\n-c\n install CAS\n\n\n-d\n specify the directory where community-edition-setup is located. Defaults to '.'\n\n\n-f\n specify \nsetup.properties\n file\n\n\n-h\n invoke this help\n\n\n-l\n install LDAP\n\n\n-n\n no interactive prompt before install starts. Run with \n-f\n\n\n-N\n no Apache httpd server\n\n\n-s\n install the Shibboleth IDP\n\n\n-u\n update hosts file with IP address/hostname\n\n\n-w\n get the development head war files\n\n\n\n\nExample Command: \n# ./setup.py -cas\n This command will install Gluu Server with CAS, Asimba and Shibboleth IDP.",
            "title": "2.5 Setup Script Options"
        },
        {
            "location": "/cluster/csync-installation/",
            "text": "How to install csync2 in different Gluu CE containers\n\n\nCentOS 6.x\n\n\nCentOS 7.x\n\n\nUbuntu 14.x (compiling from sources)\n\n\nUbuntu 14.x (from repo)\n\n\n\n\n\n\n\n\n\n\nHow to install csync2 in different Gluu CE containers\n#\n\n\nCentOS 6.x\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nInstall epel-release-latest by running \nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n\n\n\n\n\n\nInstall \ncsync2\n package by running \nyum install csync2\n\n\n\n\n\n\nCentOS 7.x\n#\n\n\nOn the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nEnable epel-release repo: \n# yum install epel-release\n\n\n\n\n\n\nInstall compiler and development environment: \n# yum group install \"Development Tools\"\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# yum install librsync-devel\n\n\n\n\n\n\n# yum install gnutls-devel\n\n\n\n\n\n\n# yum install sqlite-devel\n\n\n\n\n\n\n\n\n\n\n# mkdir building_csync && cd building_csync/\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/usr/local/etc/csync2/\n directory for storing configuration (for convenience): \n# ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install\n. Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!\n\n\n\n\n\n\nUbuntu 14.x (compiling from sources)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# apt-get install pkg-config\n\n\n\n\n\n\n# apt-get install libsqlite-dev\n\n\n\n\n\n\n# apt-get install libsqlite3-dev\n\n\n\n\n\n\n# apt-get install librsync-dev\n\n\n\n\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/etc/csync2/\n directory for storing configuration and \n/usr/sbin\n directory for executables (for convenience): \n./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install\n\n\n\n\n\n\nUbuntu 14.x (from repo)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nRun \napt-get install csync2",
            "title": "3.1 Csync Install Guide"
        },
        {
            "location": "/cluster/csync-installation/#how-to-install-csync2-in-different-gluu-ce-containers",
            "text": "",
            "title": "How to install csync2 in different Gluu CE containers"
        },
        {
            "location": "/cluster/csync-installation/#centos-6x",
            "text": "Log into Gluu-Server container    Install epel-release-latest by running  rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm    Install  csync2  package by running  yum install csync2",
            "title": "CentOS 6.x"
        },
        {
            "location": "/cluster/csync-installation/#centos-7x",
            "text": "On the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.    Log into Gluu-Server container    Enable epel-release repo:  # yum install epel-release    Install compiler and development environment:  # yum group install \"Development Tools\"    Install csync2's dependencies:    # yum install librsync-devel    # yum install gnutls-devel    # yum install sqlite-devel      # mkdir building_csync && cd building_csync/    Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /usr/local/etc/csync2/  directory for storing configuration (for convenience):  # ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install . Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!",
            "title": "CentOS 7.x"
        },
        {
            "location": "/cluster/csync-installation/#ubuntu-14x-compiling-from-sources",
            "text": "Log into Gluu-Server container    Run  apt-get update    Install csync2's dependencies:    # apt-get install pkg-config    # apt-get install libsqlite-dev    # apt-get install libsqlite3-dev    # apt-get install librsync-dev      Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /etc/csync2/  directory for storing configuration and  /usr/sbin  directory for executables (for convenience):  ./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install",
            "title": "Ubuntu 14.x (compiling from sources)"
        },
        {
            "location": "/cluster/csync-installation/#ubuntu-14x-from-repo",
            "text": "Log into Gluu-Server container    Run  apt-get update    Run  apt-get install csync2",
            "title": "Ubuntu 14.x (from repo)"
        },
        {
            "location": "/cluster/",
            "text": "Manual Cluster\n\n\nDesign\n\n\nRequirements\n\n\nPreparing VMs\n\n\nLDAP Replication\n\n\nFile System Replication\n\n\nCsync2 installation\n\n\nCsync2 configuration for host-1\n\n\nCsync2 configuration for host-2\n\n\n\n\n\n\nCertificate Management\n\n\n[Optional] Actions in case setup.properties.last method of installation didn't work for you\n\n\n\n\n\n\n\n\n\n\nManual Cluster\n#\n\n\nDesign\n#\n\n\nThe following diagram outlines the design of the cluster.\n\n\n\nRequirements\n#\n\n\nFor complete deployment requirements and instructions, please see the \nDeployment Page\n.\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs.\n\n\n\n\n\n\n\n\nNumber of VMs\n\n\nCPU Units\n\n\nRAM\n\n\nRoot Partion\n\n\nPort Requirements\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2 CPU ea.\n\n\n8 GB\n\n\n40 GB\n\n\n4444 and 8989 (LDAP replication), 30865 (file system syncing)\n\n\n\n\n\n\n\n\nNote:\n For convenience, the VMs are identified as \nhost-1\n and \nhost-2\n\n\nPreparing VMs\n#\n\n\n\n\n\n\nInstall Gluu CE following the \nDeployment Page\n in \nhost-1\n\n\n\n\n\n\n(!)\nPlease note: you must do this step right after initial installation on the 2nd node, but before you'll run setup.py script there\n(!)\n Copy \nsetup.properties.last\n that will be generated in \n/install/community-edition-setup/\n right after \nsetup.py\n's completion on \nhost-1\n, change IP address in it to the one of \nhost-2\n and put it into the same directory of \nhost-2\n while renaming the file to \nsetup.properties\n, then run \nsetup.py\n the usual way. As it won't be running in interactive mode this way, make sure you'll provide all optional components (like Shibboleth, Asimba etc) you need to be installed explicitly with keys (run \n# ./setup.py -h\n for full list of them) Please be sure to read \nthis part\n in case you failed to setup the 2nd node using \nsetup.properties.last\n file from the 1st one for some reason, and resorted to installing it from scratch, that will call for additional steps.\n\n\n\n\n\n\nLDAP Replication\n#\n\n\n\n\nThings to know\n\n\n\n\n\n\n\n\n\n\nhost-1\n\n\nhost-2\n\n\n\n\n\n\n\n\n\n\nIP Address eg. 192.168.6.1\n\n\nIp Address eg. 192.168.6.2\n\n\n\n\n\n\nLDAP admin pass\n\n\nLDAP admin pass\n\n\n\n\n\n\nldapGeneralConfigInstall.py\n\n\n\n\n\n\n\n\nreplicationSetup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun \nldapGeneralConfigInstall.py\n in \nhost-1\n. This script will prepare the \nhost-1\n LDAP server to accept various configurations such as \nallow-pre-encoded-passwords\n or applyting the host and port for LDAP Server.\n\n\n\n\n\n\nRun \nreplicationSetup.py\n in \nhost-1\n and it will give a similar output as below:\n\n\n\n\n\n\n[ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$\n\n\n\n\n\n\nInitialize directory server replication with this command \n/opt/opendj/bin/dsreplication initialize\n and it will give the following output:\n\n\n\n\n[ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.\n\n\n\n\n(!)\n OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; another option is to use the same OpenDJ certificate/key pair for both nodes\n   \n\n\nFile System Replication\n#\n\n\n(!)\n Be advised that backup feature is broken in some of earlier versions of csync2 you may get installed from your distribution's repo. In that case you will need either to disable it by commenting out \nbackup-*\n clauses in tool's configuration file, or to build csync2 of version 2.0+ from sources and use key \n-l\n in your xinetd.d's config (like \nserver_args     = -i -l -N idp1.gluu.org\n) on both nodes.\n \n\n\n(!)\n Be sure to verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ for different linux distros.\n\n\ncsync2\n is used for file system syncing between \nhost-1\n and \nhost-2\n. The following locations are synced in between the two VMs.\n\n\n\n\n/opt/idp/conf\n\n\n/opt/idp/metadata\n\n\n/opt/idp/ssl\n\n\n/opt/tomcat/conf\n\n\n/etc/csync2/csync2.cfg\n\n\n\n\nCsync2 installation\n#\n\n\nPlease follow steps provided in next articles to install csync2 on both nodes: \nCentOS 6.x\n, \nCentOS 7.x\n, \nUbuntu 14.x (from repo)\n, \nUbuntu 14.x (compiling from sources)\n.\n\n\nCsync2 configuration for host-1\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nGenerate \ncsync2\n private key by running \ncsync2 -k csync2.key\n and put it into \n/etc/csync2/csync2.key\n file\n\n\n\n\n\n\nCopy the private key to \nhost-2\n and put it into the same file there\n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-1\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \nEnter\n accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\n Add IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org  \n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure \ncsync2.cfg\n to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n \n\nRun `mkdir -p /var/backups/csync2`\n\n\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCsync2 configuration for host-2\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\n(If you haven't done it yet) Copy the private key you generated on \nhost-1\n previously to \nhost-2\n and put it into \n/etc/csync2/csync2.key\n file \n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-2\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\nAdd IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org\n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n Run \nmkdir -p /var/backups/csync2\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCertificate Management\n#\n\n\nThe certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to \n/etc/certs/\n on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks: \nhttpd.*\n, \nasimba.*\n, \nasimbaIDP.*\n and \nshibIDP.*\n to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).\n\n\nAfter that's done you still will need to update default system storage (\ncacerts\n file) at the 2nd node with these newly copied certificates.\n\n\n[Optional] Actions in case setup.properties.last method of installation didn't work for you\n#\n\n\nIn this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.\n\n\nThus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.\n\n\nTo achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:\n\n\n\n\n\n\nComment out \nauto younger;\n string in \ncsync2.cfg\n on both nodes to disable autoresolution of conflicts\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp1.gluu.org\n on the 1st node\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp2.gluu.org\n on the 2nd node\n\n\n\n\n\n\nPrevious commands did initial scan and filled metadata database. Now run \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.\n\n\n\n\n\n\nYou should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this \n# csync2 -frvvv -N idp1.gluu.org /\n on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.\n\n\n\n\n\n\nRun \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.\n\n\n\n\n\n\nUncomment \nauto younger;\n string and proceed to installing cron jobs",
            "title": "3.2 Cluster Deployment Guide"
        },
        {
            "location": "/cluster/#manual-cluster",
            "text": "",
            "title": "Manual Cluster"
        },
        {
            "location": "/cluster/#design",
            "text": "The following diagram outlines the design of the cluster.",
            "title": "Design"
        },
        {
            "location": "/cluster/#requirements",
            "text": "For complete deployment requirements and instructions, please see the  Deployment Page .\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs.     Number of VMs  CPU Units  RAM  Root Partion  Port Requirements      2  2 CPU ea.  8 GB  40 GB  4444 and 8989 (LDAP replication), 30865 (file system syncing)     Note:  For convenience, the VMs are identified as  host-1  and  host-2",
            "title": "Requirements"
        },
        {
            "location": "/cluster/#preparing-vms",
            "text": "Install Gluu CE following the  Deployment Page  in  host-1    (!) Please note: you must do this step right after initial installation on the 2nd node, but before you'll run setup.py script there (!)  Copy  setup.properties.last  that will be generated in  /install/community-edition-setup/  right after  setup.py 's completion on  host-1 , change IP address in it to the one of  host-2  and put it into the same directory of  host-2  while renaming the file to  setup.properties , then run  setup.py  the usual way. As it won't be running in interactive mode this way, make sure you'll provide all optional components (like Shibboleth, Asimba etc) you need to be installed explicitly with keys (run  # ./setup.py -h  for full list of them) Please be sure to read  this part  in case you failed to setup the 2nd node using  setup.properties.last  file from the 1st one for some reason, and resorted to installing it from scratch, that will call for additional steps.",
            "title": "Preparing VMs"
        },
        {
            "location": "/cluster/#ldap-replication",
            "text": "Things to know      host-1  host-2      IP Address eg. 192.168.6.1  Ip Address eg. 192.168.6.2    LDAP admin pass  LDAP admin pass    ldapGeneralConfigInstall.py     replicationSetup.py        Run  ldapGeneralConfigInstall.py  in  host-1 . This script will prepare the  host-1  LDAP server to accept various configurations such as  allow-pre-encoded-passwords  or applyting the host and port for LDAP Server.    Run  replicationSetup.py  in  host-1  and it will give a similar output as below:    [ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$   Initialize directory server replication with this command  /opt/opendj/bin/dsreplication initialize  and it will give the following output:   [ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.  (!)  OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; another option is to use the same OpenDJ certificate/key pair for both nodes",
            "title": "LDAP Replication"
        },
        {
            "location": "/cluster/#file-system-replication",
            "text": "(!)  Be advised that backup feature is broken in some of earlier versions of csync2 you may get installed from your distribution's repo. In that case you will need either to disable it by commenting out  backup-*  clauses in tool's configuration file, or to build csync2 of version 2.0+ from sources and use key  -l  in your xinetd.d's config (like  server_args     = -i -l -N idp1.gluu.org ) on both nodes.    (!)  Be sure to verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ for different linux distros.  csync2  is used for file system syncing between  host-1  and  host-2 . The following locations are synced in between the two VMs.   /opt/idp/conf  /opt/idp/metadata  /opt/idp/ssl  /opt/tomcat/conf  /etc/csync2/csync2.cfg   Csync2 installation #  Please follow steps provided in next articles to install csync2 on both nodes:  CentOS 6.x ,  CentOS 7.x ,  Ubuntu 14.x (from repo) ,  Ubuntu 14.x (compiling from sources) .  Csync2 configuration for host-1 #    Log into Gluu-Server container    Generate  csync2  private key by running  csync2 -k csync2.key  and put it into  /etc/csync2/csync2.key  file    Copy the private key to  host-2  and put it into the same file there    Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-1  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit  Enter  accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.    Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org      Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure  csync2.cfg  to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org     Run `mkdir -p /var/backups/csync2`     Add cronjob to automate csync2 run. The cronjob example is given below:   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log   Csync2 configuration for host-2 #    Log into Gluu-Server container    (If you haven't done it yet) Copy the private key you generated on  host-1  previously to  host-2  and put it into  /etc/csync2/csync2.key  file     Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-2  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.   Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org    Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org    Run  mkdir -p /var/backups/csync2    Add cronjob to automate csync2 run. The cronjob example is given below:  1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log",
            "title": "File System Replication"
        },
        {
            "location": "/cluster/#certificate-management",
            "text": "The certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to  /etc/certs/  on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks:  httpd.* ,  asimba.* ,  asimbaIDP.*  and  shibIDP.*  to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).  After that's done you still will need to update default system storage ( cacerts  file) at the 2nd node with these newly copied certificates.",
            "title": "Certificate Management"
        },
        {
            "location": "/cluster/#optional-actions-in-case-setuppropertieslast-method-of-installation-didnt-work-for-you",
            "text": "In this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.  Thus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.  To achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:    Comment out  auto younger;  string in  csync2.cfg  on both nodes to disable autoresolution of conflicts    Run  # csync2 -crvvv -N idp1.gluu.org  on the 1st node    Run  # csync2 -crvvv -N idp2.gluu.org  on the 2nd node    Previous commands did initial scan and filled metadata database. Now run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.    You should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this  # csync2 -frvvv -N idp1.gluu.org /  on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.    Run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.    Uncomment  auto younger;  string and proceed to installing cron jobs",
            "title": "[Optional] Actions in case setup.properties.last method of installation didn't work for you"
        },
        {
            "location": "/upgrade/",
            "text": "Upgrading Gluu Server CE\n\n\nExport the data from the current installation\n\n\nInstall the latest version of the Gluu server\n\n\nImport your old data\n\n\n\n\n\n\n\n\n\n\nUpgrading Gluu Server CE\n#\n\n\nUpgrading a Gluu Server is NOT a simple \napt-get upgrade\n. The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:\n\n\n\n\nInstall new version\n\n\nExport the data from your current version\n\n\nStop the current Gluu Server\n\n\nStart the new version of Gluu Server\n\n\nImport data into the new server\n\n\n\n\nGluu provides the necessary \nscripts\n to perform the import and export of the data in and out of the servers.\n\n\n\n\nNOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one. \n\n\n\n\nExport the data from the current installation\n#\n\n\n# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py\n\n\n\n\nThe export script will generate a directory called \nbackup_24\n which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.\n\n\nInstall the latest version of the Gluu server\n#\n\n\nStop the current version of the gluu-server.\n\n\n# service gluu-server-2.4.x stop\n\n\n\n\nConsult the \ndocs\n of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version \n2.4.y\n, then:\n\n\n# cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py\n\n\n\n\nEnter the required information for the setup and complete the installation.\n\n\nImport your old data\n#\n\n\nGo to the folder where you have the \nbackup_24\n folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.\n\n\n# cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py\n\n\n\n\nInstall the \npython-pip\n package using your package manager.\n\n\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip\n\n\n\n\nInstall the \njson-merge\n Python package and run the import script.\n\n\n# pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24\n\n\n\n\nAny error or warning will be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "4.1 Upgrade Guide"
        },
        {
            "location": "/upgrade/#upgrading-gluu-server-ce",
            "text": "Upgrading a Gluu Server is NOT a simple  apt-get upgrade . The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:   Install new version  Export the data from your current version  Stop the current Gluu Server  Start the new version of Gluu Server  Import data into the new server   Gluu provides the necessary  scripts  to perform the import and export of the data in and out of the servers.   NOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one.",
            "title": "Upgrading Gluu Server CE"
        },
        {
            "location": "/upgrade/#export-the-data-from-the-current-installation",
            "text": "# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.",
            "title": "Export the data from the current installation"
        },
        {
            "location": "/upgrade/#install-the-latest-version-of-the-gluu-server",
            "text": "Stop the current version of the gluu-server.  # service gluu-server-2.4.x stop  Consult the  docs  of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version  2.4.y , then:  # cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py  Enter the required information for the setup and complete the installation.",
            "title": "Install the latest version of the Gluu server"
        },
        {
            "location": "/upgrade/#import-your-old-data",
            "text": "Go to the folder where you have the  backup_24  folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.  # cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py  Install the  python-pip  package using your package manager.  # apt-get install python-pip\n\nor\n\n# yum -y install python-pip  Install the  json-merge  Python package and run the import script.  # pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24  Any error or warning will be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "Import your old data"
        },
        {
            "location": "/admin-guide/",
            "text": "Gluu Server Administrative Interface\n\n\nWelcome Page\n\n\nConfiguration\n\n\nOrganization Configuration\n\n\nJSON Configuration\n\n\nManage Authentication\n\n\nManage Custom Scripts\n\n\nManage Registration\n\n\nAttributes\n\n\nCache Refresh\n\n\nConfigure Log Viewer\n\n\nView Log File\n\n\nServer Status\n\n\nCertificates\n\n\n\n\n\n\nSAML\n\n\nOutbound\n\n\n\n\n\n\nOpenID Connect\n\n\nUMA\n\n\n\n\n\n\n\n\n\n\nGluu Server Administrative Interface\n#\n\n\nThe administration interface (oxTrust) is accessible from the \nhostname\n provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username \nadmin\n and the \nLDAP superuser\n password. \n\n\nWelcome Page\n#\n\n\nThe administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.\n\n\n\nThe menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under \nUsers\n and the user-profile is under \nPersonal\n.\n\n\nConfiguration\n#\n\n\n\n\nThe configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.\n\n\nOrganization Configuration\n#\n\n\nThere are three sections in the organization configuration page which are \nSystem Configuration\n, \nSMTP Server Configuration\n and \nOxTrust Settings\n. These sections are detailed below with screenshots.\n\n\n\n\nSystem Configuration\n\nGluu Server CE is shipped with a built-in \nWhite Pages\n feature which can be enabled from the system configuration page. This page also contains the options to enable \nSelf-Service Password Reset\n which allows the Gluu Server users to reset their password via email. This options depends on the \nSMTP Server Configuration\n, also available under the organization configuration page. Additionally the \nSCIM Support\n can be enabled from the System Configuration page. If the organization uses any custom \nDNS Server(s)\n, the address should be updated from the System Configuration interface.\n\n\n\nSMTP Server Configuration\n\nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.\n\n\n\nOxTrust Settings\n\nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.\n\n\n\n\nJSON Configuration\n#\n\n\nThe configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the \nJSON Configuration\n menu\n\n\n\nThe oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the \nUpdate\n button on the bottom of the page. The details of the file is given later in the \nReference Guide\n.\n\n\nThe oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.\n\n\nThe oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a \nxls\n file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields\n\n\nManage Authentication\n#\n\n\nThe \nManage Authentication\n page contains the internal OpenDJ settings for Gluu Server CE. The \nDefault Authentication Method\n defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The \noxTrust authentication mode\n decides the authentication mechasims for the users logging into the oxTrust admin interface.\n\n\n\nManage Custom Scripts\n#\n\n\nIt will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.\n\n\n\n\nThe details about the custom scripts are given later in this guide.\n\n\nManage Registration\n#\n\n\nGluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.\n\n\nAttributes\n#\n\n\nThe attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The \nShow All Attributes\n button will show the inactive attributes too. Custom attributes can be added by clicking the \nAdd Attribute\n button and filling up a simple form.\n\n\n\n\nCache Refresh\n#\n\n\nCache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The \nCache Refresh\n will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the \nPolling interval (minutes)\n form. The key attributes, object class and the source attributes can be defined from the \nCustomer BackendKey/Attributes\n tab. The backend server address, bind DN and other information must go to the \nSource Backend LDAP Servers\n tab. The details about performing cache refresh will follow later in this guide.\n\n\nConfigure Log Viewer\n#\n\n\nThe logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.\n\n\nView Log File\n#\n\n\nThe log files are listed in the \nView Log File\n page under the \nAllowed Log Files\n tab. The individual logs can be tailed by clicking them. The \nConfiguration\n contains the last line count which will show the number of lines specified from the log in the \nTail of Log File\n tab. This section is an alternative to getting into the Gluu \nchroot\n and tailing the log files.\n\n\nServer Status\n#\n\n\nThis page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.\n\n\nCertificates\n#\n\n\nThe certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.\n\n\nSAML\n#\n\n\nGluu Server CE contains all SAML related functionalities under the \nSAML\n tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA. \n\n\nOutbound\n#\n\n\n\n\nThe \nTrust Relationships\n page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.\n\n\nOpenID Connect\n#\n\n\nOpenID Connect is another protocol supported by Gluu Server CE following the \nopenID Connect specifications\n. The scopes page contains the \nAdd Scope\n button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.\n\n\n\n\nThe OpenID Connect clients are accessible from the \nClients\n page under \nOpenID Connect\n tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the \nAdd Client\n button.\n\n\n\n\nUMA\n#\n\n\nUMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the \nAdd Scope Description\n button.\n\n\n\nUMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the \nAdd Resource Set\n button.",
            "title": "1. Admin Interface (oxTrust)"
        },
        {
            "location": "/admin-guide/#gluu-server-administrative-interface",
            "text": "The administration interface (oxTrust) is accessible from the  hostname  provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username  admin  and the  LDAP superuser  password.",
            "title": "Gluu Server Administrative Interface"
        },
        {
            "location": "/admin-guide/#welcome-page",
            "text": "The administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.  The menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under  Users  and the user-profile is under  Personal .",
            "title": "Welcome Page"
        },
        {
            "location": "/admin-guide/#configuration",
            "text": "The configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.  Organization Configuration #  There are three sections in the organization configuration page which are  System Configuration ,  SMTP Server Configuration  and  OxTrust Settings . These sections are detailed below with screenshots.   System Configuration \nGluu Server CE is shipped with a built-in  White Pages  feature which can be enabled from the system configuration page. This page also contains the options to enable  Self-Service Password Reset  which allows the Gluu Server users to reset their password via email. This options depends on the  SMTP Server Configuration , also available under the organization configuration page. Additionally the  SCIM Support  can be enabled from the System Configuration page. If the organization uses any custom  DNS Server(s) , the address should be updated from the System Configuration interface.  SMTP Server Configuration \nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.  OxTrust Settings \nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.   JSON Configuration #  The configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the  JSON Configuration  menu  The oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the  Update  button on the bottom of the page. The details of the file is given later in the  Reference Guide .  The oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.  The oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a  xls  file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields  Manage Authentication #  The  Manage Authentication  page contains the internal OpenDJ settings for Gluu Server CE. The  Default Authentication Method  defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The  oxTrust authentication mode  decides the authentication mechasims for the users logging into the oxTrust admin interface.  Manage Custom Scripts #  It will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.   The details about the custom scripts are given later in this guide.  Manage Registration #  Gluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.  Attributes #  The attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The  Show All Attributes  button will show the inactive attributes too. Custom attributes can be added by clicking the  Add Attribute  button and filling up a simple form.   Cache Refresh #  Cache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The  Cache Refresh  will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the  Polling interval (minutes)  form. The key attributes, object class and the source attributes can be defined from the  Customer BackendKey/Attributes  tab. The backend server address, bind DN and other information must go to the  Source Backend LDAP Servers  tab. The details about performing cache refresh will follow later in this guide.  Configure Log Viewer #  The logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.  View Log File #  The log files are listed in the  View Log File  page under the  Allowed Log Files  tab. The individual logs can be tailed by clicking them. The  Configuration  contains the last line count which will show the number of lines specified from the log in the  Tail of Log File  tab. This section is an alternative to getting into the Gluu  chroot  and tailing the log files.  Server Status #  This page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.  Certificates #  The certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/#saml",
            "text": "Gluu Server CE contains all SAML related functionalities under the  SAML  tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA.   Outbound #   The  Trust Relationships  page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/#openid-connect",
            "text": "OpenID Connect is another protocol supported by Gluu Server CE following the  openID Connect specifications . The scopes page contains the  Add Scope  button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.   The OpenID Connect clients are accessible from the  Clients  page under  OpenID Connect  tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the  Add Client  button.",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/#uma",
            "text": "UMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the  Add Scope Description  button.  UMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the  Add Resource Set  button.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/authentication-protocol/",
            "text": "Authentication Protocol in Gluu Server\n\n\n2.1 Outbound SAML\n\n\n2.1.1 Trust Relationship Requirements\n\n\n2.1.1.1 Metadata of the SP\n\n\n2.1.1.2 Required Attributes\n\n\n2.1.1.3 SSO Testing Endpoint\n\n\n\n\n\n\n2.1.2 Create a Trust Relationship\n\n\n2.1.2.1 Relying Party Configuration\n\n\n2.1.2.2 Federation Configuration\n\n\n\n\n\n\n\n\n\n\n2.2 Inbound SAML\n\n\n2.2.1 Required Setup\n\n\n2.2.2 Adding IDP in Asimba Server\n\n\n2.2.3 Adding SP in Asimba Server\n\n\n2.2.4 Adding Selectors in Asimba Server\n\n\n2.2.5 Attribute Handling\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthentication Protocol in Gluu Server\n#\n\n\nGluu Server supports Security Assertion Markup Language (SAML) and OpenID Connect protocols to authenticate users against Service Providers (SPs) and Requesting Parties (RPs). There are two different flows of SAML known as outbound SAML and inbound SAML, both supported out-of-the-box in Gluu Server Community Edition (Gluu CE).\n\n\n2.1 Outbound SAML\n#\n\n\nOutbound SAML can also be called SP-initiated Single Sign On (SSO) or traditional SAML. In an outbound SAML transaction, the SP redirects the user to the designated Identity Provider (IDP) for authentication and authorization. The IDP will ask for the username and password for the user and up on successful authentication, the user is sent back to the SP logged in. The requirement for the IDP is a trust relationship (TR) set up beforehand with the SP. The next section covers how to set up a TR in Gluu Server.\n\n\n2.1.1 Trust Relationship Requirements\n#\n\n\nTrust Relationship creation is easy in Gluu Server from the oxTrust GUI. The following information is necessary to create TR.\n\n\n\n\nMetadata of website\n\n\nRequired attribute of website\n\n\nSSO testing endpoint of website\n\n\n\n\n2.1.1.1 Metadata of the SP\n#\n\n\nMetadata is a XML file which has configuration data used to provision any\nwebsite (SP) or IDP (Gluu Server) to communicate with each other. It is\ninterchangeable between the IDP and the SP.\n\n\nWebsites (SP) can provide metadata via URL or as a separate file. If the\nSP provides an separate XML file, the Gluu Server can check the\nintegrity of that metadata with its own mechanism. This mechanism can be\nshown and tested from Gluu Server oxTrust GUI.\n\n\n2.1.1.2 Required Attributes\n#\n\n\nEvery organization has their own policy to release/share attributes with\nany IDP or SP. The oxTrust GUI supports both preconfigured and custom attribute\nRelease to the SP. The administrator only needs to click on the desired \nattribute and it will be released to the SP.\n\n\n2.1.1.3 SSO Testing Endpoint\n#\n\n\nEvery website (SP) should have both a staging and a production uri\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.\n\n\n2.1.2 Create a Trust Relationship\n#\n\n\n\n\nGo to SAML \u2192 Trust Relationships\n\n\nClick on \u201cAdd Relationship\u201d\n\n\n\n\n\n\n\n\nA new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.\n\n\n\n\n\n\n\n\nDisplay Name\n: Name of the Trust Relationship (it should be unique for every trust relationship)\n\n\nDescription\n: Little description. Purpose and SSO link can be added here.\n\n\nMetadata Type\n: Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server\n\n\nFile\n: If SP has uploadable metadata in XML format, this option works best.\n\n\nURI\n: If the metadata of SP has URI link and accessible from the internet, Gluu Server Administrator can use this option.\n\n\n\n\n\n\nReleased\n: The attributes that are required for the SP must be in this pane. The required attributes can be selected from the left side pane with the heading \u201cRelease Additional Attributes\u201d.\nThe TR is added by clicking on the \nAdd\n button located in the lower left side of the page.\n\n\n\n\n2.1.2.1 Relying Party Configuration\n#\n\n\nThe Relying Party must be configured for some SPs. The relying party configuration is accessible on the TR Creation page. The checkbox \nConfigure specific Relying Party\n must be checked.\n\n\n\n\nThe checkbox will result in a link which can be accessed to configure relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.\n\n\n\n\n2.1.2.2 Federation Configuration\n#\n\n\nIf the SP is part of any identity federation such as InCommon Federation, then the administrator must add the federation as a SP in Gluu Server. This will allow the administrator to add SPs under the federation easily from a TR. The requirement of a federation TR created using the general TR is a must. The example below shows an administrator adding a TR for InCommon Federation.\n\n\n\n\nOnce this is done, the SPs under the federation can be added by selecting the Federation from the \nFederation Name\n drop down menu and selecting the entity-id for the SP.\n\n\n\n\n2.2 Inbound SAML\n#\n\n\nGluu Server uses an open source product called Asimba to achieve inbound SAML. Asimba allows websites to use a single IDP for SSO even when the organization has multiple trusted IDPs. Please see the \nAsimba website\n for more information.\n\n\nGluu Server CE makes Asimba configuration easy from the oxTrust admin interface. This section provides a step-by-step method of configuring Asimba with two (2) IDPs and a single SP. The administrator can add multiple IDPs or SPs if required using the same method. However, it is mandatory that all the SPs and IDPs are connected to the Asimba server, or the IDP that has the Asimba module enabled.\n\n\n2.2.1 Required Setup\n#\n\n\n\n\n\n\n\n\nSetup hostname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://sp.gluu.org\n\n\nThis is a shibboleth SP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\nhttps://test.gluu.org\n\n\nThis is a Gluu Server SAML IdP with Asimba\n\n\n\n\n\n\nhttps://nest.gluu.org\n\n\nThis is a second Gluu Server SAML IdP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIdeally all SPs and IdPs should be connected to Asimba server.\n\n\n\n\n2.2.2 Adding IDP in Asimba Server\n#\n\n\n\n\n\n\nLog into the oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> Idp\n\n\n\n\n\n\n\n\n\n\nClick on 'Add IDP' button\n\n\n\n\n\n\n\n\n\n\nFill up the form with the information below:\n\n\n\n\n\n\nID: The entityID of the remote ID/ADFS \n\n\n\n\nExample: \nhttps:<hostname_of_gluu_server>/idp/shibboleth\n  \n\n\n\n\n\n\n\n\nFriendly Name: There is no particular format for this field, use anything \n\n\n\n\n\n\nMetadata URL: Keep it blank, we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Keep it as it is. \n\n\n\n\n\n\nMetadata File: Download metadata of remote IDP/ADFS and upload that XML file. \n\n\n\n\nExample: The metadata for Gluu IdP can be downloaded using \nwget -c https:<hostname_of_gluu_server>/idp/shibboleth\n\n\n\n\n\n\n\n\nTrust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 certificate\n\n\n\n\nExample: You will get the SAML certificate from Gluu Server's metadata link or available inside \n/etc/certs/shibIDP.crt\n\n\n\n\n\n\n\n\nNameIDFormat: SAML2 URI nameID format if remote IDP is a Gluu Server otherwise ask for their nameID format.\n\n\n\n\nExample: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'\n\n\n\n\n\n\n\n\n\n\n\n\nRestart tomcat service using this command \nservice tomcat restart\n\n\n\n\n\n\n\n\n2.2.3 Adding SP in Asimba Server\n#\n\n\n\n\n\n\nLog into oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> SP Requestor\n\n\n\n\n\n\n\n\n\n\nClick on 'Add SP Requestor'\n\n\n\n\n\n\n\n\n\n\nPlease fill up the form with the information below:\n\n\n\n\n\n\nID: The entityID of SP\n\n\n\n\nExample: Shibboleth SP entityID: \nhttps://sp.gluu.org/shibboleth\n\n\n\n\n\n\n\n\nFriendly Name: Anything is fine\n\n\n\n\n\n\nMetadata URL: Keep it blank; we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Keep it as it is\n\n\n\n\n\n\nMetadata File: Upload SP metadata ( xml file )\n\n\n\n\n\n\nTrust Certificate File: Upload SAML cert from SP\n\n\n\n\n\n\n\n\n\n\nRestart tomcat service using this command \nservice tomcat restart\n\n\n\n\n\n\n\n\n2.2.4 Adding Selectors in Asimba Server\n#\n\n\nhis feature will allow you 'automatically' select specific IDP for specific SP. As for example: If OrgA has SP 'orgASP.gluu.org' and 'orgAIDP.gluu.org' respectively and if you configure selector for 'orgASP.gluu.org' \u2013> 'orgAIDP.gluu.org', then after whenever user will go to 'orgASP.gluu.org', your Gluu Server Asimba will automatically forward user to 'orgAIDP.gluu.org' for authentication.\n\n\n\n\n\n\nLog into oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> Selectors\n\n\n\n\n\n\n\n\n\n\nClick on the 'Add Selector' button\n\n\n\n\n\n\n* Select SP Requestor: Select your desired SP from drop down menu\n\n* Select IDP : Select your desired IDP from drop down menu\n\n\n\n\n\n\n\nClick on the 'Update' button\n\n\n\n\n\n\nRestart tomcat service using this command \nservice tomcat restart\n\n\n\n\n\n\n\n\n2.2.5 Attribute Handling\n#\n\n\noxAsimba will transact all kind of attributes whichever authentication server ( remote IDP/ADFS ) can release to SP. By default this feature is not enabled.\n\n\n\n\nGluu Server administrator needs to add \n<attribute name=\u201c*\u201d />\n inside \nattributerelease class\n in the \nasimba.xml\n file under \n/opt/tomcat/webapps/asimba/WEB-INF/conf\n folder\n\n\n\n\n         <attributerelease class=\"com.alfaariss.oa.engine.attribute.release.configuration.ConfigurationFactory\">\n                <policy id=\"asimba.releasepolicy.1\" friendlyname=\"Default Attribute Release policy\" enabled=\"true\">\n                        <attribute name=\"firstname\" />\n                        <attribute name=\"lastname\" />\n                        <attribute name=\"email\" />\n                        <attribute name=\"role\" />\n                        <attribute name=\"*\" />\n                </policy>\n        </attributerelease> \n\n\n\n\n\n\nUncomment \nattributegatherer\n part\n\n\n\n\n <gather>\n  <attribute name=\"whitelist-attribute-name\" />\n </gather> \n\n\n\n\n\n\nRestart tomcat service:\nservice tomcat restart\n from Gluu Server container",
            "title": "2. Authentication Protocol"
        },
        {
            "location": "/admin-guide/authentication-protocol/#authentication-protocol-in-gluu-server",
            "text": "Gluu Server supports Security Assertion Markup Language (SAML) and OpenID Connect protocols to authenticate users against Service Providers (SPs) and Requesting Parties (RPs). There are two different flows of SAML known as outbound SAML and inbound SAML, both supported out-of-the-box in Gluu Server Community Edition (Gluu CE).",
            "title": "Authentication Protocol in Gluu Server"
        },
        {
            "location": "/admin-guide/authentication-protocol/#21-outbound-saml",
            "text": "Outbound SAML can also be called SP-initiated Single Sign On (SSO) or traditional SAML. In an outbound SAML transaction, the SP redirects the user to the designated Identity Provider (IDP) for authentication and authorization. The IDP will ask for the username and password for the user and up on successful authentication, the user is sent back to the SP logged in. The requirement for the IDP is a trust relationship (TR) set up beforehand with the SP. The next section covers how to set up a TR in Gluu Server.  2.1.1 Trust Relationship Requirements #  Trust Relationship creation is easy in Gluu Server from the oxTrust GUI. The following information is necessary to create TR.   Metadata of website  Required attribute of website  SSO testing endpoint of website   2.1.1.1 Metadata of the SP #  Metadata is a XML file which has configuration data used to provision any\nwebsite (SP) or IDP (Gluu Server) to communicate with each other. It is\ninterchangeable between the IDP and the SP.  Websites (SP) can provide metadata via URL or as a separate file. If the\nSP provides an separate XML file, the Gluu Server can check the\nintegrity of that metadata with its own mechanism. This mechanism can be\nshown and tested from Gluu Server oxTrust GUI.  2.1.1.2 Required Attributes #  Every organization has their own policy to release/share attributes with\nany IDP or SP. The oxTrust GUI supports both preconfigured and custom attribute\nRelease to the SP. The administrator only needs to click on the desired \nattribute and it will be released to the SP.  2.1.1.3 SSO Testing Endpoint #  Every website (SP) should have both a staging and a production uri\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.  2.1.2 Create a Trust Relationship #   Go to SAML \u2192 Trust Relationships  Click on \u201cAdd Relationship\u201d     A new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.     Display Name : Name of the Trust Relationship (it should be unique for every trust relationship)  Description : Little description. Purpose and SSO link can be added here.  Metadata Type : Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server  File : If SP has uploadable metadata in XML format, this option works best.  URI : If the metadata of SP has URI link and accessible from the internet, Gluu Server Administrator can use this option.    Released : The attributes that are required for the SP must be in this pane. The required attributes can be selected from the left side pane with the heading \u201cRelease Additional Attributes\u201d.\nThe TR is added by clicking on the  Add  button located in the lower left side of the page.   2.1.2.1 Relying Party Configuration #  The Relying Party must be configured for some SPs. The relying party configuration is accessible on the TR Creation page. The checkbox  Configure specific Relying Party  must be checked.   The checkbox will result in a link which can be accessed to configure relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.   2.1.2.2 Federation Configuration #  If the SP is part of any identity federation such as InCommon Federation, then the administrator must add the federation as a SP in Gluu Server. This will allow the administrator to add SPs under the federation easily from a TR. The requirement of a federation TR created using the general TR is a must. The example below shows an administrator adding a TR for InCommon Federation.   Once this is done, the SPs under the federation can be added by selecting the Federation from the  Federation Name  drop down menu and selecting the entity-id for the SP.",
            "title": "2.1 Outbound SAML"
        },
        {
            "location": "/admin-guide/authentication-protocol/#22-inbound-saml",
            "text": "Gluu Server uses an open source product called Asimba to achieve inbound SAML. Asimba allows websites to use a single IDP for SSO even when the organization has multiple trusted IDPs. Please see the  Asimba website  for more information.  Gluu Server CE makes Asimba configuration easy from the oxTrust admin interface. This section provides a step-by-step method of configuring Asimba with two (2) IDPs and a single SP. The administrator can add multiple IDPs or SPs if required using the same method. However, it is mandatory that all the SPs and IDPs are connected to the Asimba server, or the IDP that has the Asimba module enabled.  2.2.1 Required Setup #     Setup hostname  Description      https://sp.gluu.org  This is a shibboleth SP connected to  https://test.gluu.org    https://test.gluu.org  This is a Gluu Server SAML IdP with Asimba    https://nest.gluu.org  This is a second Gluu Server SAML IdP connected to  https://test.gluu.org      Note  Ideally all SPs and IdPs should be connected to Asimba server.   2.2.2 Adding IDP in Asimba Server #    Log into the oxTrust interface    Navigate to SAML --> Idp      Click on 'Add IDP' button      Fill up the form with the information below:    ID: The entityID of the remote ID/ADFS    Example:  https:<hostname_of_gluu_server>/idp/shibboleth        Friendly Name: There is no particular format for this field, use anything     Metadata URL: Keep it blank, we will upload metadata    Metadata Timeout: Keep it as it is.     Metadata File: Download metadata of remote IDP/ADFS and upload that XML file.    Example: The metadata for Gluu IdP can be downloaded using  wget -c https:<hostname_of_gluu_server>/idp/shibboleth     Trust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 certificate   Example: You will get the SAML certificate from Gluu Server's metadata link or available inside  /etc/certs/shibIDP.crt     NameIDFormat: SAML2 URI nameID format if remote IDP is a Gluu Server otherwise ask for their nameID format.   Example: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'       Restart tomcat service using this command  service tomcat restart     2.2.3 Adding SP in Asimba Server #    Log into oxTrust interface    Navigate to SAML --> SP Requestor      Click on 'Add SP Requestor'      Please fill up the form with the information below:    ID: The entityID of SP   Example: Shibboleth SP entityID:  https://sp.gluu.org/shibboleth     Friendly Name: Anything is fine    Metadata URL: Keep it blank; we will upload metadata    Metadata Timeout: Keep it as it is    Metadata File: Upload SP metadata ( xml file )    Trust Certificate File: Upload SAML cert from SP      Restart tomcat service using this command  service tomcat restart     2.2.4 Adding Selectors in Asimba Server #  his feature will allow you 'automatically' select specific IDP for specific SP. As for example: If OrgA has SP 'orgASP.gluu.org' and 'orgAIDP.gluu.org' respectively and if you configure selector for 'orgASP.gluu.org' \u2013> 'orgAIDP.gluu.org', then after whenever user will go to 'orgASP.gluu.org', your Gluu Server Asimba will automatically forward user to 'orgAIDP.gluu.org' for authentication.    Log into oxTrust interface    Navigate to SAML --> Selectors      Click on the 'Add Selector' button    * Select SP Requestor: Select your desired SP from drop down menu\n\n* Select IDP : Select your desired IDP from drop down menu    Click on the 'Update' button    Restart tomcat service using this command  service tomcat restart     2.2.5 Attribute Handling #  oxAsimba will transact all kind of attributes whichever authentication server ( remote IDP/ADFS ) can release to SP. By default this feature is not enabled.   Gluu Server administrator needs to add  <attribute name=\u201c*\u201d />  inside  attributerelease class  in the  asimba.xml  file under  /opt/tomcat/webapps/asimba/WEB-INF/conf  folder            <attributerelease class=\"com.alfaariss.oa.engine.attribute.release.configuration.ConfigurationFactory\">\n                <policy id=\"asimba.releasepolicy.1\" friendlyname=\"Default Attribute Release policy\" enabled=\"true\">\n                        <attribute name=\"firstname\" />\n                        <attribute name=\"lastname\" />\n                        <attribute name=\"email\" />\n                        <attribute name=\"role\" />\n                        <attribute name=\"*\" />\n                </policy>\n        </attributerelease>    Uncomment  attributegatherer  part    <gather>\n  <attribute name=\"whitelist-attribute-name\" />\n </gather>    Restart tomcat service: service tomcat restart  from Gluu Server container",
            "title": "2.2 Inbound SAML"
        }
    ]
}