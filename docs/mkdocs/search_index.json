{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Community Edition (CE) Docs\n\n\nIntroduction\n\n\nLicense\n\n\n\n\n\n\nHistory\n\n\nVersions 1 and 2\n\n\nVersion 3\n\n\nEnter OAuth2\n\n\n\n\n\n\nDesign Goals\n\n\nFree Open Source Identity Suite\n\n\nSupport most promising open standards\n\n\nLeverage existing business processes\n\n\nFree license\n\n\nWrite as a last resort\n\n\nNot just comprehensive, but easy to use\n\n\nHorizontal scalability\n\n\nExtreme flexibility\n\n\n\n\n\n\nArchitecture\n\n\nJ2EE Servlet container\n\n\nApache HTTP front end web server\n\n\nLDAP for Persistence\n\n\nWeb container plugins\n\n\n\n\n\n\n\n\n\n\nGluu Server Community Edition (CE) Docs\n#\n\n\nGluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.\n\n\nPrimarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation\n\n\nThe code is open source, and available on \nGithub\n.\n\n\nCommunity support can be enlisted on the \nGluu support site\n. If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of \nVIP support\n options.\n\n\nIntroduction\n#\n\n\nThe Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.\n\n\nLicense\n#\n\n\nAny software published by Gluu in the OX Project is under the \nMIT License\n.\nThe third party components have separate licenses.\n\n\n\n\n\n\n\n\nComponent\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nShibboleth\n\n\nApache2\n\n\n\n\n\n\nOpenDJ\n\n\nCDDL-1.0\n\n\n\n\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\n\n\n\n\nJagger\n\n\nMIT License\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGluu maintains a fork of OpenDJ 3 in \nour Github\n.\n\n\n\n\nHistory\n#\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.\n\n\nVersions 1 and 2\n#\n\n\nVersions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.\n\n\nVersion 3\n#\n\n\nThe first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.\n\n\nEnter OAuth2\n#\n\n\nOAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for\n\nIDCubed\n. This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.\n\n\nDesign Goals\n#\n\n\nAt OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux.\n\n\nFree Open Source Identity Suite\n#\n\n\nOne of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.\n\n\nSupport most promising open standards\n#\n\n\nThe goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.\n\n\nLeverage existing business processes\n#\n\n\nWhere possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.\n\n\nFree license\n#\n\n\nThe components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.\n\n\nWrite as a last resort\n#\n\n\nUse the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!\n\n\nNot just comprehensive, but easy to use\n#\n\n\nThe Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.\n\n\nHorizontal scalability\n#\n\n\nSystem administrators should be able to add more servers to make the \nGluu Server scale as much as needed.\n\n\nExtreme flexibility\n#\n\n\nAs Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.\n\n\nArchitecture\n#\n\n\nThere are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.\nFollowing is a list of the technical components that comprise the Gluu Server.\n\n\nJ2EE Servlet container\n#\n\n\nMost of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.\n\n\nApache HTTP front end web server\n#\n\n\nAlthough there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content. \n\n\nLDAP for Persistence\n#\n\n\nLDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.\n\n\nWeb container plugins\n#\n\n\nToday, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.\n\n\nWeb agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.\n\n\nIf developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-community-edition-ce-docs",
            "text": "Gluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.  Primarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation  The code is open source, and available on  Github .  Community support can be enlisted on the  Gluu support site . If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of  VIP support  options.",
            "title": "Gluu Server Community Edition (CE) Docs"
        },
        {
            "location": "/#introduction",
            "text": "The Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.",
            "title": "Introduction"
        },
        {
            "location": "/#license",
            "text": "Any software published by Gluu in the OX Project is under the  MIT License .\nThe third party components have separate licenses.     Component  License      Shibboleth  Apache2    OpenDJ  CDDL-1.0    Asimba  GNU APGL 3.0    Jagger  MIT License      Note  Gluu maintains a fork of OpenDJ 3 in  our Github .",
            "title": "License"
        },
        {
            "location": "/#history",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.",
            "title": "History"
        },
        {
            "location": "/#versions-1-and-2",
            "text": "Versions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.",
            "title": "Versions 1 and 2"
        },
        {
            "location": "/#version-3",
            "text": "The first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.",
            "title": "Version 3"
        },
        {
            "location": "/#enter-oauth2",
            "text": "OAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for IDCubed . This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "Enter OAuth2"
        },
        {
            "location": "/#design-goals",
            "text": "At OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux.",
            "title": "Design Goals"
        },
        {
            "location": "/#free-open-source-identity-suite",
            "text": "One of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.",
            "title": "Free Open Source Identity Suite"
        },
        {
            "location": "/#support-most-promising-open-standards",
            "text": "The goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.",
            "title": "Support most promising open standards"
        },
        {
            "location": "/#leverage-existing-business-processes",
            "text": "Where possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.",
            "title": "Leverage existing business processes"
        },
        {
            "location": "/#free-license",
            "text": "The components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.",
            "title": "Free license"
        },
        {
            "location": "/#write-as-a-last-resort",
            "text": "Use the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!",
            "title": "Write as a last resort"
        },
        {
            "location": "/#not-just-comprehensive-but-easy-to-use",
            "text": "The Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.",
            "title": "Not just comprehensive, but easy to use"
        },
        {
            "location": "/#horizontal-scalability",
            "text": "System administrators should be able to add more servers to make the \nGluu Server scale as much as needed.",
            "title": "Horizontal scalability"
        },
        {
            "location": "/#extreme-flexibility",
            "text": "As Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "Extreme flexibility"
        },
        {
            "location": "/#architecture",
            "text": "There are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.\nFollowing is a list of the technical components that comprise the Gluu Server.",
            "title": "Architecture"
        },
        {
            "location": "/#j2ee-servlet-container",
            "text": "Most of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.",
            "title": "J2EE Servlet container"
        },
        {
            "location": "/#apache-http-front-end-web-server",
            "text": "Although there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content.",
            "title": "Apache HTTP front end web server"
        },
        {
            "location": "/#ldap-for-persistence",
            "text": "LDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.",
            "title": "LDAP for Persistence"
        },
        {
            "location": "/#web-container-plugins",
            "text": "Today, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.  Web agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.  If developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Web container plugins"
        },
        {
            "location": "/installation-guide/",
            "text": "1 Preparing VM for Gluu Server Installation\n#\n\n\nGluu Server Community Edition (CE) resource allocation depends on the backend data size. The requirements below are a bare minimum for Gluu CE to function properly. It is strongly recommended to allocate more resource for bigger backend data size.\n\n\n\n\n\n\n\n\nCPU Unit\n\n\nRAM\n\n\nDisk Space\n\n\nProcessor Type\n\n\n\n\n\n\n\n\n\n\n2\n\n\n4GB\n\n\n40GB\n\n\n64 Bit\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe processor type must be 64 bit for Gluu Server to function\n\n\n\n\n\n\nNote\n\n\nInsufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.\n\n\n\n\n1.1 Port\n#\n\n\nThe following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.\n\n\n\n\n\n\n\n\nPort Number\n\n\nProtocol\n\n\n\n\n\n\n\n\n\n\n80\n\n\ntcp\n\n\n\n\n\n\n443\n\n\ntcp\n\n\n\n\n\n\n\n\n1.2 Tomcat Memory Heap\n#\n\n\nThe minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). This estimate is based on the minumum RAM requirements. It is best to keep this ratio when tomcat memory is allocated in production environments as the size will depend on the available RAM; as an example, a 6GB tomcat memory heap in a production server with 8 GB ram is ideal for a small organization running Gluu CE.\n\n\n1.2.1 Alter Tomcat Memory Heap\n#\n\n\nThe tomcat heap memory is set from the \nsetup.py\n script prompt. \n\n\n\nThis property can also altered from the \n/opt/tomcat/conf/gluuTomcatWrapper.conf\n file inside the Gluu Server chroot container setting \nwrapper.java.initmemory\n and \nwrapper.java.maxmemory\n properties.\nUse the following command to open the gluuTomcatWrapper file\n\n\n# vi /opt/tomcat/conf/gluuTomcatWrapper.conf\n\n\n\n\nPlease change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.\n\n\n# Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536\n\n\n\n\n1.3 File Descriptor\n#\n\n\nGluu recommends setting the \nfile descriptors\n to 65k for Gluu Server CE. The following steps will help set the \nfile descriptor\n limit.\n\n\n\n\nEdit the \n/etc/security/limits.conf\n file.\n\n\nAdd the following lines in the \nlimits.conf\n file. Please replace the \nusername\n with the user that will install Gluu Server.\n\n\n\n\n* soft nofile 65536\n* hard nofile 262144\n\n\n\n\n\n\nEdit the \n/etc/pam.d/login\n by adding the line:\n\n\n\n\nsession required pam_limits.so\n\n\n\n\n\n\nUse the system file limit to increase the file descriptor limit to 65535. The system file limit is set in \n/proc/sys/fs/file-max\n.\n\n\n\n\necho 65535 > /proc/sys/fs/file-max\n\n\n\n\n\n\nUse the \nulimit\n command to set the file descriptor limit to the hard limit specified in \n/etc/security/limits.conf\n.\n\n\n\n\nulimit -n unlimited\n\n\n\n\n\n\nRestart your system.\n\n\n\n\n1.4 Cloud Specific Instructions\n#\n\n\n1.4.1 Amazon AWS\n#\n\n\nAmazon AWS provides a public and private IP address to its clouds. While\nrunning the \n/install/community-edition-setup/setup.py\n script, use the\nPrivate IP address.\n\n\n1.4.2 Microsoft Azure\n#\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. \n\n\n1.4.2.1 Setting up VM\n#\n\n\n\n\n\n\nLog into Windows Azure Administrative Panel\n\n\n\n\n\n\nClick on \nVirtual Machines\n tab, and click \nCreate a Virtual Machine\n link\n\n\n\n\n\n\nFrom the menu, choose \nCompute\n --> \nVirtual Machine\n --> \nFrom Gallery\n branch.\n\n\n\n\n\n\nChoose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.\n\n\n\n\n\n\nProvide a name for the VM in the \nVirtual Machine Name\n field and use\n\nStandard\n for \nTier\n.\n\n\n\n\n\n\nSelect at least \nA2\n variant equipped with 3.5GB RAM in the \nSize\n\ndropdown menu.\n\n\n\n\n\n\nProvide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click \nNext\n.\n\n\n\n\n\n\nCreate a new cloud service and select \nNone\n for \nAvailability Set\n\n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click \nNext\n.\n\n\n\n\n\n\nChoose not to install \nVM Agent\n and click the \ntick\n button to\n   finalize the VM.\n\n\n\n\n\n\nGo to the \nDashboard\n tab of VM Management Panel and copy the \nDNS\n    Name\n. This is the name that is used to access the Gluu Server.\n\n\n\n\n\n\nSSH into the VM and install the Gluu Server. See our \nInstallation Guide\n for\n    installation instructions.\n\n\n\n\n\n\n1.4.2.2 Setup.py Configuration\n#\n\n\nThis section describes what to put in the prompt when \nsetup.py\n is run\nafter installing Gluu Server.\n\n\n\n\n\n\nIP Address: Do not change the default IP address; just press \nenter\n.\n\n\n\n\n\n\nhostname: Use the DNS name that was copied from the `VM Management Panel.\n\n\n\n\n\n\nUpdate hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file \n/etc/sysconfig/networking\n, and add the full DNS name.\n\n\n\n\n\n\nNow the chosen DNS name can be used to access the Gluu Server.\n\n\n\n\n\n\n1.4.3 Linode VM\n#\n\n\nThe Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.\n\n\n\n\nCheck for the current version of the kernel. If the output contains \n-Linode\n, then proceed\n\n\n\n\n# uname -a\n\n\n\n\n\n\nRun the following command to update the kernel\n\n\n\n\n# apt-get install linux-image-virtual grub2\n\n\n\n\n\n\nModify \ngrub\n file in the \n/etc/default/\n folder\n\n\n\n\n# vim /etc/default/grub\n\n\n\n\n\n\nEnsure that the following lines are present in the grub file\n\n\n\n\nGRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"\n\n\n\n\n\n\nFinally run the following commands to update \ngrub\n and reboot\n\n\n\n\n# update-grub\n# reboot",
            "title": "Preparing VM"
        },
        {
            "location": "/installation-guide/#1-preparing-vm-for-gluu-server-installation",
            "text": "Gluu Server Community Edition (CE) resource allocation depends on the backend data size. The requirements below are a bare minimum for Gluu CE to function properly. It is strongly recommended to allocate more resource for bigger backend data size.     CPU Unit  RAM  Disk Space  Processor Type      2  4GB  40GB  64 Bit      Warning  The processor type must be 64 bit for Gluu Server to function    Note  Insufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.",
            "title": "1 Preparing VM for Gluu Server Installation"
        },
        {
            "location": "/installation-guide/#11-port",
            "text": "The following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.     Port Number  Protocol      80  tcp    443  tcp",
            "title": "1.1 Port"
        },
        {
            "location": "/installation-guide/#12-tomcat-memory-heap",
            "text": "The minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). This estimate is based on the minumum RAM requirements. It is best to keep this ratio when tomcat memory is allocated in production environments as the size will depend on the available RAM; as an example, a 6GB tomcat memory heap in a production server with 8 GB ram is ideal for a small organization running Gluu CE.  1.2.1 Alter Tomcat Memory Heap #  The tomcat heap memory is set from the  setup.py  script prompt.   This property can also altered from the  /opt/tomcat/conf/gluuTomcatWrapper.conf  file inside the Gluu Server chroot container setting  wrapper.java.initmemory  and  wrapper.java.maxmemory  properties.\nUse the following command to open the gluuTomcatWrapper file  # vi /opt/tomcat/conf/gluuTomcatWrapper.conf  Please change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.  # Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536",
            "title": "1.2 Tomcat Memory Heap"
        },
        {
            "location": "/installation-guide/#13-file-descriptor",
            "text": "Gluu recommends setting the  file descriptors  to 65k for Gluu Server CE. The following steps will help set the  file descriptor  limit.   Edit the  /etc/security/limits.conf  file.  Add the following lines in the  limits.conf  file. Please replace the  username  with the user that will install Gluu Server.   * soft nofile 65536\n* hard nofile 262144   Edit the  /etc/pam.d/login  by adding the line:   session required pam_limits.so   Use the system file limit to increase the file descriptor limit to 65535. The system file limit is set in  /proc/sys/fs/file-max .   echo 65535 > /proc/sys/fs/file-max   Use the  ulimit  command to set the file descriptor limit to the hard limit specified in  /etc/security/limits.conf .   ulimit -n unlimited   Restart your system.",
            "title": "1.3 File Descriptor"
        },
        {
            "location": "/installation-guide/#14-cloud-specific-instructions",
            "text": "1.4.1 Amazon AWS #  Amazon AWS provides a public and private IP address to its clouds. While\nrunning the  /install/community-edition-setup/setup.py  script, use the\nPrivate IP address.  1.4.2 Microsoft Azure #  Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started.   1.4.2.1 Setting up VM #    Log into Windows Azure Administrative Panel    Click on  Virtual Machines  tab, and click  Create a Virtual Machine  link    From the menu, choose  Compute  -->  Virtual Machine  -->  From Gallery  branch.    Choose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.    Provide a name for the VM in the  Virtual Machine Name  field and use Standard  for  Tier .    Select at least  A2  variant equipped with 3.5GB RAM in the  Size \ndropdown menu.    Provide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click  Next .    Create a new cloud service and select  None  for  Availability Set \n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click  Next .    Choose not to install  VM Agent  and click the  tick  button to\n   finalize the VM.    Go to the  Dashboard  tab of VM Management Panel and copy the  DNS\n    Name . This is the name that is used to access the Gluu Server.    SSH into the VM and install the Gluu Server. See our  Installation Guide  for\n    installation instructions.    1.4.2.2 Setup.py Configuration #  This section describes what to put in the prompt when  setup.py  is run\nafter installing Gluu Server.    IP Address: Do not change the default IP address; just press  enter .    hostname: Use the DNS name that was copied from the `VM Management Panel.    Update hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file  /etc/sysconfig/networking , and add the full DNS name.    Now the chosen DNS name can be used to access the Gluu Server.    1.4.3 Linode VM #  The Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.   Check for the current version of the kernel. If the output contains  -Linode , then proceed   # uname -a   Run the following command to update the kernel   # apt-get install linux-image-virtual grub2   Modify  grub  file in the  /etc/default/  folder   # vim /etc/default/grub   Ensure that the following lines are present in the grub file   GRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"   Finally run the following commands to update  grub  and reboot   # update-grub\n# reboot",
            "title": "1.4 Cloud Specific Instructions"
        },
        {
            "location": "/installation-guide/install/",
            "text": "2 Install Gluu Server\n#\n\n\nGluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the \napt-get\n or \nyum install\n command.\n\n\n2.1 Ubuntu\n#\n\n\n2.1.1 Ubuntu Server 14.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\nGluu Server Status\n\n\n/etc/init.d/gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhile entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.2 Ubuntu Server 16.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nXenial Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\nGluu Server Status\n\n\n/etc/init.d/gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhile entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\nGluu Server Status\n\n\n/etc/init.d/gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n2.1.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.2 CentOS\n#\n\n\n2.2.1 CentOS 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.2 CentOS 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\nGluu Server Status\n\n\nservice gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\nGluu Server Status\n\n\n/sbin/gluu-serverd-2.4.4 status\n\n\n\n\n\n\n\n\n2.2.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.3 Red Hat Enterprise Linux (RHEL)\n#\n\n\n2.3.1 RHEL 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.2 RHEL 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The commands are different in RHEL 6.x and RHEL 7\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.3.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.4 Debian 8 (Jessie)\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/debian/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.4.1 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder.\n\n Log into Gluu Server \nchroot\n\n\n Run the setup script\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.4.2 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*",
            "title": "Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#2-install-gluu-server",
            "text": "Gluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the  apt-get  or  yum install  command.",
            "title": "2 Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#21-ubuntu",
            "text": "2.1.1 Ubuntu Server 14.04 #  The following commands will install Gluu Server  chroot     Command Description  Trusty Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4    Gluu Server Status  /etc/init.d/gluu-server-2.4.4 status      Note   While entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.  Please see section 2.1.3 to complete installation.  2.1.2 Ubuntu Server 16.04 #  The following commands will install Gluu Server  chroot     Command Description  Xenial Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4    Gluu Server Status  /etc/init.d/gluu-server-2.4.4 status      Note   While entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.  Please see section 2.1.3 to complete installation.  2.1.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.   Log into Gluu Server  chroot  Run the setup script      Command Description  Trusty & Xenial Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py    Gluu Server Status  /etc/init.d/gluu-server-2.4.4 status     2.1.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Trusty & Xenial Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.1 Ubuntu"
        },
        {
            "location": "/installation-guide/install/#22-centos",
            "text": "2.2.1 CentOS 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  CentOS 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.2 CentOS 7.2 #  The following commands will install Gluu Server  chroot     Command Description  CentOS 7.2      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2   Log into Gluu Server  chroot  Run the setup script      Command Description  CentOS 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py    Gluu Server Status  service gluu-server-2.4.4 status        Command Description  CentOS 7.2      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py    Gluu Server Status  /sbin/gluu-serverd-2.4.4 status     2.2.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.     Command Description  CentOS 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  CentOS 7.2      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.2 CentOS"
        },
        {
            "location": "/installation-guide/install/#23-red-hat-enterprise-linux-rhel",
            "text": "2.3.1 RHEL 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  RHEL 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.2 RHEL 7.2 #  The following commands will install Gluu Server  chroot     Command Description  RHEL 7      Add Gluu Repository  wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The commands are different in RHEL 6.x and RHEL 7   Log into Gluu Server  chroot  Run the setup script      Command Description  RHEL 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py        Command Description  RHEL 7      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.3.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.     Command Description  RHEL 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  RHEL 7      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.3 Red Hat Enterprise Linux (RHEL)"
        },
        {
            "location": "/installation-guide/install/#24-debian-8-jessie",
            "text": "The following commands will install Gluu Server  chroot     Command Description  Jessie Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/debian/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     2.4.1 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder.  Log into Gluu Server  chroot   Run the setup script     Command Description  Jessie Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.4.2 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Jessie Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.4 Debian 8 (Jessie)"
        },
        {
            "location": "/installation-guide/setup_py/",
            "text": "2.5.1 Setup Prompt\n#\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate as well as the IP Address and the hostname for the Gluu Server. The prompt is given below.\n\n\nEnter IP Address [192.168.122.60] :\nEnter hostname [localhost] : centos.gluu.info\nEnter your city or locality : Austin\nEnter your state or province two letter code : TX\nEnter two letter Country Code : US\nEnter Organization Name : Gluu\nEnter email address for support at your organization : support@gluu.org\nEnter maximum RAM for tomcat in MB [3072] :\nOptional: enter password for oxTrust and LDAP superuser [hlE3vzf0hMdD] :\nInstall oxAuth OAuth2 Authorization Server? [Yes] :\nInstall oxTrust Admin UI? [Yes] :\nInstall Gluu OpenDJ LDAP Server? [Yes] :\nInstall Apache HTTPD Server [Yes] :\nInstall Shibboleth SAML IDP? [No] :\nInstall Asimba SAML Proxy? [No] :\nInstall CAS? [No] :\nInstall oxAuth RP? [No] :\n\n\n\n\nIt is recommended to use \nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n for IP address. \nIf you are not using a resolvable DNS host, you will need to add the hostname to your hosts file on the server which is running your browser. Login with the default user name \nadmin\n and the password printed back in the confirmation (also contained in \nsetup.properties.last\n (use the Unix command \ngrep --color -i pass\n to find the according line quickly) and look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt setup.properties.last It has the clear text passwords for everything: \nLDAP, admin user, keystores, and 3DES salt\n. If something goes wrong, check \nsetup.log\n for a detailed step-by-step of the installation. As an alternative you may check the file \nsetup_errors.log\n to just see the errors (or stderr output from the scripts).\n\n\n\n\nWarning\n\n\nUse a FQDN (fully qualified domain name) as hostname and refrain from using 127.0.0.1 as IP address\n\n\n\n\n2.5.2 Script Command Line Options\n#\n\n\nThe \nsetup.py\n script can be used to configure your Gluu Server and to add initial data\nfor oxAuth and oxTrust to start. If \nsetup.properties\n is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.\n\n\nThe administrator can use the following command line options to include additional components:\n\n\n\n\n-a\n install Asimba\n\n\n-c\n install CAS\n\n\n-d\n specify the directory where community-edition-setup is located. Defaults to '.'\n\n\n-f\n specify \nsetup.properties\n file\n\n\n-h\n invoke this help\n\n\n-l\n install LDAP\n\n\n-n\n no interactive prompt before install starts. Run with \n-f\n\n\n-N\n no Apache httpd server\n\n\n-s\n install the Shibboleth IDP\n\n\n-u\n update hosts file with IP address/hostname\n\n\n-w\n get the development head war files\n\n\n\n\nExample Command: \n# ./setup.py -cas\n This command will install Gluu Server with CAS, Asimba and Shibboleth IDP.",
            "title": "Setup Script Options"
        },
        {
            "location": "/installation-guide/cluster/",
            "text": "Cluster with Gluu CE\n#\n\n\nIt is possible to setup a cluster of servers with Gluu Server CE. This page outlines the setup process of a cluster with two (2) nodes. It is possible to add more nodes, but it is recommened to contact Gluu for higher level solutions.\n\n\nDesign\n#\n\n\nThe following diagram outlines the design of the cluster.\n\n\n\nRequirements\n#\n\n\nFor complete deployment requirements and instructions, please see the \nDeployment Page\n.\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs. Please remember that the requirements from the deployment page will apply as well.\n\n\n\n\n\n\n\n\nNumber of VMs\n\n\nCPU Units\n\n\nRAM\n\n\nRoot Partion\n\n\nPort Requirements\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2 CPU ea.\n\n\n8 GB\n\n\n40 GB\n\n\n4444 and 8989 (LDAP replication), 30865 (file system syncing)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nFor convenience, the nodes are identified as \nhost-1\n and \nhost-1\n\n\n\n\nCsync2 Installation\n#\n\n\nCentOS 6.x\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nInstall epel-release-latest by running \nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n\n\n\n\n\n\nInstall \ncsync2\n package by running \nyum install csync2\n\n\n\n\n\n\nCentOS 7.x\n#\n\n\nOn the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources. \n\n\nBelow are the steps:\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nEnable epel-release repo: \n# yum install epel-release\n\n\n\n\n\n\nInstall compiler and development environment: \n# yum group install \"Development Tools\"\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# yum install librsync-devel\n\n\n\n\n\n\n# yum install gnutls-devel\n\n\n\n\n\n\n# yum install sqlite-devel\n\n\n\n\n\n\n\n\n\n\n# mkdir building_csync && cd building_csync/\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/usr/local/etc/csync2/\n directory for storing configuration (for convenience): \n# ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install\n. Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!\n\n\n\n\n\n\nUbuntu 14.x (compiling from sources)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# apt-get install pkg-config\n\n\n\n\n\n\n# apt-get install libsqlite-dev\n\n\n\n\n\n\n# apt-get install libsqlite3-dev\n\n\n\n\n\n\n# apt-get install librsync-dev\n\n\n\n\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/etc/csync2/\n directory for storing configuration and \n/usr/sbin\n directory for executables (for convenience): \n./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install\n\n\n\n\n\n\nUbuntu 14.x (from repo)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nRun \napt-get install csync2\n\n[TOC]\n\n\n\n\n\n\nPreparing VMs\n#\n\n\n\n\nInstall Gluu CE following the \nDeployment Page\n in \nhost-1\n\n\n\n\n\n\nNote\n\n\nThe following step must be done right after initial installation of the Gluu CE Package but before finalizing the setup by running the \nsetup.py\n script.\n\n\n\n\n\n\n\n\nCopy the \nsetup.properties.last\n file that is generated afther finalizing the installation of Gluu CE on \nhost-1\n and paste it in the \n/install/community-edition-setup/\n folder inside the \nhost-2\n chroot. Please remember that the interactive setup mode will not run with this command, so add keywords such as \n-a\n to include asimba, shibboleth or any other component that was installed. Read \nthis section\n in case you failed to setup Gluu CE in \nhost-2\n.\n\n\n\n\n\n\nFinalize the installation by running the setup script with any additional components that was installed in \nhost-1\n.\n\n\n\n\n\n\nLDAP Replication\n#\n\n\n\n\n\n\n\n\nhost-1\n\n\nhost-2\n\n\n\n\n\n\n\n\n\n\nIP Address eg. 192.168.6.1\n\n\nIp Address eg. 192.168.6.2\n\n\n\n\n\n\nLDAP admin pass\n\n\nLDAP admin pass\n\n\n\n\n\n\nldapGeneralConfigInstall.py\n\n\n\n\n\n\n\n\nreplicationSetup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun \nldapGeneralConfigInstall.py\n in \nhost-1\n. This script will prepare the \nhost-1\n LDAP server to accept various configurations such as \nallow-pre-encoded-passwords\n or applyting the host and port for LDAP Server.\n\n\n\n\n\n\nRun \nreplicationSetup.py\n in \nhost-1\n and it will give a similar output as below:\n\n\n\n\n\n\n[ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$\n\n\n\n\n\n\nInitialize directory server replication with this command \n/opt/opendj/bin/dsreplication initialize\n and it will give the following output:\n\n\n\n\n[ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.\n\n\n\n\n\n\nNote\n\n\nOpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; an alternative is to use the same OpenDJ certificate/key pair for both nodes\n\n\n\n\nFile System Replication\n#\n\n\n\n\nAdvice\n\n\nThe backup feature is broken in some of earlier versions of csync2. In that case it msut either be disabled by commenting out \nbackup-*\n clauses in tool's configuration file, or build csync2 version 2.0+ from sources and use key \n-l\n in your xinetd.d's config (like \nserver_args     = -i -l -N idp1.gluu.org\n) on both nodes.\n\n\n\n\n\n\nWarning\n\n\nPlease verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ in different linux distributions.\n\n\n\n\ncsync2\n is used for file system syncing between \nhost-1\n and \nhost-2\n. The following locations are synced in between the two VMs.\n\n\n\n\n/opt/idp/conf\n\n\n/opt/idp/metadata\n\n\n/opt/idp/ssl\n\n\n/opt/tomcat/conf\n\n\n/etc/csync2/csync2.cfg\n\n\n\n\nCsync2 configuration for host-1\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nGenerate \ncsync2\n private key by running \ncsync2 -k csync2.key\n and put it into \n/etc/csync2/csync2.key\n file\n\n\n\n\n\n\nCopy the private key to \nhost-2\n and put it into the same file there\n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-1\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \nEnter\n accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\n Add IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org  \n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, followed by \n# chkconfig xinetd on\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\n\n\nNote\n\n\nThe status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n\n\n Configure \ncsync2.cfg\n to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n \n\nRun `mkdir -p /var/backups/csync2`\n\n\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCsync2 configuration for host-2\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nPlease copy the private key generated on \nhost-1\n to \nhost-2\n and put it into \n/etc/csync2/csync2.key\n file \n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-2\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\nAdd IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org\n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n Run \nmkdir -p /var/backups/csync2\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCertificate Management\n#\n\n\nThe certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to \n/etc/certs/\n on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks: \nhttpd.*\n, \nasimba.*\n, \nasimbaIDP.*\n and \nshibIDP.*\n to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).\n\n\nAfter that's done you still will need to update default system storage (\ncacerts\n file) at the 2nd node with these newly copied certificates.\n\n\n[Optional] Actions in case setup.properties.last method of installation didn't work for you\n#\n\n\nIn this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.\n\n\nThus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.\n\n\nTo achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:\n\n\n\n\n\n\nComment out \nauto younger;\n string in \ncsync2.cfg\n on both nodes to disable autoresolution of conflicts\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp1.gluu.org\n on the 1st node\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp2.gluu.org\n on the 2nd node\n\n\n\n\n\n\nPrevious commands did initial scan and filled metadata database. Now run \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.\n\n\n\n\n\n\nYou should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this \n# csync2 -frvvv -N idp1.gluu.org /\n on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.\n\n\n\n\n\n\nRun \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.\n\n\n\n\n\n\nUncomment \nauto younger;\n string and proceed to installing cron jobs",
            "title": "Cluster with CE"
        },
        {
            "location": "/installation-guide/cluster/#cluster-with-gluu-ce",
            "text": "It is possible to setup a cluster of servers with Gluu Server CE. This page outlines the setup process of a cluster with two (2) nodes. It is possible to add more nodes, but it is recommened to contact Gluu for higher level solutions.",
            "title": "Cluster with Gluu CE"
        },
        {
            "location": "/installation-guide/cluster/#design",
            "text": "The following diagram outlines the design of the cluster.",
            "title": "Design"
        },
        {
            "location": "/installation-guide/cluster/#requirements",
            "text": "For complete deployment requirements and instructions, please see the  Deployment Page .\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs. Please remember that the requirements from the deployment page will apply as well.     Number of VMs  CPU Units  RAM  Root Partion  Port Requirements      2  2 CPU ea.  8 GB  40 GB  4444 and 8989 (LDAP replication), 30865 (file system syncing)      Note  For convenience, the nodes are identified as  host-1  and  host-1   Csync2 Installation #  CentOS 6.x #    Log into Gluu-Server container    Install epel-release-latest by running  rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm    Install  csync2  package by running  yum install csync2    CentOS 7.x #  On the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.   Below are the steps:    Log into Gluu-Server container    Enable epel-release repo:  # yum install epel-release    Install compiler and development environment:  # yum group install \"Development Tools\"    Install csync2's dependencies:    # yum install librsync-devel    # yum install gnutls-devel    # yum install sqlite-devel      # mkdir building_csync && cd building_csync/    Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /usr/local/etc/csync2/  directory for storing configuration (for convenience):  # ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install . Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!    Ubuntu 14.x (compiling from sources) #    Log into Gluu-Server container    Run  apt-get update    Install csync2's dependencies:    # apt-get install pkg-config    # apt-get install libsqlite-dev    # apt-get install libsqlite3-dev    # apt-get install librsync-dev      Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /etc/csync2/  directory for storing configuration and  /usr/sbin  directory for executables (for convenience):  ./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install    Ubuntu 14.x (from repo) #    Log into Gluu-Server container    Run  apt-get update    Run  apt-get install csync2 \n[TOC]",
            "title": "Requirements"
        },
        {
            "location": "/installation-guide/cluster/#preparing-vms",
            "text": "Install Gluu CE following the  Deployment Page  in  host-1    Note  The following step must be done right after initial installation of the Gluu CE Package but before finalizing the setup by running the  setup.py  script.     Copy the  setup.properties.last  file that is generated afther finalizing the installation of Gluu CE on  host-1  and paste it in the  /install/community-edition-setup/  folder inside the  host-2  chroot. Please remember that the interactive setup mode will not run with this command, so add keywords such as  -a  to include asimba, shibboleth or any other component that was installed. Read  this section  in case you failed to setup Gluu CE in  host-2 .    Finalize the installation by running the setup script with any additional components that was installed in  host-1 .",
            "title": "Preparing VMs"
        },
        {
            "location": "/installation-guide/cluster/#ldap-replication",
            "text": "host-1  host-2      IP Address eg. 192.168.6.1  Ip Address eg. 192.168.6.2    LDAP admin pass  LDAP admin pass    ldapGeneralConfigInstall.py     replicationSetup.py        Run  ldapGeneralConfigInstall.py  in  host-1 . This script will prepare the  host-1  LDAP server to accept various configurations such as  allow-pre-encoded-passwords  or applyting the host and port for LDAP Server.    Run  replicationSetup.py  in  host-1  and it will give a similar output as below:    [ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$   Initialize directory server replication with this command  /opt/opendj/bin/dsreplication initialize  and it will give the following output:   [ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.   Note  OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; an alternative is to use the same OpenDJ certificate/key pair for both nodes",
            "title": "LDAP Replication"
        },
        {
            "location": "/installation-guide/cluster/#file-system-replication",
            "text": "Advice  The backup feature is broken in some of earlier versions of csync2. In that case it msut either be disabled by commenting out  backup-*  clauses in tool's configuration file, or build csync2 version 2.0+ from sources and use key  -l  in your xinetd.d's config (like  server_args     = -i -l -N idp1.gluu.org ) on both nodes.    Warning  Please verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ in different linux distributions.   csync2  is used for file system syncing between  host-1  and  host-2 . The following locations are synced in between the two VMs.   /opt/idp/conf  /opt/idp/metadata  /opt/idp/ssl  /opt/tomcat/conf  /etc/csync2/csync2.cfg   Csync2 configuration for host-1 #    Log into Gluu-Server container    Generate  csync2  private key by running  csync2 -k csync2.key  and put it into  /etc/csync2/csync2.key  file    Copy the private key to  host-2  and put it into the same file there    Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-1  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit  Enter  accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.    Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org      Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , followed by  # chkconfig xinetd on   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on   Note  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.     Configure  csync2.cfg  to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org     Run `mkdir -p /var/backups/csync2`     Add cronjob to automate csync2 run. The cronjob example is given below:   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log   Csync2 configuration for host-2 #    Log into Gluu-Server container    Please copy the private key generated on  host-1  to  host-2  and put it into  /etc/csync2/csync2.key  file     Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-2  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.   Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org    Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org    Run  mkdir -p /var/backups/csync2    Add cronjob to automate csync2 run. The cronjob example is given below:  1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log",
            "title": "File System Replication"
        },
        {
            "location": "/installation-guide/cluster/#certificate-management",
            "text": "The certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to  /etc/certs/  on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks:  httpd.* ,  asimba.* ,  asimbaIDP.*  and  shibIDP.*  to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).  After that's done you still will need to update default system storage ( cacerts  file) at the 2nd node with these newly copied certificates.",
            "title": "Certificate Management"
        },
        {
            "location": "/installation-guide/cluster/#optional-actions-in-case-setuppropertieslast-method-of-installation-didnt-work-for-you",
            "text": "In this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.  Thus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.  To achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:    Comment out  auto younger;  string in  csync2.cfg  on both nodes to disable autoresolution of conflicts    Run  # csync2 -crvvv -N idp1.gluu.org  on the 1st node    Run  # csync2 -crvvv -N idp2.gluu.org  on the 2nd node    Previous commands did initial scan and filled metadata database. Now run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.    You should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this  # csync2 -frvvv -N idp1.gluu.org /  on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.    Run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.    Uncomment  auto younger;  string and proceed to installing cron jobs",
            "title": "[Optional] Actions in case setup.properties.last method of installation didn't work for you"
        },
        {
            "location": "/upgrade/",
            "text": "4 Upgrading Gluu Server CE\n#\n\n\nUpgrading a Gluu Server is NOT a simple \napt-get upgrade\n. The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:\n\n\n\n\nInstall new version\n\n\nExport the data from your current version\n\n\nStop the current Gluu Server\n\n\nStart the new version of Gluu Server\n\n\nImport data into the new server\n\n\n\n\nGluu provides the necessary \nscripts\n to perform the import and export of the data in and out of the servers.\n\n\n\n\nNOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one. \n\n\n\n\n4.1 Export the data from the current installation\n#\n\n\n# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py\n\n\n\n\nThe export script will generate a directory called \nbackup_24\n which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.\n\n\n4.2 Install the latest version of the Gluu server\n#\n\n\nStop the current version of the gluu-server.\n\n\n# service gluu-server-2.4.x stop\n\n\n\n\nConsult the \ninstallation guide\n of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version \n2.4.y\n, then:\n\n\n# cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py\n\n\n\n\nEnter the required information for the setup and complete the installation.\n\n\n4.3 Import your old data\n#\n\n\nGo to the folder where you have the \nbackup_24\n folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.\n\n\n# cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py\n\n\n\n\nInstall the \npython-pip\n package using your package manager.\n\n\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip\n\n\n\n\nInstall the \njson-merge\n Python package and run the import script.\n\n\n# pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24\n\n\n\n\nAny error or warning will 4be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "Upgrade Gluu Server"
        },
        {
            "location": "/upgrade/#4-upgrading-gluu-server-ce",
            "text": "Upgrading a Gluu Server is NOT a simple  apt-get upgrade . The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:   Install new version  Export the data from your current version  Stop the current Gluu Server  Start the new version of Gluu Server  Import data into the new server   Gluu provides the necessary  scripts  to perform the import and export of the data in and out of the servers.   NOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one.",
            "title": "4 Upgrading Gluu Server CE"
        },
        {
            "location": "/upgrade/#41-export-the-data-from-the-current-installation",
            "text": "# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.",
            "title": "4.1 Export the data from the current installation"
        },
        {
            "location": "/upgrade/#42-install-the-latest-version-of-the-gluu-server",
            "text": "Stop the current version of the gluu-server.  # service gluu-server-2.4.x stop  Consult the  installation guide  of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version  2.4.y , then:  # cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py  Enter the required information for the setup and complete the installation.",
            "title": "4.2 Install the latest version of the Gluu server"
        },
        {
            "location": "/upgrade/#43-import-your-old-data",
            "text": "Go to the folder where you have the  backup_24  folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.  # cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py  Install the  python-pip  package using your package manager.  # apt-get install python-pip\n\nor\n\n# yum -y install python-pip  Install the  json-merge  Python package and run the import script.  # pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24  Any error or warning will 4be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "4.3 Import your old data"
        },
        {
            "location": "/upgrade/update/",
            "text": "Gluu Server Update Package\n#\n\n\nGluu Server update packages are released to fix urgent issues, with low \nimpact on deployment. Normally these involve updates to the java code,\neffected replacing the \nwar\n file. These are installed using \n\nyum\n or \napt-get\n command.\n\n\nCheck version of installed Gluu CE server.\n#\n\n\n\n\nVersion of the server can be found from the name of the installed home Gluu directory\n\n\nBelow is an alternate method to determine the version of the installed CE server.\n\n\n\n\noxTrust version: cat /opt/tomcat/webapps/identity/META-INF/MANIFEST.MF\n\n \noxAuth version: cat /opt/tomcat/webapps/oxauth/META-INF/MANIFEST.MF\n\n\n\n\nBackup\n#\n\n\nIt is highly recommended to stop the Gluu Server, and \ntar\n \nfolder \n/opt/gluu-server-2.4.4\n to ensure speedy recovery from any \nunexpected hiccup. If the organization has any other contingency plans,\nthat is ok too.\n\n\n\n\nWarning\n\n\nPlease make sure that there is enough disk space to tar the entire \nGluu Server, at least 4GB of Disk Space is recommended.\n\n\n\n\nUse the following commands to tar the Gluu Server folder from the host\nOS:\n\n\n# service gluu-server-2.4.4 stop\n# tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/\n\n\n\n\nInstall Update Package\n#\n\n\nGluu Server update packages are available from the Gluu Repository.\nMake sure to stop Gluu Server before installing and finalizing the \nupdate package.\n\n\n\n\nCentOS 6.x/7.2, RHEL 6/7:\n \n\n\n\n\n# yum update\n# service gluu-server-2.4.4 stop\n# yum install gluu-updater-2.4.4\n\n\n\n\n\n\n\nUbuntu Server 14.04/16.04, Debian 8:\n \n\n\n\n\n# apt-get update\n# service gluu-server-2.4.4 stop\n# apt-get install gluu-updater-2.4.4\n\n\n\n\n\nAfter the update package is installed, use the following commands to \nfinalize the installation by running the update script. \n\n\n# service gluu-server-2.4.4 start\n# service gluu-server-2.4.4 login\n# cd /opt/upd/2.4.4.sp2/bin\n# ./update_war.sh\n\n\n\n\nUpon successful update, check the version again to confirm on the update.\n\n\n NOTE: It is recommended to wait for few minutes while the changes take place and \nGluu Server CE can be used.",
            "title": "Patch Gluu Server"
        },
        {
            "location": "/upgrade/update/#gluu-server-update-package",
            "text": "Gluu Server update packages are released to fix urgent issues, with low \nimpact on deployment. Normally these involve updates to the java code,\neffected replacing the  war  file. These are installed using  yum  or  apt-get  command.",
            "title": "Gluu Server Update Package"
        },
        {
            "location": "/upgrade/update/#check-version-of-installed-gluu-ce-server",
            "text": "Version of the server can be found from the name of the installed home Gluu directory  Below is an alternate method to determine the version of the installed CE server.   oxTrust version: cat /opt/tomcat/webapps/identity/META-INF/MANIFEST.MF \n  oxAuth version: cat /opt/tomcat/webapps/oxauth/META-INF/MANIFEST.MF",
            "title": "Check version of installed Gluu CE server."
        },
        {
            "location": "/upgrade/update/#backup",
            "text": "It is highly recommended to stop the Gluu Server, and  tar  \nfolder  /opt/gluu-server-2.4.4  to ensure speedy recovery from any \nunexpected hiccup. If the organization has any other contingency plans,\nthat is ok too.   Warning  Please make sure that there is enough disk space to tar the entire \nGluu Server, at least 4GB of Disk Space is recommended.   Use the following commands to tar the Gluu Server folder from the host\nOS:  # service gluu-server-2.4.4 stop\n# tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/",
            "title": "Backup"
        },
        {
            "location": "/upgrade/update/#install-update-package",
            "text": "Gluu Server update packages are available from the Gluu Repository.\nMake sure to stop Gluu Server before installing and finalizing the \nupdate package.   CentOS 6.x/7.2, RHEL 6/7:     # yum update\n# service gluu-server-2.4.4 stop\n# yum install gluu-updater-2.4.4   Ubuntu Server 14.04/16.04, Debian 8:     # apt-get update\n# service gluu-server-2.4.4 stop\n# apt-get install gluu-updater-2.4.4  After the update package is installed, use the following commands to \nfinalize the installation by running the update script.   # service gluu-server-2.4.4 start\n# service gluu-server-2.4.4 login\n# cd /opt/upd/2.4.4.sp2/bin\n# ./update_war.sh  Upon successful update, check the version again to confirm on the update.   NOTE: It is recommended to wait for few minutes while the changes take place and \nGluu Server CE can be used.",
            "title": "Install Update Package"
        },
        {
            "location": "/admin-guide/",
            "text": "Gluu Server Administrative Interface\n\n\nWelcome Page\n\n\nConfiguration\n\n\nOrganization Configuration\n\n\nJSON Configuration\n\n\nManage Authentication\n\n\nManage Custom Scripts\n\n\nManage Registration\n\n\nAttributes\n\n\nCache Refresh\n\n\nConfigure Log Viewer\n\n\nView Log File\n\n\nServer Status\n\n\nCertificates\n\n\n\n\n\n\nSAML\n\n\nOutbound\n\n\n\n\n\n\nOpenID Connect\n\n\nUMA\n\n\nUsers\n\n\nPersonal\n\n\n\n\n\n\n\n\n\n\nGluu Server Administrative Interface\n#\n\n\nThe administration interface (oxTrust) is accessible from the \nhostname\n provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username \nadmin\n and the \nLDAP superuser\n password. \n\n\nWelcome Page\n#\n\n\nThe administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.\n\n\n\nThe menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under \nUsers\n and the user-profile is under \nPersonal\n.\n\n\nConfiguration\n#\n\n\n\n\nThe configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.\n\n\nOrganization Configuration\n#\n\n\nThere are three sections in the organization configuration page which are \nSystem Configuration\n, \nSMTP Server Configuration\n and \nOxTrust Settings\n. These sections are detailed below with screenshots.\n\n\n\n\nSystem Configuration\n\nGluu Server CE is shipped with a built-in \nWhite Pages\n feature which can be enabled from the system configuration page. This page also contains the options to enable \nSelf-Service Password Reset\n which allows the Gluu Server users to reset their password via email. This options depends on the \nSMTP Server Configuration\n, also available under the organization configuration page. Additionally the \nSCIM Support\n can be enabled from the System Configuration page. If the organization uses any custom \nDNS Server(s)\n, the address should be updated from the System Configuration interface.\n\n\n\nSMTP Server Configuration\n\nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.\n\n\n\nOxTrust Settings\n\nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.\n\n\n\n\nJSON Configuration\n#\n\n\nThe configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the \nJSON Configuration\n menu\n\n\n\nThe oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the \nUpdate\n button on the bottom of the page. \n\n\nThe oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.\n\n\nThe oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a \nxls\n file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields\n\n\nManage Authentication\n#\n\n\nThe \nManage Authentication\n page contains the internal OpenDJ settings for Gluu Server CE. The \nDefault Authentication Method\n defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The \noxTrust authentication mode\n decides the authentication mechasims for the users logging into the oxTrust admin interface.\n\n\n\nManage Custom Scripts\n#\n\n\nIt will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.\n\n\n\n\nThe details about the custom scripts are given later in this guide.\n\n\nManage Registration\n#\n\n\nGluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.\n\n\nAttributes\n#\n\n\nThe attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The \nShow All Attributes\n button will show the inactive attributes too. Custom attributes can be added by clicking the \nAdd Attribute\n button and filling up a simple form. \n\n\n\n\nCache Refresh\n#\n\n\nCache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The \nCache Refresh\n will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the \nPolling interval (minutes)\n form. The key attributes, object class and the source attributes can be defined from the \nCustomer  BackendKey/Attributes\n tab. The backend server address, bind DN and other information must go to the \nSource Backend LDAP Servers\n tab.\n\n\nConfigure Log Viewer\n#\n\n\nThe logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.\n\n\nView Log File\n#\n\n\nThe log files are listed in the \nView Log File\n page under the \nAllowed Log Files\n tab. The individual logs can be tailed by clicking them. The \nConfiguration\n contains the last line count which will show the number of lines specified from the log in the \nTail of Log File\n tab. This section is an alternative to getting into the Gluu \nchroot\n and tailing the log files.\n\n\nServer Status\n#\n\n\nThis page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.\n\n\nCertificates\n#\n\n\nThe certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.\n\n\nSAML\n#\n\n\nGluu Server CE contains all SAML related functionalities under the \nSAML\n tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA. \n\n\nOutbound\n#\n\n\n\n\nThe \nTrust Relationships\n page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.\n\n\nOpenID Connect\n#\n\n\nOpenID Connect is another protocol supported by Gluu Server CE following the \nopenID Connect specifications\n. The scopes page contains the \nAdd Scope\n button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.\n\n\n\n\nThe OpenID Connect clients are accessible from the \nClients\n page under \nOpenID Connect\n tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the \nAdd Client\n button.\n\n\n\n\nUMA\n#\n\n\nUMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the \nAdd Scope Description\n button.\n\n\n\nUMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the \nAdd Resource Set\n button.\n\n\n\nUsers\n#\n\n\nUsers tab allows Gluu admin to do various task, including add admin, search users, Import users from file.\n\n\nPersonal\n#\n\n\nPersonal tab allows the individual person to view his basic profile and modify certain fields.",
            "title": "oxTrust Admin Interface"
        },
        {
            "location": "/admin-guide/#gluu-server-administrative-interface",
            "text": "The administration interface (oxTrust) is accessible from the  hostname  provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username  admin  and the  LDAP superuser  password.",
            "title": "Gluu Server Administrative Interface"
        },
        {
            "location": "/admin-guide/#welcome-page",
            "text": "The administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.  The menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under  Users  and the user-profile is under  Personal .",
            "title": "Welcome Page"
        },
        {
            "location": "/admin-guide/#configuration",
            "text": "The configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.  Organization Configuration #  There are three sections in the organization configuration page which are  System Configuration ,  SMTP Server Configuration  and  OxTrust Settings . These sections are detailed below with screenshots.   System Configuration \nGluu Server CE is shipped with a built-in  White Pages  feature which can be enabled from the system configuration page. This page also contains the options to enable  Self-Service Password Reset  which allows the Gluu Server users to reset their password via email. This options depends on the  SMTP Server Configuration , also available under the organization configuration page. Additionally the  SCIM Support  can be enabled from the System Configuration page. If the organization uses any custom  DNS Server(s) , the address should be updated from the System Configuration interface.  SMTP Server Configuration \nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.  OxTrust Settings \nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.   JSON Configuration #  The configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the  JSON Configuration  menu  The oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the  Update  button on the bottom of the page.   The oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.  The oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a  xls  file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields  Manage Authentication #  The  Manage Authentication  page contains the internal OpenDJ settings for Gluu Server CE. The  Default Authentication Method  defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The  oxTrust authentication mode  decides the authentication mechasims for the users logging into the oxTrust admin interface.  Manage Custom Scripts #  It will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.   The details about the custom scripts are given later in this guide.  Manage Registration #  Gluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.  Attributes #  The attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The  Show All Attributes  button will show the inactive attributes too. Custom attributes can be added by clicking the  Add Attribute  button and filling up a simple form.    Cache Refresh #  Cache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The  Cache Refresh  will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the  Polling interval (minutes)  form. The key attributes, object class and the source attributes can be defined from the  Customer  BackendKey/Attributes  tab. The backend server address, bind DN and other information must go to the  Source Backend LDAP Servers  tab.  Configure Log Viewer #  The logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.  View Log File #  The log files are listed in the  View Log File  page under the  Allowed Log Files  tab. The individual logs can be tailed by clicking them. The  Configuration  contains the last line count which will show the number of lines specified from the log in the  Tail of Log File  tab. This section is an alternative to getting into the Gluu  chroot  and tailing the log files.  Server Status #  This page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.  Certificates #  The certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/#saml",
            "text": "Gluu Server CE contains all SAML related functionalities under the  SAML  tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA.   Outbound #   The  Trust Relationships  page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/#openid-connect",
            "text": "OpenID Connect is another protocol supported by Gluu Server CE following the  openID Connect specifications . The scopes page contains the  Add Scope  button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.   The OpenID Connect clients are accessible from the  Clients  page under  OpenID Connect  tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the  Add Client  button.",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/#uma",
            "text": "UMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the  Add Scope Description  button.  UMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the  Add Resource Set  button.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/#users",
            "text": "Users tab allows Gluu admin to do various task, including add admin, search users, Import users from file.",
            "title": "Users"
        },
        {
            "location": "/admin-guide/#personal",
            "text": "Personal tab allows the individual person to view his basic profile and modify certain fields.",
            "title": "Personal"
        },
        {
            "location": "/admin-guide/logmanagment/",
            "text": "Configure Log Viewer\n\n\nView Log File\n\n\n\n\n\n\nConfigure Log Viewer\n#\n\n\nThe Gluu Server has the facility to read log files using the GUI. The\nlog file can be displayed from the Web UI with a few clicks of the\nmouse. This feature can be enabled from the configuration menu clicking\n\nConfiguration --> Configure Log Viewer\n.\n\n\n\n\nGluu Server comes preloaded with four logs in this page as the screenshot portrays. The oxAuth, oxTrust, Cache Refresh and the console log is available by default.\nClicking on \nAdd log template\n will bring up boxes where log path can be set to view the same from the GUI. The boxes on the\nleft contain the name/description of the log file, and the right boxes\ncontain the path of the log file such as \n/opt/tomcat/logs/demo.log\n.\n\n\nView Log File\n#\n\n\nThe log files configured in the earlier section can be viewed using the\n\nView log file\n feature. This feature can be accessed through the\nconfiguration menu using \nConfiguration --> View Log File\n.\n\n\n![View Log File](/img/oxtrust/admin_view_log.png\n\n\nThe \nDisplay last lines count\n field contains the lines that will be\ndisplayed in the Web GUI. If the field contains the value \n400\n, then\nthe Gluu Server will show the last 400 lines of the log in the GUI. The\nscreenshot below shows an according example.",
            "title": "Log Management"
        },
        {
            "location": "/admin-guide/logmanagment/#configure-log-viewer",
            "text": "The Gluu Server has the facility to read log files using the GUI. The\nlog file can be displayed from the Web UI with a few clicks of the\nmouse. This feature can be enabled from the configuration menu clicking Configuration --> Configure Log Viewer .   Gluu Server comes preloaded with four logs in this page as the screenshot portrays. The oxAuth, oxTrust, Cache Refresh and the console log is available by default.\nClicking on  Add log template  will bring up boxes where log path can be set to view the same from the GUI. The boxes on the\nleft contain the name/description of the log file, and the right boxes\ncontain the path of the log file such as  /opt/tomcat/logs/demo.log .",
            "title": "Configure Log Viewer"
        },
        {
            "location": "/admin-guide/logmanagment/#view-log-file",
            "text": "The log files configured in the earlier section can be viewed using the View log file  feature. This feature can be accessed through the\nconfiguration menu using  Configuration --> View Log File .  ![View Log File](/img/oxtrust/admin_view_log.png  The  Display last lines count  field contains the lines that will be\ndisplayed in the Web GUI. If the field contains the value  400 , then\nthe Gluu Server will show the last 400 lines of the log in the GUI. The\nscreenshot below shows an according example.",
            "title": "View Log File"
        },
        {
            "location": "/admin-guide/uma/",
            "text": "This section describes the adminisration of UMA in Gluu Server CE. The UMA administration is accessible from the oxTrust administrator interface.\n\n\n\n\n6.1 Resource Registration\n#\n\n\nThe resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:\n\n\n\n\nname\n\n\nscopes\n\n\ntype\n\n\nicon_uri\n\n\n\n\nThe resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:\n\n\n{\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}\n\n\n\n\n\n\nNote\n\n\nResource JSON may contain custom properties.\n\n\n\n\n\n\nThe search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the \nAdd Resource Set\n button. The following screenshot shows the page that will appear up on clicking the add resource button.\n\n\n\n\nThe properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.\n\n\n\n\n\n\n6.2 Scopes\n#\n\n\nThe scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:\n\n\n\n\nname\n\n\nicon_uri\n\n\n\n\nAn example  of the scope JSON is given below:\n\n\n{\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}\n\n\n\n\n\n\nNote\n\n\nScope JSON may contain custom properties.\n\n\n\n\nThere are three (3) types of scopes in UMA:\n\n\n\n\ninternal\n: the scope is hosted within oxAuth in Gluu Server CE\n\n\nexternal\n: the scope is hosted in a different server\n\n\nexternal_auto\n: the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration\n\n\n\n\nThere is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format\n\n\nUMA URL=uma_scopes_endpoint+\"/\"+oxId;\n\n\n\n\nThe following is an example of an UMA URL:\n\n\nhttps://gluu.org/uma/scopes/view\n\n\n\n\n\n\nNote\n\n\nThe scope endpoint has to be present in UMA configuration to make it discoverable.\n\n\n\n\nThe \nldif\n for both external and internal scope is given below:\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\n6.2.1 Add Scope\n#\n\n\nThis section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the \nScopes\n page under \nUMA\n from the oxTrust menu.\n\n\n\n\nThe search bar can be used to look for available scopes. New scopes are added by clicking on the \nAdd Scope Description\n button which will bring up the interface shown below.\n\n\n\n\nAdditionally there is an option to add authorization policy with the new scope.\n\n\n6.3 UMA Policies\n#\n\n\nUMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:\n\n\n\n\nscopes: policy protects resources by scopes\n\n\nauthorization script: script that is evaluated in order to grant/deny access\n\n\nname: a human readable name to the UMA policy\n\n\n\n\nThe following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed from the Configuration Menu.\n\n\n\n\n\n\n6.3.1 UMA Policy Algorithm\n#\n\n\nThe UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.\n\n\n\n\n\n\nUMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn \ntrue\n in order to authorize access during RPT authorization.\n\n\n\n\n\n\nMultiple policies can protect a single scope. In such a case, all the policies must retun \ntrue\n to authorize access else aceess will be denied.",
            "title": "UMA in Gluu Server"
        },
        {
            "location": "/admin-guide/uma/#61-resource-registration",
            "text": "The resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:   name  scopes  type  icon_uri   The resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:  {\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}   Note  Resource JSON may contain custom properties.    The search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the  Add Resource Set  button. The following screenshot shows the page that will appear up on clicking the add resource button.   The properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.",
            "title": "6.1 Resource Registration"
        },
        {
            "location": "/admin-guide/uma/#62-scopes",
            "text": "The scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:   name  icon_uri   An example  of the scope JSON is given below:  {\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}   Note  Scope JSON may contain custom properties.   There are three (3) types of scopes in UMA:   internal : the scope is hosted within oxAuth in Gluu Server CE  external : the scope is hosted in a different server  external_auto : the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration   There is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format  UMA URL=uma_scopes_endpoint+\"/\"+oxId;  The following is an example of an UMA URL:  https://gluu.org/uma/scopes/view   Note  The scope endpoint has to be present in UMA configuration to make it discoverable.   The  ldif  for both external and internal scope is given below:  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png  6.2.1 Add Scope #  This section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the  Scopes  page under  UMA  from the oxTrust menu.   The search bar can be used to look for available scopes. New scopes are added by clicking on the  Add Scope Description  button which will bring up the interface shown below.   Additionally there is an option to add authorization policy with the new scope.",
            "title": "6.2 Scopes"
        },
        {
            "location": "/admin-guide/uma/#63-uma-policies",
            "text": "UMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:   scopes: policy protects resources by scopes  authorization script: script that is evaluated in order to grant/deny access  name: a human readable name to the UMA policy   The following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed from the Configuration Menu.    6.3.1 UMA Policy Algorithm #  The UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.    UMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn  true  in order to authorize access during RPT authorization.    Multiple policies can protect a single scope. In such a case, all the policies must retun  true  to authorize access else aceess will be denied.",
            "title": "6.3 UMA Policies"
        },
        {
            "location": "/admin-guide/attribute/",
            "text": "An \nActive\n attribute list can be seen from the Configuration >\nAttributes section.\n\n\n\n\nThe Gluu Server has a large LDAP tree which includes all standard\nattributes. It is not necessary for all of them to be \nActive\n. The\nactive LDAP trees can be sorted using the \nShow only Active Attributes\n\nlink.\n\n\n\n\nThe Gluu Server administrator can make changes, such as changing the\nstatus to active/inactive, to an attribute after clicking on it.\n\n\n\n\nAdditional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the \nAdd Attribute\n button. Then, the following screen will\nappear:\n\n\n\n\n\n\n\n\nName:\n This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.\n\n\n\n\n\n\nSAML1 URI:\n This field contains the SAML1 uri for the custom attribute.\n\n\n\n\n\n\nSAML2 URI:\n This field contains the SAML2 uri for the custom attribute.\n\n\n\n\n\n\nDisplay Name:\n This display name can be anything that is human readable.\n\n\n\n\n\n\nType:\n The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:\n\n\n\n\nText\n\n\nNumeric\n\n\nPhoto\n\n\n\n\nDate\n\n\n\n\n\n\nEdit Type:\n This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).\n\n\n\n\n\n\nView Type:\n This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.\n\n\n\n\n\n\nPrivacy Level:\n Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.\n\n\n\n\n\n\nMultivalued:\n Please select multivalue in this field if the attribute\n  contains more than one value.\n\n\n\n\n\n\nSCIM Attributes:\n If the attribute is a part of SCIM architecture select true.\n\n\n\n\n\n\nDescription:\n This contains a few words to describe the attribute.\n\n\n\n\n\n\nStatus:\n The status, when selected active, will release and publish\n  the attribute in IdP.",
            "title": "Attribute Management"
        },
        {
            "location": "/admin-guide/scim-uma/",
            "text": "Overview\n\n\nInstallation\n\n\nConfiguration\n\n\nTesting SCIM UMA\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nOverview\n#\n\n\nGluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout \n\nDeployment Guides\n for installation instructions.\n\n\nInstallation\n#\n\n\n\n\nInstall Gluu Server CE following the \nDeployment Guides\n and \nremember to install \nAsimba\n while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand \nthis template\n \nis used. \n\n\n\n\nNote:\n The JWKS for RS and RP clients are put into the \n./output/scim.ldif\n file ready for SCIM configuration.\nThe \nsetup.properties.file\n contains the RS and RP JWKS in Base64 format.\n\n\n\n\n\n\nUse the following command to extract OpenID SCIM RS and RP Client ID\n\ncat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"\n\n\n\n\n\n\nThe UMA SCIM client requires JWKS, so the setup script extracts the JWKS from \nsetup.properties.last\n and puts it into the \n./output/scim-rp.jks\n file.\n\n\n\n\n\n\nNOTE:\n For versions before v2.4.4, the JWKS is put in the \n./output/scim-rp-openid-keys.json\n file instead.\n\n\nConfiguration\n#\n\n\n\n\nEnable SCIM from Organization Configuration\n\n\n\n\n\n\n\n\noxTrust SCIM UMA configuration is automatically updated while running the \nsetup.py\n and the correct values are setup \nin the \noxtrust-config.json\n file.\n\n\n\n\n  \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",\n\n\n\n\n\n\numaClientKeyId\n can be updated with the \nalias\n from \nscim-rp.jks\n file; if it is not updated, the first key from the file is used automatically.\n\n\n\n\nTesting SCIM UMA\n#\n\n\nThe following is a sample code that can be run to test the configured SCIM UMA Gluu CE. It uses \nSCIM-Client\n, a Java library also developed by Gluu intended for client applications.\n\n\n\n\nIf you are using Maven, below is how to add SCIM-Client to your project:\n\n\n\n\n<repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>\n\n\n\n\n\n\n\n\nStarting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.\n\n\n\n\n\n\nAdd your domain's SSL certificate to the JRE's \ncacerts\n certificate key store where your client application will run. There are lots of articles around the Web on how to do this.\n\n\n\n\n\n\nSupply the UMA parameters and run the code. \nNOTE:\n If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with \ntarget\n or \ntmp\n folders possibly cleared beforehand to avoid conflicts.\n\n\n\n\n\n\n\npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}\n\n\n\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n#\n\n\nStarting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.\n\n\nTo enable test mode, do the following:\n\n\n\n\nLogin to the oxTrust GUI and go to \"Configuration\" -> \"JSON Configuration\" -> \"OxTrust Configuration\", then locate the property \nscimTestMode\n.\n\n\n\n\n\n\n\n\nSet it to \ntrue\n, then click the \"Save Configuration\" button. The Gluu server will then create a long-lived OAuth2 access token with a validity period of one year. Doing this will also switch the authentication scheme from UMA to OAuth2 Access Token.\n\n\nClick again \"JSON Configuration\" -> \"OxTrust Configuration\" in the left navigation pane. This will retrieve the access token and be displayed in the \nscimTestModeAccessToken\n property.\n\n\n\n\n\n\n\n\nIf the access token has expired, just repeat the previous steps to create a new one.\n\n\n\n\nThe access token can then be used as the query string parameter \naccess_token\n in accessing the SCIM 2.0 endpoints, for example:\n\n\n\n\nYou can verify the current authentication scheme of the SCIM 2.0 endpoints by browsing its \nServiceProviderConfig\n:\n\n\n\n\nTo exit test mode, just set \nscimTestMode\n back to \nfalse\n then click the \"Save Configuration\" button. This will switch the authentication scheme from OAuth2 Access Token to UMA. If you try using your access token again, you will now get the \n403 Unauthorized\n error:\n\n\n\n\nNotes\n#\n\n\nUMA is protected with SCIM in Gluu Server Community Edition (CE). The usage of UMA requires HTTP GET and HTTP POST requests. Before testing, the Client making the requests must be added/registered in Gluu CE. The UMA configuration is available @ \nhttps://hostname/.well-known/uma-configuration\n. The request to authorization endpoint must accompanied with  application/json content type. \n\n\nThe example below shows the parameters used in a real-life use case  where the UMA RPT Token is authorized in oxAuth.\n\n\n    public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);\n\n\n\n\nIf the default openID SCIM Client is not used, the \ninum\n must be added to the UMA Authorization Policy Custom Script.",
            "title": "SCIM protected by UMA"
        },
        {
            "location": "/admin-guide/scim-uma/#overview",
            "text": "Gluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout  Deployment Guides  for installation instructions.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/scim-uma/#installation",
            "text": "Install Gluu Server CE following the  Deployment Guides  and \nremember to install  Asimba  while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand  this template  \nis used.    Note:  The JWKS for RS and RP clients are put into the  ./output/scim.ldif  file ready for SCIM configuration.\nThe  setup.properties.file  contains the RS and RP JWKS in Base64 format.    Use the following command to extract OpenID SCIM RS and RP Client ID cat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"    The UMA SCIM client requires JWKS, so the setup script extracts the JWKS from  setup.properties.last  and puts it into the  ./output/scim-rp.jks  file.    NOTE:  For versions before v2.4.4, the JWKS is put in the  ./output/scim-rp-openid-keys.json  file instead.",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/scim-uma/#configuration",
            "text": "Enable SCIM from Organization Configuration     oxTrust SCIM UMA configuration is automatically updated while running the  setup.py  and the correct values are setup \nin the  oxtrust-config.json  file.     \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",   umaClientKeyId  can be updated with the  alias  from  scim-rp.jks  file; if it is not updated, the first key from the file is used automatically.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/scim-uma/#testing-scim-uma",
            "text": "The following is a sample code that can be run to test the configured SCIM UMA Gluu CE. It uses  SCIM-Client , a Java library also developed by Gluu intended for client applications.   If you are using Maven, below is how to add SCIM-Client to your project:   <repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>    Starting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.    Add your domain's SSL certificate to the JRE's  cacerts  certificate key store where your client application will run. There are lots of articles around the Web on how to do this.    Supply the UMA parameters and run the code.  NOTE:  If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with  target  or  tmp  folders possibly cleared beforehand to avoid conflicts.    \npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}",
            "title": "Testing SCIM UMA"
        },
        {
            "location": "/admin-guide/scim-uma/#scim-20-test-mode-v244",
            "text": "Starting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.  To enable test mode, do the following:   Login to the oxTrust GUI and go to \"Configuration\" -> \"JSON Configuration\" -> \"OxTrust Configuration\", then locate the property  scimTestMode .     Set it to  true , then click the \"Save Configuration\" button. The Gluu server will then create a long-lived OAuth2 access token with a validity period of one year. Doing this will also switch the authentication scheme from UMA to OAuth2 Access Token.  Click again \"JSON Configuration\" -> \"OxTrust Configuration\" in the left navigation pane. This will retrieve the access token and be displayed in the  scimTestModeAccessToken  property.     If the access token has expired, just repeat the previous steps to create a new one.   The access token can then be used as the query string parameter  access_token  in accessing the SCIM 2.0 endpoints, for example:   You can verify the current authentication scheme of the SCIM 2.0 endpoints by browsing its  ServiceProviderConfig :   To exit test mode, just set  scimTestMode  back to  false  then click the \"Save Configuration\" button. This will switch the authentication scheme from OAuth2 Access Token to UMA. If you try using your access token again, you will now get the  403 Unauthorized  error:",
            "title": "SCIM 2.0 Test Mode (v2.4.4+)"
        },
        {
            "location": "/admin-guide/scim-uma/#notes",
            "text": "UMA is protected with SCIM in Gluu Server Community Edition (CE). The usage of UMA requires HTTP GET and HTTP POST requests. Before testing, the Client making the requests must be added/registered in Gluu CE. The UMA configuration is available @  https://hostname/.well-known/uma-configuration . The request to authorization endpoint must accompanied with  application/json content type.   The example below shows the parameters used in a real-life use case  where the UMA RPT Token is authorized in oxAuth.      public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);  If the default openID SCIM Client is not used, the  inum  must be added to the UMA Authorization Policy Custom Script.",
            "title": "Notes"
        },
        {
            "location": "/admin-guide/scim/",
            "text": "Enable SCIM\n\n\nSCIM Endpoints\n\n\n\n\n\n\nSCIM 1.1\n\n\nEndpoint: User & Group\n\n\nExample\n\n\n\n\n\n\nEndpoint: Bulk\n\n\nDefinitions\n\n\n\n\n\n\nResponse Codes\n\n\n\n\n\n\n\n\n\n\nGluu Server Community Edition supports System for Cross-domain Identity Management (SCIM) Version 1.0 and 2.0 out of the box, operated using HTTP \nGET\n and \nPOST\n commands. SCIM uses a REST API for operations which are disabled by default. The support for SCIM must be enabled from the oxTrust admin interface. \n\n\nEnable SCIM\n#\n\n\nSCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to \nOrganization Configuration\n --> \nSystem Configuration\n.\n\n\n\n\nPlease navigate down the page to find \nSCIM Support\n in the \nSYstem Configuration\n page and select \nEnabled\n.\n\n\n\n\nSCIM Endpoints\n#\n\n\nSCIM uses REST API for the operations which are covered in short in this section. There are two versions of the SCIM API each with its own specification. This usage of SCIM requires advanced level knowledge of HTTP GET and POST commands and not recommended for entry level users.\n\n\nThe SCIM 1.1 is governed by the \nSCIM:Protocol 1.1\n document and SCIM 2.0 is governed by the \nSCIM:Core Schema\n & \nSCIM:Protocol\n. As it is mentioned before, the specifications define an API, the operations are performed through endpoints. There are three endpoints that are available in Gluu Server SCIM:\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nThe supported operations are given later in this document.\n\n\nSCIM 1.1\n#\n\n\nThe endpoints URLS are incomplete withour the hostname. Please use the hostname of Gluu Server Community Edition before the give URLS to make any requrest using SCIM.\n\n\n\n\n\n\n\n\nResource\n\n\nEndpoint\n\n\nOperations\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUser\n\n\n/seam/resource/restv1/Users\n\n\nGET, POST\n\n\nRetrieve/Add/Modify Users\n\n\n\n\n\n\nGroup\n\n\n/seam/resource/restv1/Groups\n\n\nGET, POST\n\n\nRetrieve/Add/Modify Groups\n\n\n\n\n\n\nBulk\n\n\n/seam/resource/restv1/scim/v1/Bulk\n\n\nGET, POST\n\n\nBulk modify Resources\n\n\n\n\n\n\n\n\nThe endpoints are described in detail in the follwing sections. Please remember to go through the specifications before using SCIM.\n\n\nEndpoint: User & Group\n#\n\n\nThe userinfo endpoint is given above in \nSection SCIM 1.1\n. The example below shows the userinfo endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\n\n\nThe groups endpoint is given in \nSection SCIM 1.1\n. The example below shown the groupinfo endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\n\n\nThe following table details the request parameters to the endpoints:\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nLocation\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrsid\n\n\nstring\n\n\npath\n\n\nTRUE\n\n\nResource set description ID\n\n\n\n\n\n\nAuthorization\n\n\nstring\n\n\nheader\n\n\nFALSE\n\n\n\n\n\n\n\n\n\n\nThe response contains either JSON/XML application with a status code \n200\n if the request is successful.\n\n\nPlease see the \nResponse Code Section\n for more details.\n\n\nExample\n#\n\n\nThe following is an example to add a new user with SCIM 1.1 in \nidp.gluu.org\n using a JSON Request.\n\n\nPOST https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=\n\n\n\n\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}\n\n\n\n\nThe response is in JSON as well. The following is the expected response\n\n\n201 CREATED\nServer:  Apache-Coyote/1.1\nLocation:  https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type:  application/json\n\n\n\n\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"id\":\"@!1111!0000!D4E7\",\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"Hiden for Privacy Reasons\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}\n\n\n\n\nEndpoint: Bulk\n#\n\n\nBulk endpoint allows the administrator to work with a large collection of Resources with a single request.A body of a bulk operation may contain a set of HTTP Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE. Please see the \nSCIM Specs\n for more details. \n\n\nThe example below shows the bulk operaiton endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/seam/resource/restv1/scim/v1/Bulk\n\n\n\n\nThe following table details the request parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nstring\n\n\nheader\n\n\n\n\n\n\nbody\n\n\nBulkRequest\n\n\nbody\n\n\n\n\n\n\n\n\nDefinitions\n#\n\n\nThe definitions for the bulk operation is covered in the tables below. The parametes below are all optional.\n\n\n\n\n\n\n\n\nBulkOperation\n\n\n\n\nBulkRequest\n\n\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nParameter\n\n\nData Type\n\n\nParameter\n\n\nData Type\n\n\n\n\n\n\nbulkid\n\n\nstring\n\n\nschemes\n\n\narray[string]\n\n\nschemes\n\n\narray[string]\n\n\n\n\n\n\nversion\n\n\nstring\n\n\noperations\n\n\narray[BulkOperation]\n\n\noperations\n\n\narray[BulkOperation]\n\n\n\n\n\n\nmethod\n\n\nstring\n\n\nfailOnErrors\n\n\nintegar(int32)\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocation\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse Codes\n#\n\n\nThis sections defines the response codes for the requests sent to the SCIM endpoints.\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nSuccessful Operation\n\n\n\n\n\n\n201\n\n\nCreated\n\n\nSuccessfully created resource\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n400\n\n\nBad Request\n\n\nRequest cannot be parsed, is syntactically incorrect, or violates schema\n\n\n\n\n\n\n401\n\n\nUnauthorized\n\n\nAuthorization header is invalid or missing\n\n\n\n\n\n\n403\n\n\nForbidden\n\n\nOperation is not permitted based on the supplied authorization\n\n\n\n\n\n\n404\n\n\nNot Found\n\n\nSpecified resource does not exist",
            "title": "SCIM API Configuration"
        },
        {
            "location": "/admin-guide/scim/#enable-scim",
            "text": "SCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to  Organization Configuration  -->  System Configuration .   Please navigate down the page to find  SCIM Support  in the  SYstem Configuration  page and select  Enabled .   SCIM Endpoints #  SCIM uses REST API for the operations which are covered in short in this section. There are two versions of the SCIM API each with its own specification. This usage of SCIM requires advanced level knowledge of HTTP GET and POST commands and not recommended for entry level users.  The SCIM 1.1 is governed by the  SCIM:Protocol 1.1  document and SCIM 2.0 is governed by the  SCIM:Core Schema  &  SCIM:Protocol . As it is mentioned before, the specifications define an API, the operations are performed through endpoints. There are three endpoints that are available in Gluu Server SCIM:   User Endpoint  Group Endpoint  Bulk Operation Endpoint   The supported operations are given later in this document.",
            "title": "Enable SCIM"
        },
        {
            "location": "/admin-guide/scim/#scim-11",
            "text": "The endpoints URLS are incomplete withour the hostname. Please use the hostname of Gluu Server Community Edition before the give URLS to make any requrest using SCIM.     Resource  Endpoint  Operations  Description      User  /seam/resource/restv1/Users  GET, POST  Retrieve/Add/Modify Users    Group  /seam/resource/restv1/Groups  GET, POST  Retrieve/Add/Modify Groups    Bulk  /seam/resource/restv1/scim/v1/Bulk  GET, POST  Bulk modify Resources     The endpoints are described in detail in the follwing sections. Please remember to go through the specifications before using SCIM.  Endpoint: User & Group #  The userinfo endpoint is given above in  Section SCIM 1.1 . The example below shows the userinfo endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}  The groups endpoint is given in  Section SCIM 1.1 . The example below shown the groupinfo endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}  The following table details the request parameters to the endpoints:     Parameter  Data Type  Location  Required  Description      rsid  string  path  TRUE  Resource set description ID    Authorization  string  header  FALSE      The response contains either JSON/XML application with a status code  200  if the request is successful.  Please see the  Response Code Section  for more details.  Example #  The following is an example to add a new user with SCIM 1.1 in  idp.gluu.org  using a JSON Request.  POST https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=  {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}  The response is in JSON as well. The following is the expected response  201 CREATED\nServer:  Apache-Coyote/1.1\nLocation:  https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type:  application/json  {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"id\":\"@!1111!0000!D4E7\",\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"Hiden for Privacy Reasons\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}  Endpoint: Bulk #  Bulk endpoint allows the administrator to work with a large collection of Resources with a single request.A body of a bulk operation may contain a set of HTTP Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE. Please see the  SCIM Specs  for more details.   The example below shows the bulk operaiton endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/seam/resource/restv1/scim/v1/Bulk  The following table details the request parameters:     Parameter  Data Type  Location      Authorization  string  header    body  BulkRequest  body     Definitions #  The definitions for the bulk operation is covered in the tables below. The parametes below are all optional.     BulkOperation   BulkRequest   BulkResponse       Parameter  Data Type  Parameter  Data Type  Parameter  Data Type    bulkid  string  schemes  array[string]  schemes  array[string]    version  string  operations  array[BulkOperation]  operations  array[BulkOperation]    method  string  failOnErrors  integar(int32)      path  string        location  string        status  string        data  object        response  object         Response Codes #  This sections defines the response codes for the requests sent to the SCIM endpoints.     Status Code  Reason  Description      200  OK  Successful Operation    201  Created  Successfully created resource        Status Code  Reason  Description      400  Bad Request  Request cannot be parsed, is syntactically incorrect, or violates schema    401  Unauthorized  Authorization header is invalid or missing    403  Forbidden  Operation is not permitted based on the supplied authorization    404  Not Found  Specified resource does not exist",
            "title": "SCIM 1.1"
        },
        {
            "location": "/admin-guide/backup/",
            "text": "How to back up Gluu CE Server\n\n\nTar command to Back up Gluu Server\n\n\nSteps to Back up Gluu CE server using tar\n\n\n\n\n\n\nUsing Gluu Script to Back up Ldif of LDAP\n\n\nSteps to Back up Gluu CE Server using Gluu Export Scripts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to back up Gluu CE Server\n#\n\n\nGluu CE Server Back up can be performed using below methods.\n\n\n\n\nUsing tar command to tar the Gluu Server Folder from the Host OS\n\n\nUsing Gluu provided export and import scripts to back up ldif of the LDAP.\n\n\n\n\n\n\nNOTE: In this documentation,'2.4.x' is referred to the existing installed version of Gluu CE Server. \n\n\n\n\nTar command to Back up Gluu Server\n#\n\n\nSteps to Back up Gluu CE server using tar\n#\n\n\n1. Stop the server using below command\n    a. #service gluu-server-2.4.x stop\n2. use tar command to take a back up\n    b. # tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/\n\n\n\nUsing Gluu Script to Back up Ldif of LDAP\n#\n\n\nSteps to Back up Gluu CE Server using Gluu Export Scripts\n#\n\n\n1. Login to Gluu chroot\n    a. # service gluu-server-2.4.x login\n2. Fetch export script from Gluu \n    b. wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n3. Change permission of the script\n    c. # chmod +x export24.py\n4. run the script\n    d. # ./export24.py\n\n\n\nThe export script will generate a directory called  backup_24  which will have all the data backed up from the current installation. Check the log file generated in the directory for any errors.",
            "title": "Backup Gluu Server CE"
        },
        {
            "location": "/admin-guide/backup/#how-to-back-up-gluu-ce-server",
            "text": "Gluu CE Server Back up can be performed using below methods.   Using tar command to tar the Gluu Server Folder from the Host OS  Using Gluu provided export and import scripts to back up ldif of the LDAP.    NOTE: In this documentation,'2.4.x' is referred to the existing installed version of Gluu CE Server.",
            "title": "How to back up Gluu CE Server"
        },
        {
            "location": "/admin-guide/backup/#tar-command-to-back-up-gluu-server",
            "text": "Steps to Back up Gluu CE server using tar #  1. Stop the server using below command\n    a. #service gluu-server-2.4.x stop\n2. use tar command to take a back up\n    b. # tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/",
            "title": "Tar command to Back up Gluu Server"
        },
        {
            "location": "/admin-guide/backup/#using-gluu-script-to-back-up-ldif-of-ldap",
            "text": "Steps to Back up Gluu CE Server using Gluu Export Scripts #  1. Login to Gluu chroot\n    a. # service gluu-server-2.4.x login\n2. Fetch export script from Gluu \n    b. wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n3. Change permission of the script\n    c. # chmod +x export24.py\n4. run the script\n    d. # ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation. Check the log file generated in the directory for any errors.",
            "title": "Using Gluu Script to Back up Ldif of LDAP"
        },
        {
            "location": "/admin-guide/custom-script/",
            "text": "Custom Script / Interception Script\n\n\nInterception Script Methods\n\n\nInterception Script Logs\n\n\n\n\n\n\nPerson Authentication\n\n\n\n\n\n\nCustom Script / Interception Script\n#\n\n\nGluu Server is very flexible by design enabling the use of \nJython\n interception scripts to customize behaviour. Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers. Another advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.\n\n\nCustom Scripts can be accessed by navigating to Configuration \nand selecting the \nManage Custom Scritps\n tab.\n\n\n\n\nInterception Script Methods\n#\n\n\nThere are three methods that inherit a base interface\n\n\n\n\n\n\n\n\nInherited Methods\n\n\nMethod description\n\n\n\n\n\n\n\n\n\n\ndef init(self, configurationAttributes)\n\n\nThis method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc\n\n\n\n\n\n\ndef destroy(self, configurationAttributes)\n\n\nThis method is called once to destroy events. It can be used to free resource and objects created in the \ninit()\n method\n\n\n\n\n\n\ndef getApiVersion(self)\n\n\nThe \ngetApiVersion\n method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return \n1\n\n\n\n\n\n\n\n\nThe \nconfigurationAttributes\n parameter is \njava.util.Map<String, SimpleCustomProperty>\n with properties specified in \noxConfigurationProperty\n attributes.\n\n\nThe script manager only loads enabled scripts. Hence, after enabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script. All scripts are stored in LDAP in the\n\nou=scripts,o=<org_inum>,o=gluu\n branch.\n\n\nThis is a sample entry:\n\n\n    dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\n    objectClass: oxCustomScript\n    objectClass: top\n    description: <custom_script_description>\n    displayName: <display_name>\n    gluuStatus: true\n    inum: @!1111!031C.4A65\n    oxLevel: <priority>\n    oxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\n    oxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\n    oxRevision: <revision>\n    oxScript: <custom_script>\n    oxScriptType: <script_type>\n    programmingLanguage: python\n\n\n\n\nThe script manager reloads scripts automatically without needing to\nrestart the application once \noxRevision\n is increased.\n\n\nInterception Script Logs\n#\n\n\nThe log files regarding interception scripts are not stored in the\n\nwrapper.log\n file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in \noxauth_script.log\n\nand the oxTrust custom script logs are stored in the\n\noxtrust_script.log\n. Please refer to these log files for any errors in\nthe interception scripts or following the workflow of the script.\n\n\nPerson Authentication\n#\n\n\nFor a list of pre-written, open source Gluu authentication scripts, view our \nserver integrations\n\n\nAn authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth uses simple username/password authentication method. This\nscript type allows an admin to implement more secure workflows to cover\nan organizations security requirements. It extends the base script type\nwith the \ninit\n, \ndestroy\n and \ngetApiVersion\n methods but also adds the\nfollowing methods:\n\n\n\n\n\n\n\n\nMethod\n\n\nisValidAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nusageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if \nisValidAuthenticationMethod\n returns False. As a result it should return the reserved authentication method name\n\n\n\n\n\n\nMethod Parameter\n\n\nuageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authenticate(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is java integar\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef prepareForStep(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is a java integer\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getCountAuthenticationSteps(self, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method should return an integer value with the number of steps in the authentication workflow\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getExtraParametersForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getPageForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page \n/login.xhtml\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef logout(self, configurationAttributes, requestParameters)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns \nFalse\n. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameters\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nrequestParameters\n is \njava.util.Map<String, String[]>\n\n\n\n\n\n\n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Authentication Script",
            "title": "Custom Script in Gluu CE"
        },
        {
            "location": "/admin-guide/custom-script/#custom-script-interception-script",
            "text": "Gluu Server is very flexible by design enabling the use of  Jython  interception scripts to customize behaviour. Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers. Another advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.  Custom Scripts can be accessed by navigating to Configuration \nand selecting the  Manage Custom Scritps  tab.",
            "title": "Custom Script / Interception Script"
        },
        {
            "location": "/admin-guide/custom-script/#interception-script-methods",
            "text": "There are three methods that inherit a base interface     Inherited Methods  Method description      def init(self, configurationAttributes)  This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc    def destroy(self, configurationAttributes)  This method is called once to destroy events. It can be used to free resource and objects created in the  init()  method    def getApiVersion(self)  The  getApiVersion  method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return  1     The  configurationAttributes  parameter is  java.util.Map<String, SimpleCustomProperty>  with properties specified in  oxConfigurationProperty  attributes.  The script manager only loads enabled scripts. Hence, after enabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script. All scripts are stored in LDAP in the ou=scripts,o=<org_inum>,o=gluu  branch.  This is a sample entry:      dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\n    objectClass: oxCustomScript\n    objectClass: top\n    description: <custom_script_description>\n    displayName: <display_name>\n    gluuStatus: true\n    inum: @!1111!031C.4A65\n    oxLevel: <priority>\n    oxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\n    oxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\n    oxRevision: <revision>\n    oxScript: <custom_script>\n    oxScriptType: <script_type>\n    programmingLanguage: python  The script manager reloads scripts automatically without needing to\nrestart the application once  oxRevision  is increased.",
            "title": "Interception Script Methods"
        },
        {
            "location": "/admin-guide/custom-script/#interception-script-logs",
            "text": "The log files regarding interception scripts are not stored in the wrapper.log  file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in  oxauth_script.log \nand the oxTrust custom script logs are stored in the oxtrust_script.log . Please refer to these log files for any errors in\nthe interception scripts or following the workflow of the script.",
            "title": "Interception Script Logs"
        },
        {
            "location": "/admin-guide/custom-script/#person-authentication",
            "text": "For a list of pre-written, open source Gluu authentication scripts, view our  server integrations  An authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth uses simple username/password authentication method. This\nscript type allows an admin to implement more secure workflows to cover\nan organizations security requirements. It extends the base script type\nwith the  init ,  destroy  and  getApiVersion  methods but also adds the\nfollowing methods:     Method  isValidAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return  True  or  False    Method Parameter  usageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if  isValidAuthenticationMethod  returns False. As a result it should return the reserved authentication method name    Method Parameter  uageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def authenticate(self, configurationAttributes, requestParameters, step)      Description  This method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is java integar configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def prepareForStep(self, configurationAttributes, requestParameters, step)      Description  This method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is a java integer configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getCountAuthenticationSteps(self, configurationAttributes)      Description  This method should return an integer value with the number of steps in the authentication workflow    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getExtraParametersForStep(self, configurationAttributes, step)      Description  This method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integer        Method  def getPageForStep(self, configurationAttributes, step)      Description  This method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page  /login.xhtml    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integar        Method  def logout(self, configurationAttributes, requestParameters)      Description  This method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns  False . As a result it should either return  True  or  False    Method Parameters  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> requestParameters  is  java.util.Map<String, String[]>     This script can be used in oxAuth application only.   Sample Authentication Script",
            "title": "Person Authentication"
        },
        {
            "location": "/admin-guide/certificate/",
            "text": "Certificates\n#\n\n\nGluu Server components have cryptographic keys and X.509 certificates that are stored inside the\n\nchroot\n. The details of the certificates are given below according to each component. The certificates\nare available in the \n/etc/certs\n folder.\n\n\n\n\n\n\n\n\nASIMBA\n\n\nShibboleth\n\n\nAPACHE\n\n\nOPENLDAP\n\n\n\n\n\n\n\n\n\n\nasimba.crt\n\n\nshibIDP.crt\n\n\nhttpd.crt\n\n\nopenldap.crt\n\n\n\n\n\n\nasimba.csr\n\n\nshibIDP.csr\n\n\nhttps.csr\n\n\nopenldap.csr\n\n\n\n\n\n\nasimba.key\n\n\nshibIDP.jsk\n\n\nhttpd.key\n\n\nopenldap.key\n\n\n\n\n\n\nasimba.key.orig\n\n\nshibIDP.key\n\n\nhttpd.key.orig\n\n\nopenldap.key.orig\n\n\n\n\n\n\nasimba.pkcs12\n\n\nshibIDP.key.orig\n\n\n\n\nopenldap.pem\n\n\n\n\n\n\nasimbaIDP.jsk\n\n\nshibIDP.pkcs12\n\n\n\n\n\n\n\n\n\n\n\n\noxAuth\n#\n\n\noxauth-web-keys.json\n is being used by Gluu's OpenID Connect & UMA\n server.\n\n\nUpdating Apache Certificate\n#\n\n\nThe certificates require manual update from \n/etc/certs/\n folder. \n\n\n\n\nWarning\n\n\nThe private key cannot be password protected, and the public key must be base64 X.509. \n\n\n\n\n\n\nNote\n\n\nPlease backup your full \n/etc/certs\n directory and \ncacerts\n file before updating certificates.\n\n\n\n\nPlease follow these steps shown below to update the Apache SSL cert:\n\n\n\n\nSave the latest SSL httpd key and certificate in the \n/etc/certs\n folder\n\n\nRename them to \nhttpd.key\n and \nhttpd.crt\n respectively\n\n\nImport 'httpd.der' into the java keystore\n/ Convertion to DER, command:\n \nopenssl x509 -outform der -in httpd.crt -out httpd.der\n\n\nImport certificate in to Java Keystore(cacerts):\n \nkeytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd\n\n\n\n\n\n\nRestart LDAP server, apache2/httpd and tomcat.\n\n\n\n\nInstall Intermediate Certificates\n#\n\n\nPlease follow the steps below to install intermediate certificates:\n\n\n\n\nLog into your Gluu Server container.\n\n\nKeep your intermediate certificate in the file \n/etc/certs/\n.\n\n\nModify \n/etc/httpd/conf.d/https_gluu.conf\n, and add\n\n  \nSSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt\n.\n\n\nRestart the service of the httpd server.",
            "title": "Certificate Management"
        },
        {
            "location": "/admin-guide/certificate/#certificates",
            "text": "Gluu Server components have cryptographic keys and X.509 certificates that are stored inside the chroot . The details of the certificates are given below according to each component. The certificates\nare available in the  /etc/certs  folder.     ASIMBA  Shibboleth  APACHE  OPENLDAP      asimba.crt  shibIDP.crt  httpd.crt  openldap.crt    asimba.csr  shibIDP.csr  https.csr  openldap.csr    asimba.key  shibIDP.jsk  httpd.key  openldap.key    asimba.key.orig  shibIDP.key  httpd.key.orig  openldap.key.orig    asimba.pkcs12  shibIDP.key.orig   openldap.pem    asimbaIDP.jsk  shibIDP.pkcs12",
            "title": "Certificates"
        },
        {
            "location": "/admin-guide/certificate/#oxauth",
            "text": "oxauth-web-keys.json  is being used by Gluu's OpenID Connect & UMA\n server.",
            "title": "oxAuth"
        },
        {
            "location": "/admin-guide/certificate/#updating-apache-certificate",
            "text": "The certificates require manual update from  /etc/certs/  folder.    Warning  The private key cannot be password protected, and the public key must be base64 X.509.     Note  Please backup your full  /etc/certs  directory and  cacerts  file before updating certificates.   Please follow these steps shown below to update the Apache SSL cert:   Save the latest SSL httpd key and certificate in the  /etc/certs  folder  Rename them to  httpd.key  and  httpd.crt  respectively  Import 'httpd.der' into the java keystore\n/ Convertion to DER, command:   openssl x509 -outform der -in httpd.crt -out httpd.der  Import certificate in to Java Keystore(cacerts):   keytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd    Restart LDAP server, apache2/httpd and tomcat.",
            "title": "Updating Apache Certificate"
        },
        {
            "location": "/admin-guide/certificate/#install-intermediate-certificates",
            "text": "Please follow the steps below to install intermediate certificates:   Log into your Gluu Server container.  Keep your intermediate certificate in the file  /etc/certs/ .  Modify  /etc/httpd/conf.d/https_gluu.conf , and add \n   SSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt .  Restart the service of the httpd server.",
            "title": "Install Intermediate Certificates"
        },
        {
            "location": "/admin-guide/fine-tuning/",
            "text": "Fine Tuning Gluu Server\n\n\nLDAP Server\n\n\nApache Tomcat\n\n\nGluu Server\n\n\nGluu Server Benchmark\n\n\n\n\n\n\nUseful Links\n\n\n\n\n\n\nFine Tuning Gluu Server\n#\n\n\nGluu Server has a stateless architecture, it scales quite easy. However\nto get high-performant server it must be tuned accordingly.\n\n\nTuning consists of:\n\n\n\n\nLDAP Server (OpenDJ, OpenLDAP)\n\n\nWeb Application Container (Tomcat, Jetty, JBoss)\n\n\nGluu Server configuration Tuning\n\n\n\n\nLDAP Server\n#\n\n\n(For convenience all samples stick to OpenDJ however general recommendations are the same for other LDAP Servers)\n\n\n\n\nMaximum number of allowed connections\nIf there are not enough connections to serve the client, a connection is\nput \"on hold\" and waits. To avoid delays it's recommended to provide\nexpected maximum allowed connections.\n\n \nmax-allowed-client-connections=1000\n\n\nProvide enough resources to LDAP Server\n For example OpenDJ use JVM for running, for high performance it's\n    recommended to give enough memory via JVM system properties.\n\n\nAllow LDAP Server use cache as much as possible.\n\n\n\n\ndsconfig -n set-backend-prop --backend-name userRoot --set db-cache-percent:50\n\n\n\n\nApache Tomcat\n#\n\n\n\n\nSet maximum for parallel requests.\n\nConnector parameters in \nserver.xml\n:\n\n\nmaxThreads=\"10000\"\n\n\nmaxConnections=\"10000\"\n\n\n\n\n\n\nSet memory settings via JAVA_OPTS\n\n \nset \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"\n\n\nOperating time\n\nCheck via Tomcat monitor whether requests are handled or just \"hangs\"\nbecause there are not enough resources. Here is sample when processing\ntime increase due to lack of resources:\n\n\n\n\n\n\nGluu Server\n#\n\n\n\n\noxauth-ldap.properties - Increase ldap connection pool size\n\n\n\n\n     maxconnections: 1000\n\n\n\n\nGluu Server Benchmark\n#\n\n\nBenchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth\n\n\nMeasures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite \nsubjective\n results\n\n\n\n\n\n\n\n\nInvocations\n\n\nParallel Threads\n\n\nTime\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n100\n\n\n100\n\n\n8 seconds\n\n\n\n\n\n\n\n\n1000\n\n\n100\n\n\n\n\n\n\n\n\n\n\n1000\n\n\n200\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n2000\n\n\n100\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n2000\n\n\n200\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n10000\n\n\n300\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n100000\n\n\n300\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n\n\nUseful Links\n#\n\n\n\n\nOpenDJ Performance Tuning\n\n\nOpenDJ Global configuration",
            "title": "Fine Tuning Gluu Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#fine-tuning-gluu-server",
            "text": "Gluu Server has a stateless architecture, it scales quite easy. However\nto get high-performant server it must be tuned accordingly.  Tuning consists of:   LDAP Server (OpenDJ, OpenLDAP)  Web Application Container (Tomcat, Jetty, JBoss)  Gluu Server configuration Tuning",
            "title": "Fine Tuning Gluu Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#ldap-server",
            "text": "(For convenience all samples stick to OpenDJ however general recommendations are the same for other LDAP Servers)   Maximum number of allowed connections If there are not enough connections to serve the client, a connection is\nput \"on hold\" and waits. To avoid delays it's recommended to provide\nexpected maximum allowed connections. \n  max-allowed-client-connections=1000  Provide enough resources to LDAP Server  For example OpenDJ use JVM for running, for high performance it's\n    recommended to give enough memory via JVM system properties.  Allow LDAP Server use cache as much as possible.   dsconfig -n set-backend-prop --backend-name userRoot --set db-cache-percent:50",
            "title": "LDAP Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#apache-tomcat",
            "text": "Set maximum for parallel requests. Connector parameters in  server.xml :  maxThreads=\"10000\"  maxConnections=\"10000\"    Set memory settings via JAVA_OPTS \n  set \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"  Operating time \nCheck via Tomcat monitor whether requests are handled or just \"hangs\"\nbecause there are not enough resources. Here is sample when processing\ntime increase due to lack of resources:",
            "title": "Apache Tomcat"
        },
        {
            "location": "/admin-guide/fine-tuning/#gluu-server",
            "text": "oxauth-ldap.properties - Increase ldap connection pool size        maxconnections: 1000",
            "title": "Gluu Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#gluu-server-benchmark",
            "text": "Benchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth  Measures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite  subjective  results     Invocations  Parallel Threads  Time  Comments      100  100  8 seconds     1000  100      1000  200   Not representable: CPU 100%    2000  100   Not representable: CPU 100%    2000  200   Not representable: CPU 100%    10000  300   Not representable: CPU 100%    100000  300   Not representable: CPU 100%",
            "title": "Gluu Server Benchmark"
        },
        {
            "location": "/admin-guide/fine-tuning/#useful-links",
            "text": "OpenDJ Performance Tuning  OpenDJ Global configuration",
            "title": "Useful Links"
        },
        {
            "location": "/admin-guide/faq/",
            "text": "General FAQ\n\n\nHow to change the hostname/IP address/listening port of Gluu Server\n\n\nHow to set the port to something other than 443\n\n\nHow to customize IDP to ask for Email instead of username\n\n\nHow to add additional roles to oxTrust and change permissions for existing ones\n\n\n\n\n\n\nTroubleshooting Guide\n\n\nDNS names not resolving\n\n\nDNS names not resolving!\n\n\nForgot the admin password!\n\n\n\n\n\n\n\n\n\n\nGeneral FAQ\n#\n\n\nHow to change the hostname/IP address/listening port of Gluu Server\n#\n\n\nIt is not recommended to change the hostname or IP address or the listening port of any installed Gluu Server instance. The hostname and the IP address is used in many settings stored in LDAP configuration entries, Apache/Jetty configuration and into the custom authentication script. It is strongly recommended to use a fresh install in a new VM. \n\n\n\n\nNote\n\n\nPlease use static IP address with reverse proxy or load balancer or simple port forwarding.\n\n\n\n\nHow to set the port to something other than 443\n#\n\n\nPorts other than 443 are not supported as the port is used by Apache Web Server. In theory, the change must reflect in the SAML and OpenID Connect metadata and still there might be errors.\n\n\n\n\nNote\n\n\nPlease use a virtual ethernet interface and a different IP address on your server\n\n\n\n\nHow to customize IDP to ask for Email instead of username\n#\n\n\nIn oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to \nuid\n. Set those va    lues to \nmail\n and now your Gluu Server will expect email as the identifier instead of username.\n\n\n\n\nNow you will want to update your IDP login page to display \nEmail Address\n as the requested identifier. In order to do that you need to modify the \nlogin.xhtm    l\n file, which is located in \n/opt/tomcat/webapps/oxauth/\n. Insert \nEmail Address\n as the value for \noutputLabel\n; this snippet is under the \ndialog\n class. S    ee the screenshot below.\n\n\n\n\nHow to add additional roles to oxTrust and change permissions for existing ones\n#\n\n\nThe additional role requires the implementation of dynamic rules in Jboss SEAM and then uitlize them in oxTrust as the available \nmanager\n and \nuser\n roles are defined within the \nsecurit.drl\n hard-coded into oxTrust. The file checks for the \nmaanger\n group membership and adds the role to the web context. This is currently out of the scope of support. \n\n\n\n\nWarning\n\n\noxTrust is a tool for administrators and it must nto be used as a user facing application.\n\n\n\n\nTroubleshooting Guide\n#\n\n\nDNS names not resolving\n#\n\n\nIt is possible that even after configuring everything there is a \nDNS\n resolve error in Gluu Server.\nThe reason is the \nDNS\n used inside the chroot container; the \ndns\n used by the container is the Google DNS servers \nand the \nDNS\n for the host OS is not used. Therefore to fix this issue:\n\n\n\n\nChange the DNS inside the container by editing the \n/etc/resolv.conf\n file and adding the DNS used by your organization\n\n\n\n\nDNS names not resolving!\n#\n\n\nIt is possible that even after configuring everything there is a \nDNS\n resolve error in Gluu Server.\nThe reason is the \nDNS\n used inside the chroot container; the \ndns\n used by the container is the Google DNS servers \nand the \nDNS\n for the host OS is not used. Therefore to fix this issue:\n\n\n\n\nChange the DNS inside the container by editing the \n/etc/resolv.conf\n file and adding the DNS used by your organization\n\n\n\n\nForgot the admin password!\n#\n\n\nGluu Server stores the admin password in the file \n/install/community-edition-setup/setup.properties.last\n under the\nproperty \nldapPass\n. Retrieve the data using the following command:\n\n\n# grep ldapPass= /install/community-edition-setup/*.last\n\n\n\n\n\n\nWarning\n\n\nIt is strongly recommended to remove the file from any production environment or encrypt the file",
            "title": "Troubleshooting & FAQ"
        },
        {
            "location": "/admin-guide/faq/#general-faq",
            "text": "",
            "title": "General FAQ"
        },
        {
            "location": "/admin-guide/faq/#how-to-change-the-hostnameip-addresslistening-port-of-gluu-server",
            "text": "It is not recommended to change the hostname or IP address or the listening port of any installed Gluu Server instance. The hostname and the IP address is used in many settings stored in LDAP configuration entries, Apache/Jetty configuration and into the custom authentication script. It is strongly recommended to use a fresh install in a new VM.    Note  Please use static IP address with reverse proxy or load balancer or simple port forwarding.",
            "title": "How to change the hostname/IP address/listening port of Gluu Server"
        },
        {
            "location": "/admin-guide/faq/#how-to-set-the-port-to-something-other-than-443",
            "text": "Ports other than 443 are not supported as the port is used by Apache Web Server. In theory, the change must reflect in the SAML and OpenID Connect metadata and still there might be errors.   Note  Please use a virtual ethernet interface and a different IP address on your server",
            "title": "How to set the port to something other than 443"
        },
        {
            "location": "/admin-guide/faq/#how-to-customize-idp-to-ask-for-email-instead-of-username",
            "text": "In oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to  uid . Set those va    lues to  mail  and now your Gluu Server will expect email as the identifier instead of username.   Now you will want to update your IDP login page to display  Email Address  as the requested identifier. In order to do that you need to modify the  login.xhtm    l  file, which is located in  /opt/tomcat/webapps/oxauth/ . Insert  Email Address  as the value for  outputLabel ; this snippet is under the  dialog  class. S    ee the screenshot below.",
            "title": "How to customize IDP to ask for Email instead of username"
        },
        {
            "location": "/admin-guide/faq/#how-to-add-additional-roles-to-oxtrust-and-change-permissions-for-existing-ones",
            "text": "The additional role requires the implementation of dynamic rules in Jboss SEAM and then uitlize them in oxTrust as the available  manager  and  user  roles are defined within the  securit.drl  hard-coded into oxTrust. The file checks for the  maanger  group membership and adds the role to the web context. This is currently out of the scope of support.    Warning  oxTrust is a tool for administrators and it must nto be used as a user facing application.",
            "title": "How to add additional roles to oxTrust and change permissions for existing ones"
        },
        {
            "location": "/admin-guide/faq/#troubleshooting-guide",
            "text": "",
            "title": "Troubleshooting Guide"
        },
        {
            "location": "/admin-guide/faq/#dns-names-not-resolving",
            "text": "It is possible that even after configuring everything there is a  DNS  resolve error in Gluu Server.\nThe reason is the  DNS  used inside the chroot container; the  dns  used by the container is the Google DNS servers \nand the  DNS  for the host OS is not used. Therefore to fix this issue:   Change the DNS inside the container by editing the  /etc/resolv.conf  file and adding the DNS used by your organization",
            "title": "DNS names not resolving"
        },
        {
            "location": "/admin-guide/faq/#dns-names-not-resolving_1",
            "text": "It is possible that even after configuring everything there is a  DNS  resolve error in Gluu Server.\nThe reason is the  DNS  used inside the chroot container; the  dns  used by the container is the Google DNS servers \nand the  DNS  for the host OS is not used. Therefore to fix this issue:   Change the DNS inside the container by editing the  /etc/resolv.conf  file and adding the DNS used by your organization",
            "title": "DNS names not resolving!"
        },
        {
            "location": "/admin-guide/faq/#forgot-the-admin-password",
            "text": "Gluu Server stores the admin password in the file  /install/community-edition-setup/setup.properties.last  under the\nproperty  ldapPass . Retrieve the data using the following command:  # grep ldapPass= /install/community-edition-setup/*.last   Warning  It is strongly recommended to remove the file from any production environment or encrypt the file",
            "title": "Forgot the admin password!"
        }
    ]
}