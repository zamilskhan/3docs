{
    "docs": [
        {
            "location": "/",
            "text": "Gluu Server Community Edition (CE) Docs\n\n\nIntroduction\n\n\nLicense\n\n\n\n\n\n\nHistory\n\n\nVersions 1 and 2\n\n\nVersion 3\n\n\nEnter OAuth2\n\n\n\n\n\n\nDesign Goals\n\n\nFree Open Source Identity Suite\n\n\nSupport most promising open standards\n\n\nLeverage existing business processes\n\n\nFree license\n\n\nWrite as a last resort\n\n\nNot just comprehensive, but easy to use\n\n\nHorizontal scalability\n\n\nExtreme flexibility\n\n\n\n\n\n\nArchitecture\n\n\nJ2EE Servlet container\n\n\nApache HTTP front end web server\n\n\nLDAP for Persistence\n\n\nWeb container plugins\n\n\n\n\n\n\n\n\n\n\nGluu Server Community Edition (CE) Docs\n#\n\n\nGluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.\n\n\nPrimarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation\n\n\nThe code is open source, and available on \nGithub\n.\n\n\nCommunity support can be enlisted on the \nGluu support site\n. If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of \nVIP support\n options.\n\n\nIntroduction\n#\n\n\nThe Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.\n\n\nLicense\n#\n\n\nAny software published by Gluu in the OX Project is under the \nMIT License\n.\nThe third party components have separate licenses.\n\n\n\n\n\n\n\n\nComponent\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nShibboleth\n\n\nApache2\n\n\n\n\n\n\nOpenDJ\n\n\nCDDL-1.0\n\n\n\n\n\n\nAsimba\n\n\nGNU APGL 3.0\n\n\n\n\n\n\nJagger\n\n\nMIT License\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGluu maintains a fork of OpenDJ 3 in \nour Github\n.\n\n\n\n\nHistory\n#\n\n\nGluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.\n\n\nVersions 1 and 2\n#\n\n\nVersions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.\n\n\nVersion 3\n#\n\n\nThe first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.\n\n\nEnter OAuth2\n#\n\n\nOAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for\n\nIDCubed\n. This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.\n\n\nDesign Goals\n#\n\n\nAt OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux.\n\n\nFree Open Source Identity Suite\n#\n\n\nOne of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.\n\n\nSupport most promising open standards\n#\n\n\nThe goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.\n\n\nLeverage existing business processes\n#\n\n\nWhere possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.\n\n\nFree license\n#\n\n\nThe components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.\n\n\nWrite as a last resort\n#\n\n\nUse the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!\n\n\nNot just comprehensive, but easy to use\n#\n\n\nThe Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.\n\n\nHorizontal scalability\n#\n\n\nSystem administrators should be able to add more servers to make the \nGluu Server scale as much as needed.\n\n\nExtreme flexibility\n#\n\n\nAs Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.\n\n\nArchitecture\n#\n\n\nThere are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.\nFollowing is a list of the technical components that comprise the Gluu Server.\n\n\nJ2EE Servlet container\n#\n\n\nMost of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.\n\n\nApache HTTP front end web server\n#\n\n\nAlthough there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content. \n\n\nLDAP for Persistence\n#\n\n\nLDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.\n\n\nWeb container plugins\n#\n\n\nToday, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.\n\n\nWeb agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.\n\n\nIf developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Home"
        },
        {
            "location": "/#gluu-server-community-edition-ce-docs",
            "text": "Gluu Server is a free open source identity provider (IDP) and access management suite of software primarily written in java. The Gluu Server combines best-of-breed open source identity and access management software with easy deployment and administration, and is engineered to support robust enterprise requirements for uptime and availability.  Primarily, the Gluu Server is used to achieve the following solutions:\n- Outbound and Inbound Single Sign-On (SSO)\n- Centralized authentication and authorization\n- Customer, partner, and employee authentication\n- Web & API access management\n- Strong authentication\n- Identity Federation  The code is open source, and available on  Github .  Community support can be enlisted on the  Gluu support site . If your organization needs to open private tickets with us, or needs an SLA or consultative support, Gluu offers a range of  VIP support  options.",
            "title": "Gluu Server Community Edition (CE) Docs"
        },
        {
            "location": "/#introduction",
            "text": "The Gluu Server is an identity and access management suite comprised of\nfree open source software (FOSS) components. Some of the software was\nwritten by Gluu (everything with an \"ox\" prefix, like \"oxAuth\"), and\nsome of the software we forked from existing open source projects like\nthe Shibboleth SAML identity provider, Forgerock community release of\nOpenDJ, the Asimba SAML proxy, the CAS authentication server and many\nmore components that are part of the Linux distributions.",
            "title": "Introduction"
        },
        {
            "location": "/#license",
            "text": "Any software published by Gluu in the OX Project is under the  MIT License .\nThe third party components have separate licenses.     Component  License      Shibboleth  Apache2    OpenDJ  CDDL-1.0    Asimba  GNU APGL 3.0    Jagger  MIT License      Note  Gluu maintains a fork of OpenDJ 3 in  our Github .",
            "title": "License"
        },
        {
            "location": "/#history",
            "text": "Gluu was founded in 2009 by Mike Schwartz. After selling his ISP to\nVerio in 1998, Mike advised many large companies on identity and access\nmanagement, directory services, and application security. In late 2008,\nMike had a hunch that Web single sign-on was too complex, too\nproprietary and too expensive for many organizations. He felt that a\nutility approach to SSO using open source software could provide an\nalternative to expensive enterprise solutions. The Gluu Server was\nenvisioned as an integrated identity platform, based on free open source\nsoftware, to make application security available to significantly\ngreater number of organizations.",
            "title": "History"
        },
        {
            "location": "/#versions-1-and-2",
            "text": "Versions 1 of the Gluu Server was based on Sun OpenSSO and OpenDS. Mike\npresented the idea at an OpenSSO community group at the European\nIdentity Conference in Munich in May 2009. Version 1 worked a little,\nbut there was no easy way to manage it. Version 2 of the Gluu Server had\na better UI, but it was just a facade--the UI didn't actually do\nanything to configure OpenSSO. Version 2 was launched after Mike\nSchwartz met with members of the InCommon steering committee in San\nAntonio in October 2009. At that meeting, Mike expressed concern that\nOpenSSO might be end-of-life. Oracle had recently purchased Sun\nMicrosystems, and before ForgeRock was formed, it seemed possible that\nOracle would simply migrate OpenSSO customers to Oracle Access Manager.\nBob Morgan from the University of Washington convinced Mike that the\nShibboleth IdP was a reasonable alternative, and arguably had even more\nfeatures in SAML, including fine grain access release policies, and a\nbetter approach for multi-party federation. As the InCommon federation's\nefforts to evangelize SAML federation would support Gluu's message,\nswitching had marketing advantages, and would reduce the event risk\naround OpenSSO. Shortly thereafter, a new project from scratch was\nlaunched for Gluu Server v3 with the goal of using templates to simplify\nthe management of the Shibboleth IdP.",
            "title": "Versions 1 and 2"
        },
        {
            "location": "/#version-3",
            "text": "The first live demo of the Gluu Server was presented at an InCommon\nevent in Atlanta, GA in early November 2010. At that demo, Hakeem Fahm,\nthen IT director at the University of the District of Columbia, was\nimpressed and decided that the Gluu Server was exactly what his campus\nneeded to join InCommon. Delivering the first Gluu Server into\nproduction took three months. The order was placed before Thanksgiving,\nand it was finally delivered in early February 2011. Mike helped write\nsome of the python scripts (few, if any of which are still in use), and\nestablish the operating procedures for delivery of the Gluu Server. In\n2011, a few more campuses also adopted the Gluu Server.",
            "title": "Version 3"
        },
        {
            "location": "/#enter-oauth2",
            "text": "OAuth2 had been on Gluu's roadmap since inception, but work started due\nto a consulting project Gluu had undertaken for IDCubed . This is the reason the OX software is\nMIT license--IDCubed insisted on it. The project was a flop--Gluu\ncouldn't deliver the graph based federated data solution quickly enough.\nBut as a result, Gluu was able to accelerate the launch of the OX OAuth2\nbased features, first with OpenID Connect in late 2011. Then in late\n2012, Gluu followed by introducing support for the User Managed Access\nProtocol, which Mike felt provided an Oauth2 based solution for access\nmanagement that was superior to Computer Associates' proprietary\nSiteminder access management framework.",
            "title": "Enter OAuth2"
        },
        {
            "location": "/#design-goals",
            "text": "At OSCON 2014, Gluu introduced easier to install packages for the Gluu\nServer, and support for the Ubuntu Juju orchestration framework. The\ngoal of these distributions was to promote adoption of OX in the major\ndistributions of Linux.",
            "title": "Design Goals"
        },
        {
            "location": "/#free-open-source-identity-suite",
            "text": "One of the things that has made access management difficult for\norganizations is that there is no one tool you can deploy to solve even\naverage requirements. The Gluu Server provides a recipe to deploy a\ncombination of the best free open source tools, working together.",
            "title": "Free Open Source Identity Suite"
        },
        {
            "location": "/#support-most-promising-open-standards",
            "text": "The goal of the Gluu Server is to support the minimum number of\nstandards necessary to authenticate people, and to authorize them to\naccess the resources they need to do business for the domain. The Gluu\nServer should be practical about supporting older protocols, but always\nstrive to be the first implementer of the most promising new protocols.",
            "title": "Support most promising open standards"
        },
        {
            "location": "/#leverage-existing-business-processes",
            "text": "Where possible, the Gluu Server goes to work with a minimal amount \nof changes to existing business processes. Don't \"rip and replace\",\nbut for new applications, use new protocols wherever possible to \navoid the creation of future upgrade work.",
            "title": "Leverage existing business processes"
        },
        {
            "location": "/#free-license",
            "text": "The components of the Gluu Server should be free to use in production.\nThis license strategy will produce the best software at the lowest \ntotal cost of ownership for the organization.",
            "title": "Free license"
        },
        {
            "location": "/#write-as-a-last-resort",
            "text": "Use the best software that exists. If something the Gluu Server needs\ndoesn't exist, it may become an OX project. If some group comes along and\nwrites software better than an existing OX component, use it!",
            "title": "Write as a last resort"
        },
        {
            "location": "/#not-just-comprehensive-but-easy-to-use",
            "text": "The Gluu Server should make it easy for domain system administrators\nto control access to Web and network resources. Usability is more\nimportant than features.",
            "title": "Not just comprehensive, but easy to use"
        },
        {
            "location": "/#horizontal-scalability",
            "text": "System administrators should be able to add more servers to make the \nGluu Server scale as much as needed.",
            "title": "Horizontal scalability"
        },
        {
            "location": "/#extreme-flexibility",
            "text": "As Kent Beck says, \"Embrace Change\". The key to the Gluu Server's success\nhas been its ability to handle all sorts of crazy requirements--quickly.\nSometimes raw speed is needed, but equally important is the ability for\nthe access management framework to be really smart.",
            "title": "Extreme flexibility"
        },
        {
            "location": "/#architecture",
            "text": "There are several key components that make Gluu Server a reality and \nwhile choosing, the open-source softwares were given preference. Most \nof the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container.\nFollowing is a list of the technical components that comprise the Gluu Server.",
            "title": "Architecture"
        },
        {
            "location": "/#j2ee-servlet-container",
            "text": "Most of the components of the Gluu Server are written in Java, and\ndeployed as a web application in a J2EE servlet container. Java was\nchosen because there is a wide array of high quality libraries,\nconvenient container services, and tools for managing high performance\napplications at run-time. In order to run the Gluu Server, you don't\nhave to be a Java expert. But it does help to have some knowledge of how\nJava applications are deployed and managed in tomcat, or a similar\nservlet container.",
            "title": "J2EE Servlet container"
        },
        {
            "location": "/#apache-http-front-end-web-server",
            "text": "Although there are pros and cons, we think its best to use the Apache\nHTTP server as the Internet facing Web server. There are a number of\nApache HTTP denial of service plugins. It is easier to handle re-directs\nfor things like discovery. And its convenient to have a non-J2EE way to\npublish static content.",
            "title": "Apache HTTP front end web server"
        },
        {
            "location": "/#ldap-for-persistence",
            "text": "LDAP was chosen for persistence for a number of reasons: (1) we understood\nhow to scale an LDAP directory service horizontally to accommodate a data set\nof any size; (2) LDAP servers offer cost-effective and reliable replication\nservices; (3) as LDAP is a standard, the Gluu server would not be locked into\nthe persistence solution of one vendor; (4) LDAP had built-in support for SAML\nand OAuth2 components. In the future the OX project may develop additional\npersistence backends. But this is not likely for the near-term.",
            "title": "LDAP for Persistence"
        },
        {
            "location": "/#web-container-plugins",
            "text": "Today, Web access management tools like CA Siteminder predominantly use\nthe web agent approach. Many large organizations have hundreds or\nthousands of \"web agents\" running on Apache and IIS.  Web agents are a great approach. Programmers don't have to know much\nabout the protocols. System administrators can configure the web server\nto use the central authorization server so we don't have to rely on the\nprogrammers to get security right. The programmers can obtain the user\nsession information in the environment variables. In OAuth2 information\nis serialized using JSON. For example, the entire id_token JWT is sent\nin one environment variable.  If developers want even more control, they can use the Gluu Server's\nAPI's directly: SAML, OpenID Connect, or UMA.",
            "title": "Web container plugins"
        },
        {
            "location": "/installation-guide/",
            "text": "1 Preparing VM for Gluu Server Installation\n#\n\n\nGluu Server Community Edition (CE) resource allocation depends on the backend data size. The requirements below are a bare minimum for Gluu CE to function properly. It is strongly recommended to allocate more resource for bigger backend data size.\n\n\n\n\n\n\n\n\nCPU Unit\n\n\nRAM\n\n\nDisk Space\n\n\nProcessor Type\n\n\n\n\n\n\n\n\n\n\n2\n\n\n4GB\n\n\n40GB\n\n\n64 Bit\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nThe processor type must be 64 bit for Gluu Server to function\n\n\n\n\n\n\nNote\n\n\nInsufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.\n\n\n\n\n1.1 Port\n#\n\n\nThe following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.\n\n\n\n\n\n\n\n\nPort Number\n\n\nProtocol\n\n\n\n\n\n\n\n\n\n\n80\n\n\ntcp\n\n\n\n\n\n\n443\n\n\ntcp\n\n\n\n\n\n\n\n\n1.2 Tomcat Memory Heap\n#\n\n\nThe minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). This estimate is based on the minumum RAM requirements. It is best to keep this ratio when tomcat memory is allocated in production environments as the size will depend on the available RAM; as an example, a 6GB tomcat memory heap in a production server with 8 GB ram is ideal for a small organization running Gluu CE.\n\n\n1.2.1 Alter Tomcat Memory Heap\n#\n\n\nThe tomcat heap memory is set from the \nsetup.py\n script prompt. \n\n\n\nThis property can also altered from the \n/opt/tomcat/conf/gluuTomcatWrapper.conf\n file inside the Gluu Server chroot container setting \nwrapper.java.initmemory\n and \nwrapper.java.maxmemory\n properties.\nUse the following command to open the gluuTomcatWrapper file\n\n\n# vi /opt/tomcat/conf/gluuTomcatWrapper.conf\n\n\n\n\nPlease change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.\n\n\n# Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536\n\n\n\n\n1.3 File Descriptor\n#\n\n\nGluu recommends setting the \nfile descriptors\n to 65k for Gluu Server CE. The following steps will help set the \nfile descriptor\n limit.\n\n\n\n\nEdit the \n/etc/security/limits.conf\n file.\n\n\nAdd the following lines in the \nlimits.conf\n file. Please replace the \nusername\n with the user that will install Gluu Server.\n\n\n\n\n* soft nofile 65536\n* hard nofile 262144\n\n\n\n\n\n\nEdit the \n/etc/pam.d/login\n by adding the line:\n\n\n\n\nsession required pam_limits.so\n\n\n\n\n\n\nUse the system file limit to increase the file descriptor limit to 65535. The system file limit is set in \n/proc/sys/fs/file-max\n.\n\n\n\n\necho 65535 > /proc/sys/fs/file-max\n\n\n\n\n\n\nUse the \nulimit\n command to set the file descriptor limit to the hard limit specified in \n/etc/security/limits.conf\n.\n\n\n\n\nulimit -n unlimited\n\n\n\n\n\n\nRestart your system.\n\n\n\n\n1.4 Cloud Specific Instructions\n#\n\n\n1.4.1 Amazon AWS\n#\n\n\nAmazon AWS provides a public and private IP address to its clouds. While\nrunning the \n/install/community-edition-setup/setup.py\n script, use the\nPrivate IP address.\n\n\n1.4.2 Microsoft Azure\n#\n\n\nAccessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started. \n\n\n1.4.2.1 Setting up VM\n#\n\n\n\n\n\n\nLog into Windows Azure Administrative Panel\n\n\n\n\n\n\nClick on \nVirtual Machines\n tab, and click \nCreate a Virtual Machine\n link\n\n\n\n\n\n\nFrom the menu, choose \nCompute\n --> \nVirtual Machine\n --> \nFrom Gallery\n branch.\n\n\n\n\n\n\nChoose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.\n\n\n\n\n\n\nProvide a name for the VM in the \nVirtual Machine Name\n field and use\n\nStandard\n for \nTier\n.\n\n\n\n\n\n\nSelect at least \nA2\n variant equipped with 3.5GB RAM in the \nSize\n\ndropdown menu.\n\n\n\n\n\n\nProvide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click \nNext\n.\n\n\n\n\n\n\nCreate a new cloud service and select \nNone\n for \nAvailability Set\n\n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click \nNext\n.\n\n\n\n\n\n\nChoose not to install \nVM Agent\n and click the \ntick\n button to\n   finalize the VM.\n\n\n\n\n\n\nGo to the \nDashboard\n tab of VM Management Panel and copy the \nDNS\n    Name\n. This is the name that is used to access the Gluu Server.\n\n\n\n\n\n\nSSH into the VM and install the Gluu Server. See our \nInstallation Guide\n for\n    installation instructions.\n\n\n\n\n\n\n1.4.2.2 Setup.py Configuration\n#\n\n\nThis section describes what to put in the prompt when \nsetup.py\n is run\nafter installing Gluu Server.\n\n\n\n\n\n\nIP Address: Do not change the default IP address; just press \nenter\n.\n\n\n\n\n\n\nhostname: Use the DNS name that was copied from the `VM Management Panel.\n\n\n\n\n\n\nUpdate hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file \n/etc/sysconfig/networking\n, and add the full DNS name.\n\n\n\n\n\n\nNow the chosen DNS name can be used to access the Gluu Server.\n\n\n\n\n\n\n1.4.3 Linode VM\n#\n\n\nThe Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.\n\n\n\n\nCheck for the current version of the kernel. If the output contains \n-Linode\n, then proceed\n\n\n\n\n# uname -a\n\n\n\n\n\n\nRun the following command to update the kernel\n\n\n\n\n# apt-get install linux-image-virtual grub2\n\n\n\n\n\n\nModify \ngrub\n file in the \n/etc/default/\n folder\n\n\n\n\n# vim /etc/default/grub\n\n\n\n\n\n\nEnsure that the following lines are present in the grub file\n\n\n\n\nGRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"\n\n\n\n\n\n\nFinally run the following commands to update \ngrub\n and reboot\n\n\n\n\n# update-grub\n# reboot",
            "title": "Preparing VM"
        },
        {
            "location": "/installation-guide/#1-preparing-vm-for-gluu-server-installation",
            "text": "Gluu Server Community Edition (CE) resource allocation depends on the backend data size. The requirements below are a bare minimum for Gluu CE to function properly. It is strongly recommended to allocate more resource for bigger backend data size.     CPU Unit  RAM  Disk Space  Processor Type      2  4GB  40GB  64 Bit      Warning  The processor type must be 64 bit for Gluu Server to function    Note  Insufficient memory may cause unexpected errors and bugs which will require adjusting the resources for a smooth performance.",
            "title": "1 Preparing VM for Gluu Server Installation"
        },
        {
            "location": "/installation-guide/#11-port",
            "text": "The following ports open for the Gluu Server to run. Please keep the ports open before installing Gluu Server.     Port Number  Protocol      80  tcp    443  tcp",
            "title": "1.1 Port"
        },
        {
            "location": "/installation-guide/#12-tomcat-memory-heap",
            "text": "The minimum recommended heap for tomcat server is 3GB for a test instance of Gluu Server Community Edition (CE). This estimate is based on the minumum RAM requirements. It is best to keep this ratio when tomcat memory is allocated in production environments as the size will depend on the available RAM; as an example, a 6GB tomcat memory heap in a production server with 8 GB ram is ideal for a small organization running Gluu CE.  1.2.1 Alter Tomcat Memory Heap #  The tomcat heap memory is set from the  setup.py  script prompt.   This property can also altered from the  /opt/tomcat/conf/gluuTomcatWrapper.conf  file inside the Gluu Server chroot container setting  wrapper.java.initmemory  and  wrapper.java.maxmemory  properties.\nUse the following command to open the gluuTomcatWrapper file  # vi /opt/tomcat/conf/gluuTomcatWrapper.conf  Please change the values in following parameters. This example is taken from a CentOS installation of Gluu Server.  # Initial Java Heap Size (in MB)\nwrapper.java.initmemory=512\n\n# Maximum Java Heap Size (in MB)\nwrapper.java.maxmemory=1536",
            "title": "1.2 Tomcat Memory Heap"
        },
        {
            "location": "/installation-guide/#13-file-descriptor",
            "text": "Gluu recommends setting the  file descriptors  to 65k for Gluu Server CE. The following steps will help set the  file descriptor  limit.   Edit the  /etc/security/limits.conf  file.  Add the following lines in the  limits.conf  file. Please replace the  username  with the user that will install Gluu Server.   * soft nofile 65536\n* hard nofile 262144   Edit the  /etc/pam.d/login  by adding the line:   session required pam_limits.so   Use the system file limit to increase the file descriptor limit to 65535. The system file limit is set in  /proc/sys/fs/file-max .   echo 65535 > /proc/sys/fs/file-max   Use the  ulimit  command to set the file descriptor limit to the hard limit specified in  /etc/security/limits.conf .   ulimit -n unlimited   Restart your system.",
            "title": "1.3 File Descriptor"
        },
        {
            "location": "/installation-guide/#14-cloud-specific-instructions",
            "text": "1.4.1 Amazon AWS #  Amazon AWS provides a public and private IP address to its clouds. While\nrunning the  /install/community-edition-setup/setup.py  script, use the\nPrivate IP address.  1.4.2 Microsoft Azure #  Accessing the Gluu Server on Azure can be a little bit tricky because of\nthe Public/Private IP. Azure assigns a new Public/Private IP\naddresses each time the server is started.   1.4.2.1 Setting up VM #    Log into Windows Azure Administrative Panel    Click on  Virtual Machines  tab, and click  Create a Virtual Machine  link    From the menu, choose  Compute  -->  Virtual Machine  -->  From Gallery  branch.    Choose Ubuntu Server 14.04 LTS or CentOS 6.7. Remember to set selinux\n   to permissive if you choose CentOS.    Provide a name for the VM in the  Virtual Machine Name  field and use Standard  for  Tier .    Select at least  A2  variant equipped with 3.5GB RAM in the  Size \ndropdown menu.    Provide an username to connect via ssh, and define an according\n   access password, or upload a certificate for an authentification\n   without passwords. Then, click  Next .    Create a new cloud service and select  None  for  Availability Set \n   option.\n        * Endpoints Section: This is where the port forwarding is set so\n      that the internal IP address could be selectively reachable from\n      the outside world. By default, only ssh tcp port 22 is there. The\n      public ports for http and https (tcp ports 80 and 443) have to be\n      added and mapped to the same private ports. If the cloud mappings\n      are flagged conflicting, proceed without setting them. Remember to\n      set them after the creation of the VM. Then, click  Next .    Choose not to install  VM Agent  and click the  tick  button to\n   finalize the VM.    Go to the  Dashboard  tab of VM Management Panel and copy the  DNS\n    Name . This is the name that is used to access the Gluu Server.    SSH into the VM and install the Gluu Server. See our  Installation Guide  for\n    installation instructions.    1.4.2.2 Setup.py Configuration #  This section describes what to put in the prompt when  setup.py  is run\nafter installing Gluu Server.    IP Address: Do not change the default IP address; just press  enter .    hostname: Use the DNS name that was copied from the `VM Management Panel.    Update hostname: Choose to update hostname for Ubuntu, but do not\n  change if you are running CentOS.\n        * For CentOS, manually update the file  /etc/sysconfig/networking , and add the full DNS name.    Now the chosen DNS name can be used to access the Gluu Server.    1.4.3 Linode VM #  The Linode Virtual Machines (VM) use a custom kernel which is not supported by Gluu Server, therefore the kernel must be updated before Gluu Server can be installed in Linode VM. The following steps will guide you through kernel update in the Linode VM.   Check for the current version of the kernel. If the output contains  -Linode , then proceed   # uname -a   Run the following command to update the kernel   # apt-get install linux-image-virtual grub2   Modify  grub  file in the  /etc/default/  folder   # vim /etc/default/grub   Ensure that the following lines are present in the grub file   GRUB_TIMEOUT=10\nGRUB_CMDLINE_LINUX=\"console=ttyS0,19200n8\"\nGRUB_DISABLE_LINUX_UUID=true\nGRUB_SERIAL_COMMAND=\"serial --speed=19200 --unit=0 --word=8 --parity=no --stop=1\"   Finally run the following commands to update  grub  and reboot   # update-grub\n# reboot",
            "title": "1.4 Cloud Specific Instructions"
        },
        {
            "location": "/installation-guide/install/",
            "text": "2 Install Gluu Server\n#\n\n\nGluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the \napt-get\n or \nyum install\n command.\n\n\n2.1 Ubuntu\n#\n\n\n2.1.1 Ubuntu Server 14.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\nGluu Server Status\n\n\n/etc/init.d/gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhile entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.2 Ubuntu Server 16.04\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nXenial Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/ubuntu/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\nGluu Server Status\n\n\n/etc/init.d/gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWhile entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.\n\n\nPlease see section 2.1.3 to complete installation.\n\n\n2.1.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\nGluu Server Status\n\n\n/etc/init.d/gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n2.1.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nTrusty & Xenial Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.2 CentOS\n#\n\n\n2.2.1 CentOS 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.2 CentOS 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.2.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\nGluu Server Status\n\n\nservice gluu-server-2.4.4 status\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\nGluu Server Status\n\n\n/sbin/gluu-serverd-2.4.4 status\n\n\n\n\n\n\n\n\n2.2.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nCentOS 7.2\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.3 Red Hat Enterprise Linux (RHEL)\n#\n\n\n2.3.1 RHEL 6.5\n#\n\n\nThe following commands will install Gluu Server \nchroot\n. The supported versions include 6.6,6.7 and 6.8\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.2 RHEL 7.2\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\nwget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\nwget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nImport GPG Key\n\n\nrpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\nyum clean all\n\n\n\n\n\n\nInstall Gluu Server\n\n\nyum install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.3.3 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder. The commands are different in RHEL 6.x and RHEL 7\n\n\n\n\nLog into Gluu Server \nchroot\n\n\nRun the setup script\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\nservice gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\nservice gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/sbin/gluu-serverd-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.3.4 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 6.x\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\nservice gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommand Description\n\n\nRHEL 7\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/sbin/gluu-serverd-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\nyum remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*\n\n\n\n\n\n\n\n\n2.4 Debian 8 (Jessie)\n#\n\n\nThe following commands will install Gluu Server \nchroot\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nAdd Gluu Repository\n\n\necho \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list\n\n\n\n\n\n\nAdd Gluu GPG Key\n\n\ncurl https://repo.gluu.org/debian/gluu-apt.key\n\n\n\n\n\n\nUpdate/Clean Repo\n\n\napt-get update\n\n\n\n\n\n\nInstall Gluu Server\n\n\napt-get install gluu-server-2.4.4\n\n\n\n\n\n\n\n\n2.4.1 Complete Installation\n#\n\n\nThe setup is completed by running the setup script \nsetup.py\n from the setup folder.\n\n Log into Gluu Server \nchroot\n\n\n Run the setup script\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStart Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 start\n\n\n\n\n\n\nLog into Gluu \nchroot\n\n\n/etc/init.d/gluu-server-2.4.4 login\n\n\n\n\n\n\nRun \nSetup Script\n\n\ncd /install/community-edition-setup/ \n./setup.py\n\n\n\n\n\n\n\n\n2.4.2 Uninstall Gluu Server\n#\n\n\nGluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.\n\n\n\n\n\n\n\n\nCommand Description\n\n\nJessie Commands\n\n\n\n\n\n\n\n\n\n\nStop Gluu Server\n\n\n/etc/init.d/gluu-server-2.4.4 stop\n\n\n\n\n\n\nUninstall Gluu Server\n\n\napt-get remove gluu-server-2.4.4\n\n\n\n\n\n\nRemove backup folder\n\n\nrm -rf /opt/gluu-server-2.4.4*",
            "title": "Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#2-install-gluu-server",
            "text": "Gluu Server CE is shipped in packages prepared for Ubuntu, CentOS, RHEL and Debian. The package installation follows the general procedure of adding the repo followed by the addition of RPM GPG key and finally installing with the  apt-get  or  yum install  command.",
            "title": "2 Install Gluu Server"
        },
        {
            "location": "/installation-guide/install/#21-ubuntu",
            "text": "2.1.1 Ubuntu Server 14.04 #  The following commands will install Gluu Server  chroot     Command Description  Trusty Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ trusty main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4    Gluu Server Status  /etc/init.d/gluu-server-2.4.4 status      Note   While entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.  Please see section 2.1.3 to complete installation.  2.1.2 Ubuntu Server 16.04 #  The following commands will install Gluu Server  chroot     Command Description  Xenial Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/ubuntu/ xenial main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/ubuntu/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4    Gluu Server Status  /etc/init.d/gluu-server-2.4.4 status      Note   While entering the \"deb\" command manually, make sure to enter an extra space between \"/ubuntu/\" and \"trusty main\". It is recommended to copy and paste the commands.  Please see section 2.1.3 to complete installation.  2.1.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script.   Log into Gluu Server  chroot  Run the setup script      Command Description  Trusty & Xenial Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py    Gluu Server Status  /etc/init.d/gluu-server-2.4.4 status     2.1.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Trusty & Xenial Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.1 Ubuntu"
        },
        {
            "location": "/installation-guide/install/#22-centos",
            "text": "2.2.1 CentOS 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  CentOS 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.2 CentOS 7.2 #  The following commands will install Gluu Server  chroot     Command Description  CentOS 7.2      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.2.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The server must be running so that the administrator can log into the chroot environment and run the script. The commands differ in CentO 6.x and CentOS 7.2   Log into Gluu Server  chroot  Run the setup script      Command Description  CentOS 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py    Gluu Server Status  service gluu-server-2.4.4 status        Command Description  CentOS 7.2      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py    Gluu Server Status  /sbin/gluu-serverd-2.4.4 status     2.2.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from CentOS. The server must be stopped to remove the package.     Command Description  CentOS 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  CentOS 7.2      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.2 CentOS"
        },
        {
            "location": "/installation-guide/install/#23-red-hat-enterprise-linux-rhel",
            "text": "2.3.1 RHEL 6.5 #  The following commands will install Gluu Server  chroot . The supported versions include 6.6,6.7 and 6.8     Command Description  RHEL 6.x      Add Gluu Repository  wget https://repo.gluu.org/centos/Gluu-centos6.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/centos/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.2 RHEL 7.2 #  The following commands will install Gluu Server  chroot     Command Description  RHEL 7      Add Gluu Repository  wget https://repo.gluu.org/rhel/Gluu-rhel7.repo -O /etc/yum.repos.d/Gluu.repo    Add Gluu GPG Key  wget https://repo.gluu.org/rhel/RPM-GPG-KEY-GLUU -O /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Import GPG Key  rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-GLUU    Update/Clean Repo  yum clean all    Install Gluu Server  yum install gluu-server-2.4.4     2.3.3 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder. The commands are different in RHEL 6.x and RHEL 7   Log into Gluu Server  chroot  Run the setup script      Command Description  RHEL 6.x      Start Gluu Server  service gluu-server-2.4.4 start    Log into Gluu  chroot  service gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py        Command Description  RHEL 7      Start Gluu Server  /sbin/gluu-serverd-2.4.4 start    Log into Gluu  chroot  /sbin/gluu-serverd-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.3.4 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from RHEL. The sevrer must be stopped to remove the package.     Command Description  RHEL 6.x      Stop Gluu Server  service gluu-server-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*        Command Description  RHEL 7      Stop Gluu Server  /sbin/gluu-serverd-2.4.4 stop    Uninstall Gluu Server  yum remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.3 Red Hat Enterprise Linux (RHEL)"
        },
        {
            "location": "/installation-guide/install/#24-debian-8-jessie",
            "text": "The following commands will install Gluu Server  chroot     Command Description  Jessie Commands      Add Gluu Repository  echo \"deb https://repo.gluu.org/debian/ stable main\" > /etc/apt/sources.list.d/gluu-repo.list    Add Gluu GPG Key  curl https://repo.gluu.org/debian/gluu-apt.key    Update/Clean Repo  apt-get update    Install Gluu Server  apt-get install gluu-server-2.4.4     2.4.1 Complete Installation #  The setup is completed by running the setup script  setup.py  from the setup folder.  Log into Gluu Server  chroot   Run the setup script     Command Description  Jessie Commands      Start Gluu Server  /etc/init.d/gluu-server-2.4.4 start    Log into Gluu  chroot  /etc/init.d/gluu-server-2.4.4 login    Run  Setup Script  cd /install/community-edition-setup/  ./setup.py     2.4.2 Uninstall Gluu Server #  Gluu Server uninstallation follows the same principle as package removal from Ubuntu. The server must be stopped to remove the package.     Command Description  Jessie Commands      Stop Gluu Server  /etc/init.d/gluu-server-2.4.4 stop    Uninstall Gluu Server  apt-get remove gluu-server-2.4.4    Remove backup folder  rm -rf /opt/gluu-server-2.4.4*",
            "title": "2.4 Debian 8 (Jessie)"
        },
        {
            "location": "/installation-guide/setup_py/",
            "text": "2.5.1 Setup Prompt\n#\n\n\nThe \nsetup.py\n script will bring up a prompt to provide information for certificate as well as the IP Address and the hostname for the Gluu Server. The prompt is given below.\n\n\nEnter IP Address [192.168.122.60] :\nEnter hostname [localhost] : centos.gluu.info\nEnter your city or locality : Austin\nEnter your state or province two letter code : TX\nEnter two letter Country Code : US\nEnter Organization Name : Gluu\nEnter email address for support at your organization : support@gluu.org\nEnter maximum RAM for tomcat in MB [3072] :\nOptional: enter password for oxTrust and LDAP superuser [hlE3vzf0hMdD] :\nInstall oxAuth OAuth2 Authorization Server? [Yes] :\nInstall oxTrust Admin UI? [Yes] :\nInstall Gluu OpenDJ LDAP Server? [Yes] :\nInstall Apache HTTPD Server [Yes] :\nInstall Shibboleth SAML IDP? [Yes] :\nInstall Asimba SAML Proxy? [Yes] :\nInstall CAS? [Yes] :\nInstall oxAuth RP? [Yes] :\nInstall Passport? [Yes] :\n\n\n\n\nIt is recommended to use \nhostname.domain\n structure for hostname and refrain from using \n127.x.x.x\n for IP address. \nIf you are not using a resolvable DNS host, you will need to add the hostname to your hosts file on the server which is running your browser. Login with the default user name \nadmin\n and the password printed back in the confirmation (also contained in \nsetup.properties.last\n (use the Unix command \ngrep --color -i pass\n to find the according line quickly) and look for the LDAP password which is the same as the admin password.\n\n\nMake sure you remove or encrypt setup.properties.last It has the clear text passwords for everything: \nLDAP, admin user, keystores, and 3DES salt\n. If something goes wrong, check \nsetup.log\n for a detailed step-by-step of the installation. As an alternative you may check the file \nsetup_errors.log\n to just see the errors (or stderr output from the scripts).\n\n\n\n\nWarning\n\n\nUse a FQDN (fully qualified domain name) as hostname and refrain from using 127.0.0.1 as IP address\n\n\n\n\n2.5.2 Script Command Line Options\n#\n\n\nThe \nsetup.py\n script can be used to configure your Gluu Server and to add initial data\nfor oxAuth and oxTrust to start. If \nsetup.properties\n is found\nin this folder, these properties will automatically be used instead of\nthe interactive setup.\n\n\nThe administrator can use the following command line options to include additional components:\n\n\n\n\n-a\n install Asimba\n\n\n-c\n install CAS\n\n\n-d\n specify the directory where community-edition-setup is located. Defaults to '.'\n\n\n-f\n specify \nsetup.properties\n file\n\n\n-h\n invoke this help\n\n\n-l\n install LDAP\n\n\n-n\n no interactive prompt before install starts. Run with \n-f\n\n\n-N\n no Apache httpd server\n\n\n-s\n install the Shibboleth IDP\n\n\n-u\n update hosts file with IP address/hostname\n\n\n-w\n get the development head war files\n\n\n\n\nExample Command: \n# ./setup.py -cas\n This command will install Gluu Server with CAS, Asimba and Shibboleth IDP.",
            "title": "Setup Script Options"
        },
        {
            "location": "/installation-guide/cluster/",
            "text": "Cluster with Gluu CE\n#\n\n\nIt is possible to setup a cluster of servers with Gluu Server CE. This page outlines the setup process of a cluster with two (2) nodes. It is possible to add more nodes, but it is recommened to contact Gluu for higher level solutions.\n\n\nDesign\n#\n\n\nThe following diagram outlines the design of the cluster.\n\n\n\nRequirements\n#\n\n\nFor complete deployment requirements and instructions, please see the \nDeployment Page\n.\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs. Please remember that the requirements from the deployment page will apply as well.\n\n\n\n\n\n\n\n\nNumber of VMs\n\n\nCPU Units\n\n\nRAM\n\n\nRoot Partion\n\n\nPort Requirements\n\n\n\n\n\n\n\n\n\n\n2\n\n\n2 CPU ea.\n\n\n8 GB\n\n\n40 GB\n\n\n4444 and 8989 (LDAP replication), 30865 (file system syncing)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nFor convenience, the nodes are identified as \nhost-1\n and \nhost-1\n\n\n\n\nCsync2 Installation\n#\n\n\nCentOS 6.x\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nInstall epel-release-latest by running \nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\n\n\n\n\n\n\nInstall \ncsync2\n package by running \nyum install csync2\n\n\n\n\n\n\nCentOS 7.x\n#\n\n\nOn the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources. \n\n\nBelow are the steps:\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nEnable epel-release repo: \n# yum install epel-release\n\n\n\n\n\n\nInstall compiler and development environment: \n# yum group install \"Development Tools\"\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# yum install librsync-devel\n\n\n\n\n\n\n# yum install gnutls-devel\n\n\n\n\n\n\n# yum install sqlite-devel\n\n\n\n\n\n\n\n\n\n\n# mkdir building_csync && cd building_csync/\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/usr/local/etc/csync2/\n directory for storing configuration (for convenience): \n# ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install\n. Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!\n\n\n\n\n\n\nUbuntu 14.x (compiling from sources)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nInstall csync2's dependencies:\n\n\n\n\n\n\n# apt-get install pkg-config\n\n\n\n\n\n\n# apt-get install libsqlite-dev\n\n\n\n\n\n\n# apt-get install libsqlite3-dev\n\n\n\n\n\n\n# apt-get install librsync-dev\n\n\n\n\n\n\n\n\n\n\nDownload the latest version of the tool from \nhere\n: \n# wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz\n\n\n\n\n\n\nUnpack: \n# tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/\n\n\n\n\n\n\nBuild & install, while directing it to use \n/etc/csync2/\n directory for storing configuration and \n/usr/sbin\n directory for executables (for convenience): \n./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install\n\n\n\n\n\n\nUbuntu 14.x (from repo)\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nRun \napt-get update\n\n\n\n\n\n\nRun \napt-get install csync2\n\n[TOC]\n\n\n\n\n\n\nPreparing VMs\n#\n\n\n\n\nInstall Gluu CE following the \nDeployment Page\n in \nhost-1\n\n\n\n\n\n\nNote\n\n\nThe following step must be done right after initial installation of the Gluu CE Package but before finalizing the setup by running the \nsetup.py\n script.\n\n\n\n\n\n\n\n\nCopy the \nsetup.properties.last\n file that is generated afther finalizing the installation of Gluu CE on \nhost-1\n and paste it in the \n/install/community-edition-setup/\n folder inside the \nhost-2\n chroot. Please remember that the interactive setup mode will not run with this command, so add keywords such as \n-a\n to include asimba, shibboleth or any other component that was installed. Read \nthis section\n in case you failed to setup Gluu CE in \nhost-2\n.\n\n\n\n\n\n\nFinalize the installation by running the setup script with any additional components that was installed in \nhost-1\n.\n\n\n\n\n\n\nLDAP Replication\n#\n\n\n\n\n\n\n\n\nhost-1\n\n\nhost-2\n\n\n\n\n\n\n\n\n\n\nIP Address eg. 192.168.6.1\n\n\nIp Address eg. 192.168.6.2\n\n\n\n\n\n\nLDAP admin pass\n\n\nLDAP admin pass\n\n\n\n\n\n\nldapGeneralConfigInstall.py\n\n\n\n\n\n\n\n\nreplicationSetup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRun \nldapGeneralConfigInstall.py\n in \nhost-1\n. This script will prepare the \nhost-1\n LDAP server to accept various configurations such as \nallow-pre-encoded-passwords\n or applyting the host and port for LDAP Server.\n\n\n\n\n\n\nRun \nreplicationSetup.py\n in \nhost-1\n and it will give a similar output as below:\n\n\n\n\n\n\n[ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$\n\n\n\n\n\n\nInitialize directory server replication with this command \n/opt/opendj/bin/dsreplication initialize\n and it will give the following output:\n\n\n\n\n[ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.\n\n\n\n\n\n\nNote\n\n\nOpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; an alternative is to use the same OpenDJ certificate/key pair for both nodes\n\n\n\n\nFile System Replication\n#\n\n\n\n\nAdvice\n\n\nThe backup feature is broken in some of earlier versions of csync2. In that case it msut either be disabled by commenting out \nbackup-*\n clauses in tool's configuration file, or build csync2 version 2.0+ from sources and use key \n-l\n in your xinetd.d's config (like \nserver_args     = -i -l -N idp1.gluu.org\n) on both nodes.\n\n\n\n\n\n\nWarning\n\n\nPlease verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ in different linux distributions.\n\n\n\n\ncsync2\n is used for file system syncing between \nhost-1\n and \nhost-2\n. The following locations are synced in between the two VMs.\n\n\n\n\n/opt/idp/conf\n\n\n/opt/idp/metadata\n\n\n/opt/idp/ssl\n\n\n/opt/tomcat/conf\n\n\n/etc/csync2/csync2.cfg\n\n\n\n\nCsync2 configuration for host-1\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nGenerate \ncsync2\n private key by running \ncsync2 -k csync2.key\n and put it into \n/etc/csync2/csync2.key\n file\n\n\n\n\n\n\nCopy the private key to \nhost-2\n and put it into the same file there\n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-1\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \nEnter\n accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\n Add IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org  \n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, followed by \n# chkconfig xinetd on\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\n\n\nNote\n\n\nThe status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n\n\n Configure \ncsync2.cfg\n to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n \n\nRun `mkdir -p /var/backups/csync2`\n\n\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCsync2 configuration for host-2\n#\n\n\n\n\n\n\nLog into Gluu-Server container\n\n\n\n\n\n\nPlease copy the private key generated on \nhost-1\n to \nhost-2\n and put it into \n/etc/csync2/csync2.key\n file \n\n\n\n\n\n\nGenerate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on \nhost-2\n (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:\n\n\n\n\n\n\nopenssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem\n\n\n\n\nIn case you've compiled csync from sources you may opt to just run \n# make cert\n while in the sources' directory, it will do everything for you.\n\n\n\n\nAdd IP and hostnames in the \nhosts\n file. In the hosts file example below \nhost-1\n is called \nidp1.gluu.org\n and \nhost-2\n is called \nidp2.gluu.org\n\n\n\n\n\n127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org\n\n\n\n\n\n\n Modify \ncsync2\n in the \n/etc/xinetd.d/\n folder (some packages may reqire you to install it first; run \n# yum install xinetd\n, then \n# chkconfig xinetd on\n):\n\n\n\n\n\n# default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}\n\n\n\n\n\n\n Run the following commands\n\n\n\n\n\nservice xinetd restart\nchkconfig xinetd on\n\n\n\n\nNote:\n The status can be checked by running \nchkconfig xinetd \u2013list\n and \niptables -L -nv | grep 30865\n. For confirmation, telnet 30865 port from the VMs.\n\n\n\n\n Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):\n\n\n\n\n\n#nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n} \n\n\n\n\n\n\n Start \ncsync2\n by running \ncsync2 -cvvv -N idp2.gluu.org\n\n\n\n\n\n Run \nmkdir -p /var/backups/csync2\n\n\n\n\n\n Add cronjob to automate csync2 run. The cronjob example is given below:\n\n\n\n1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log \n\n\n\n\nCertificate Management\n#\n\n\nThe certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to \n/etc/certs/\n on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks: \nhttpd.*\n, \nasimba.*\n, \nasimbaIDP.*\n and \nshibIDP.*\n to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).\n\n\nAfter that's done you still will need to update default system storage (\ncacerts\n file) at the 2nd node with these newly copied certificates.\n\n\n[Optional] Actions in case setup.properties.last method of installation didn't work for you\n#\n\n\nIn this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.\n\n\nThus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.\n\n\nTo achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:\n\n\n\n\n\n\nComment out \nauto younger;\n string in \ncsync2.cfg\n on both nodes to disable autoresolution of conflicts\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp1.gluu.org\n on the 1st node\n\n\n\n\n\n\nRun \n# csync2 -crvvv -N idp2.gluu.org\n on the 2nd node\n\n\n\n\n\n\nPrevious commands did initial scan and filled metadata database. Now run \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.\n\n\n\n\n\n\nYou should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this \n# csync2 -frvvv -N idp1.gluu.org /\n on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.\n\n\n\n\n\n\nRun \n# csync2 -xrvvv -N idp1.gluu.org\n on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.\n\n\n\n\n\n\nUncomment \nauto younger;\n string and proceed to installing cron jobs",
            "title": "Cluster with CE"
        },
        {
            "location": "/installation-guide/cluster/#cluster-with-gluu-ce",
            "text": "It is possible to setup a cluster of servers with Gluu Server CE. This page outlines the setup process of a cluster with two (2) nodes. It is possible to add more nodes, but it is recommened to contact Gluu for higher level solutions.",
            "title": "Cluster with Gluu CE"
        },
        {
            "location": "/installation-guide/cluster/#design",
            "text": "The following diagram outlines the design of the cluster.",
            "title": "Design"
        },
        {
            "location": "/installation-guide/cluster/#requirements",
            "text": "For complete deployment requirements and instructions, please see the  Deployment Page .\nThe requirements for Clusters vary only in the RAM requirement. Clusters require at least 8GB RAM for smooth performance. The requirements below are specific for Cluster Installation VMs. Please remember that the requirements from the deployment page will apply as well.     Number of VMs  CPU Units  RAM  Root Partion  Port Requirements      2  2 CPU ea.  8 GB  40 GB  4444 and 8989 (LDAP replication), 30865 (file system syncing)      Note  For convenience, the nodes are identified as  host-1  and  host-1   Csync2 Installation #  CentOS 6.x #    Log into Gluu-Server container    Install epel-release-latest by running  rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm    Install  csync2  package by running  yum install csync2    CentOS 7.x #  On the moment of writing csync2 can't be found in public repositories. The only option is to compile from sources.   Below are the steps:    Log into Gluu-Server container    Enable epel-release repo:  # yum install epel-release    Install compiler and development environment:  # yum group install \"Development Tools\"    Install csync2's dependencies:    # yum install librsync-devel    # yum install gnutls-devel    # yum install sqlite-devel      # mkdir building_csync && cd building_csync/    Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /usr/local/etc/csync2/  directory for storing configuration (for convenience):  # ./configure --sysconfdir /usr/local/etc/csync2/ && make && make install . Don't forget to update paths to csync's binaries and configuration files later on, as they are different from the ones used in examples in the main article!    Ubuntu 14.x (compiling from sources) #    Log into Gluu-Server container    Run  apt-get update    Install csync2's dependencies:    # apt-get install pkg-config    # apt-get install libsqlite-dev    # apt-get install libsqlite3-dev    # apt-get install librsync-dev      Download the latest version of the tool from  here :  # wget http://oss.linbit.com/csync2/csync2-2.0.tar.gz    Unpack:  # tar -xz -f ./csync2-2.0.tar.gz && cd csync2-2.0/    Build & install, while directing it to use  /etc/csync2/  directory for storing configuration and  /usr/sbin  directory for executables (for convenience):  ./configure --sysconfdir /etc/csync2/ --prefix /usr/ && make && make install    Ubuntu 14.x (from repo) #    Log into Gluu-Server container    Run  apt-get update    Run  apt-get install csync2 \n[TOC]",
            "title": "Requirements"
        },
        {
            "location": "/installation-guide/cluster/#preparing-vms",
            "text": "Install Gluu CE following the  Deployment Page  in  host-1    Note  The following step must be done right after initial installation of the Gluu CE Package but before finalizing the setup by running the  setup.py  script.     Copy the  setup.properties.last  file that is generated afther finalizing the installation of Gluu CE on  host-1  and paste it in the  /install/community-edition-setup/  folder inside the  host-2  chroot. Please remember that the interactive setup mode will not run with this command, so add keywords such as  -a  to include asimba, shibboleth or any other component that was installed. Read  this section  in case you failed to setup Gluu CE in  host-2 .    Finalize the installation by running the setup script with any additional components that was installed in  host-1 .",
            "title": "Preparing VMs"
        },
        {
            "location": "/installation-guide/cluster/#ldap-replication",
            "text": "host-1  host-2      IP Address eg. 192.168.6.1  Ip Address eg. 192.168.6.2    LDAP admin pass  LDAP admin pass    ldapGeneralConfigInstall.py     replicationSetup.py        Run  ldapGeneralConfigInstall.py  in  host-1 . This script will prepare the  host-1  LDAP server to accept various configurations such as  allow-pre-encoded-passwords  or applyting the host and port for LDAP Server.    Run  replicationSetup.py  in  host-1  and it will give a similar output as below:    [ldap@]$ python replicationSetup.py \nCreate a password for the replication admin: \nEnter number of OpenDJ servers: 2\nEnter the hostname of server 1: 192.168.6.1\nEnter the Directory Manager password for 192.168.6.1: xxxxx\nEnter the hostname of server 2: 192.168.6.2\nEnter the Directory Manager password for 192.168.6.2: yyyyy\n\nEstablishing connections ..... Done.\nChecking registration information ..... Done.\nConfiguring Replication port on server 192.168.6.1:4444 ..... Done.\nConfiguring Replication port on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN o=gluu on server 192.168.6.2:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.1:4444 ..... Done.\nUpdating registration configuration on server 192.168.6.2:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.1:4444 ..... Done.\nUpdating replication configuration for baseDN cn=schema on server 192.168.6.2:4444 ..... Done.\nInitializing registration information on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\nInitializing schema on server 192.168.6.2:4444 with the contents of server 192.168.6.1:4444 ..... Done.\n\nReplication has been successfully enabled.  Note that for replication to work you must initialize the contents of the base DNs that are being replicated (use dsreplication initialize to do so).\n\nSee /tmp/opendj-replication-8140652343601372868.log for a detailed log of this\noperation.\n\nEnabling Replication Complete.\n[ldap@...]$   Initialize directory server replication with this command  /opt/opendj/bin/dsreplication initialize  and it will give the following output:   [ldap@...]$ /opt/opendj/bin/dsreplication initialize\n\n\n>>>> Specify server administration connection parameters for the source server\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.1\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nGlobal Administrator User ID [admin]: \n\nPassword for user 'admin': #!0^GluU(sWoWSm)\n\n\n>>>> Specify server administration connection parameters for the destination\nserver\n\nDirectory server hostname or IP address [idp.gluu.org]: 192.168.6.2\n\nDirectory server administration port number [4444]: \n\nHow do you want to trust the server certificate?\n\n    1)  Automatically trust\n    2)  Use a truststore\n    3)  Manually validate\n\nEnter choice [3]: 1\n\nYou must choose at least one base DN to be initialized.\nInitialize base DN o=gluu? (yes / no) [yes]: \n\n\nInitializing the contents of a base DN removes all the existing contents of\nthat base DN.  Do you want to remove the contents of the selected base DNs on\nserver 192.168.6.2:4444 and replace them with the contents of server\n192.168.6.1:4444? (yes / no) [yes]: \n\n\nInitializing base DN o=gluu with the contents from 192.168.6.1:4444:\n0 entries processed (0 % complete).\n36336 entries processed (99 % complete).\nBase DN initialized successfully.\n\nSee /tmp/opendj-replication-808135637744675184.log for a detailed log of this\noperation.   Note  OpenDJ may become picky about certificates used for SSL connections during replication in certain linux distros. Make sure you've added certificates of each OpenDJ instance to default java key storage of each node; an alternative is to use the same OpenDJ certificate/key pair for both nodes",
            "title": "LDAP Replication"
        },
        {
            "location": "/installation-guide/cluster/#file-system-replication",
            "text": "Advice  The backup feature is broken in some of earlier versions of csync2. In that case it msut either be disabled by commenting out  backup-*  clauses in tool's configuration file, or build csync2 version 2.0+ from sources and use key  -l  in your xinetd.d's config (like  server_args     = -i -l -N idp1.gluu.org ) on both nodes.    Warning  Please verify all pathes (for executables, keys etc) in configuration files' examples before using them in your production instance, as they may differ in different linux distributions.   csync2  is used for file system syncing between  host-1  and  host-2 . The following locations are synced in between the two VMs.   /opt/idp/conf  /opt/idp/metadata  /opt/idp/ssl  /opt/tomcat/conf  /etc/csync2/csync2.cfg   Csync2 configuration for host-1 #    Log into Gluu-Server container    Generate  csync2  private key by running  csync2 -k csync2.key  and put it into  /etc/csync2/csync2.key  file    Copy the private key to  host-2  and put it into the same file there    Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-1  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit  Enter  accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync 2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.    Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org      Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , followed by  # chkconfig xinetd on   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp1.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on   Note  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.     Configure  csync2.cfg  to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages)   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org     Run `mkdir -p /var/backups/csync2`     Add cronjob to automate csync2 run. The cronjob example is given below:   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp1.gluu.org -xv 2>/var/log/csync2.log   Csync2 configuration for host-2 #    Log into Gluu-Server container    Please copy the private key generated on  host-1  to  host-2  and put it into  /etc/csync2/csync2.key  file     Generate certificate/key pair that will be used to establish SSL protection layer for incoming connections by running next commands on  host-2  (location of the files and their names are hardcoded into executable). Don't fill any fields, just hit \"Enter\" accepting default values:    openssl genrsa -out /etc/csync2_ssl_key.pem 1024\nopenssl req -new -key /etc/csync2_ssl_key.pem -out /etc/csync2_ssl_cert.csr\nopenssl x509 -req -days 600 -in /etc/csync2_ssl_cert.csr -signkey /etc/csync2_ssl_key.pem \\\n-out /etc/csync2_ssl_cert.pem  In case you've compiled csync from sources you may opt to just run  # make cert  while in the sources' directory, it will do everything for you.   Add IP and hostnames in the  hosts  file. In the hosts file example below  host-1  is called  idp1.gluu.org  and  host-2  is called  idp2.gluu.org   127.0.0.1       localhost\n::1             ip6-localhost ip6-loopback\nff02::1         ip6-allnodes\nff02::2         ip6-allrouters\n192.168.6.1     idp1.gluu.org\n192.168.6.2     idp2.gluu.org    Modify  csync2  in the  /etc/xinetd.d/  folder (some packages may reqire you to install it first; run  # yum install xinetd , then  # chkconfig xinetd on ):   # default: off\n# description: csync2\nservice csync2\n{\n        flags           = REUSE\n        socket_type     = stream\n        wait            = no\n        user            = root\n        group           = root\n        server          = /usr/sbin/csync2\n        server_args     = -i -N idp2.gluu.org\n        port            = 30865\n        type            = UNLISTED\n        #log_on_failure += USERID\n        disable         = no\n        # only_from     = 192.168.199.3 192.168.199.4\n}    Run the following commands   service xinetd restart\nchkconfig xinetd on  Note:  The status can be checked by running  chkconfig xinetd \u2013list  and  iptables -L -nv | grep 30865 . For confirmation, telnet 30865 port from the VMs.    Configure `csync2.cfg` to reflect the configuration below (Please note that csync2 doesn't allow to use symlinks in this file; you'll may need to correct full paths to certain directories as they may change in future Gluu's CE packages):   #nossl * *;\ngroup cluster_group\n{\n\n        host idp1.gluu.org;\n        host idp2.gluu.org;\n\n        key /etc/csync2/csync2.key;\n        include /etc/csync2/csync2.cfg;\n        include /opt/idp/conf;\n        include /opt/idp/metadata;\n        include /opt/idp/ssl;\n        include /opt/apache-tomcat-7.0.65/conf;\n\n        exclude *~ .*;\n\n\n        action\n        {\n\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        action\n        {\n                pattern /opt/apache-tomcat-7.0.65/conf/*;\n\n                exec \"/sbin/service tomcat restart\";\n                logfile \"/var/log/csync2_action.log\";\n                do-local;\n        }\n\n        backup-directory /var/backups/csync2;\n        backup-generations 3;\n\n        auto younger;\n}     Start  csync2  by running  csync2 -cvvv -N idp2.gluu.org    Run  mkdir -p /var/backups/csync2    Add cronjob to automate csync2 run. The cronjob example is given below:  1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59 * * * *    /usr/sbin/csync2 -N idp2.gluu.org -xv 2>/var/log/csync2.log",
            "title": "File System Replication"
        },
        {
            "location": "/installation-guide/cluster/#certificate-management",
            "text": "The certificates do not vary in the manual cluster configuration. The certificates should be updated manually \nin each host, when required. Move to  /etc/certs/  on the 1st node (inside the container). Copy all keys, certs and key storages conforming to these masks:  httpd.* ,  asimba.* ,  asimbaIDP.*  and  shibIDP.*  to the same directory on the 2nd node (overwriting files that exist there; you may opt to backup them first, just in case).  After that's done you still will need to update default system storage ( cacerts  file) at the 2nd node with these newly copied certificates.",
            "title": "Certificate Management"
        },
        {
            "location": "/installation-guide/cluster/#optional-actions-in-case-setuppropertieslast-method-of-installation-didnt-work-for-you",
            "text": "In this case jks keystores you'll be moving to the 2nd node will be protected by passwords hardcoded into different configuration files on the 1st node, which are different from the similar passwords hardcoded into the same files on the 2nd node.  Thus you MUST ensure that the 1st node will be the one that will initialize the 2nd node during first csync's run (i.e., that it will win any conflicts due to changes in files that csync may detect during its very first run), as otherwise different components won't be able to decrypt these keystores and will fail.  To achieve this you should run initial sync manualy after completing configuring it, but before you install cron jobs:    Comment out  auto younger;  string in  csync2.cfg  on both nodes to disable autoresolution of conflicts    Run  # csync2 -crvvv -N idp1.gluu.org  on the 1st node    Run  # csync2 -crvvv -N idp2.gluu.org  on the 2nd node    Previous commands did initial scan and filled metadata database. Now run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node. That will try to sync files with the 2nd node, and most likely will fail to replicate all files due to some conflicts.    You should be now in a state of conflict, as certain files in directories to be synced differ between nodes and tool can't decide which to prefer. Run this  # csync2 -frvvv -N idp1.gluu.org /  on the 1st node to mark its files that still in dirty state as the ones that will win any conflict next time.    Run  # csync2 -xrvvv -N idp1.gluu.org  on the 1st node to complete your initial sync. Now all your 2nd node's directories covered by csync should be identical to the 1st node's.    Uncomment  auto younger;  string and proceed to installing cron jobs",
            "title": "[Optional] Actions in case setup.properties.last method of installation didn't work for you"
        },
        {
            "location": "/upgrade/",
            "text": "4 Upgrading Gluu Server CE\n#\n\n\nUpgrading a Gluu Server is NOT a simple \napt-get upgrade\n. The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:\n\n\n\n\nInstall new version\n\n\nExport the data from your current version\n\n\nStop the current Gluu Server\n\n\nStart the new version of Gluu Server\n\n\nImport data into the new server\n\n\n\n\nGluu provides the necessary \nscripts\n to perform the import and export of the data in and out of the servers.\n\n\n\n\nNOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one. \n\n\n\n\n4.1 Export the data from the current installation\n#\n\n\n# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py\n\n\n\n\nThe export script will generate a directory called \nbackup_24\n which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.\n\n\n4.2 Install the latest version of the Gluu server\n#\n\n\nStop the current version of the gluu-server.\n\n\n# service gluu-server-2.4.x stop\n\n\n\n\nConsult the \ninstallation guide\n of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version \n2.4.y\n, then:\n\n\n# cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py\n\n\n\n\nEnter the required information for the setup and complete the installation.\n\n\n4.3 Import your old data\n#\n\n\nGo to the folder where you have the \nbackup_24\n folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.\n\n\n# cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py\n\n\n\n\nInstall the \npython-pip\n package using your package manager.\n\n\n# apt-get install python-pip\n\nor\n\n# yum -y install python-pip\n\n\n\n\nInstall the \njson-merge\n Python package and run the import script.\n\n\n# pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24\n\n\n\n\nAny error or warning will 4be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "Upgrade Gluu Server"
        },
        {
            "location": "/upgrade/#4-upgrading-gluu-server-ce",
            "text": "Upgrading a Gluu Server is NOT a simple  apt-get upgrade . The admin needs to explicitly install the version of the Gluu Server. It generally involves the following steps:   Install new version  Export the data from your current version  Stop the current Gluu Server  Start the new version of Gluu Server  Import data into the new server   Gluu provides the necessary  scripts  to perform the import and export of the data in and out of the servers.   NOTE: In this documentation we are specifying '2.4.x' as older version and '2.4.y' the latest one.",
            "title": "4 Upgrading Gluu Server CE"
        },
        {
            "location": "/upgrade/#41-export-the-data-from-the-current-installation",
            "text": "# service gluu-server-2.4.x login\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n\n# chmod +x export24.py\n\n# ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation.\nCheck the log file generated in the directory for any errors.",
            "title": "4.1 Export the data from the current installation"
        },
        {
            "location": "/upgrade/#42-install-the-latest-version-of-the-gluu-server",
            "text": "Stop the current version of the gluu-server.  # service gluu-server-2.4.x stop  Consult the  installation guide  of the respective distribution about how to install the Gluu Server using the package manager.\nOnce the package manager has installed the version  2.4.y , then:  # cp -r /opt/gluu-server-2.4.x/root/backup_24/ /opt/gluu-server-2.4.y/root/\n\n# service gluu-server-2.4.y start\n\n# service gluu-server-2.4.y login\n\n# cp backup_24/setup.properties /install/community-edition-setup/\n\n# cd /install/community-edition-setup/\n\n# ./setup.py  Enter the required information for the setup and complete the installation.",
            "title": "4.2 Install the latest version of the Gluu server"
        },
        {
            "location": "/upgrade/#43-import-your-old-data",
            "text": "Go to the folder where you have the  backup_24  folder (if the above commands were followed, it is in /root/) and  get the necessary scripts.  # cd ~\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/import24.py\n\n# wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/ldif.py  Install the  python-pip  package using your package manager.  # apt-get install python-pip\n\nor\n\n# yum -y install python-pip  Install the  json-merge  Python package and run the import script.  # pip install jsonmerge\n\n# chmod +x import24.py\n\n# ./import24.py backup_24  Any error or warning will 4be displayed in the terminal or can be seen in the import log generated. Now the admin should be able to log into the oxTrust web-UI with the old admin credentials and see all previous data in place.",
            "title": "4.3 Import your old data"
        },
        {
            "location": "/upgrade/update/",
            "text": "Gluu Server Update Package\n#\n\n\nGluu Server update packages are released to fix urgent issues, with low \nimpact on deployment. Normally these involve updates to the java code,\neffected replacing the \nwar\n file. These are installed using \n\nyum\n or \napt-get\n command.\n\n\nCheck version of installed Gluu CE server.\n#\n\n\n\n\nVersion of the server can be found from the name of the installed home Gluu directory\n\n\nBelow is an alternate method to determine the version of the installed CE server.\n\n\n\n\noxTrust version: cat /opt/tomcat/webapps/identity/META-INF/MANIFEST.MF\n\n \noxAuth version: cat /opt/tomcat/webapps/oxauth/META-INF/MANIFEST.MF\n\n\n\n\nBackup\n#\n\n\nIt is highly recommended to stop the Gluu Server, and \ntar\n \nfolder \n/opt/gluu-server-2.4.4\n to ensure speedy recovery from any \nunexpected hiccup. If the organization has any other contingency plans,\nthat is ok too.\n\n\n\n\nWarning\n\n\nPlease make sure that there is enough disk space to tar the entire \nGluu Server, at least 4GB of Disk Space is recommended.\n\n\n\n\nUse the following commands to tar the Gluu Server folder from the host\nOS:\n\n\n# service gluu-server-2.4.4 stop\n# tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/\n\n\n\n\nInstall Update Package\n#\n\n\nGluu Server update packages are available from the Gluu Repository.\nMake sure to stop Gluu Server before installing and finalizing the \nupdate package.\n\n\n\n\nCentOS 6.x/7.2, RHEL 6/7:\n \n\n\n\n\n# yum update\n# service gluu-server-2.4.4 stop\n# yum install gluu-updater-2.4.4\n\n\n\n\n\n\n\nUbuntu Server 14.04/16.04, Debian 8:\n \n\n\n\n\n# apt-get update\n# service gluu-server-2.4.4 stop\n# apt-get install gluu-updater-2.4.4\n\n\n\n\n\nAfter the update package is installed, use the following commands to \nfinalize the installation by running the update script. \n\n\n# service gluu-server-2.4.4 start\n# service gluu-server-2.4.4 login\n# cd /opt/upd/2.4.4.sp2/bin\n# ./update_war.sh\n\n\n\n\nUpon successful update, check the version again to confirm on the update.\n\n\n NOTE: It is recommended to wait for few minutes while the changes take place and \nGluu Server CE can be used.",
            "title": "Patch Gluu Server"
        },
        {
            "location": "/upgrade/update/#gluu-server-update-package",
            "text": "Gluu Server update packages are released to fix urgent issues, with low \nimpact on deployment. Normally these involve updates to the java code,\neffected replacing the  war  file. These are installed using  yum  or  apt-get  command.",
            "title": "Gluu Server Update Package"
        },
        {
            "location": "/upgrade/update/#check-version-of-installed-gluu-ce-server",
            "text": "Version of the server can be found from the name of the installed home Gluu directory  Below is an alternate method to determine the version of the installed CE server.   oxTrust version: cat /opt/tomcat/webapps/identity/META-INF/MANIFEST.MF \n  oxAuth version: cat /opt/tomcat/webapps/oxauth/META-INF/MANIFEST.MF",
            "title": "Check version of installed Gluu CE server."
        },
        {
            "location": "/upgrade/update/#backup",
            "text": "It is highly recommended to stop the Gluu Server, and  tar  \nfolder  /opt/gluu-server-2.4.4  to ensure speedy recovery from any \nunexpected hiccup. If the organization has any other contingency plans,\nthat is ok too.   Warning  Please make sure that there is enough disk space to tar the entire \nGluu Server, at least 4GB of Disk Space is recommended.   Use the following commands to tar the Gluu Server folder from the host\nOS:  # service gluu-server-2.4.4 stop\n# tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/",
            "title": "Backup"
        },
        {
            "location": "/upgrade/update/#install-update-package",
            "text": "Gluu Server update packages are available from the Gluu Repository.\nMake sure to stop Gluu Server before installing and finalizing the \nupdate package.   CentOS 6.x/7.2, RHEL 6/7:     # yum update\n# service gluu-server-2.4.4 stop\n# yum install gluu-updater-2.4.4   Ubuntu Server 14.04/16.04, Debian 8:     # apt-get update\n# service gluu-server-2.4.4 stop\n# apt-get install gluu-updater-2.4.4  After the update package is installed, use the following commands to \nfinalize the installation by running the update script.   # service gluu-server-2.4.4 start\n# service gluu-server-2.4.4 login\n# cd /opt/upd/2.4.4.sp2/bin\n# ./update_war.sh  Upon successful update, check the version again to confirm on the update.   NOTE: It is recommended to wait for few minutes while the changes take place and \nGluu Server CE can be used.",
            "title": "Install Update Package"
        },
        {
            "location": "/admin-guide/",
            "text": "Gluu Server Administrative Interface\n\n\nWelcome Page\n\n\nConfiguration\n\n\nOrganization Configuration\n\n\nJSON Configuration\n\n\nManage Authentication\n\n\nManage Custom Scripts\n\n\nManage Registration\n\n\nAttributes\n\n\nCache Refresh\n\n\nConfigure Log Viewer\n\n\nView Log File\n\n\nServer Status\n\n\nCertificates\n\n\n\n\n\n\nSAML\n\n\nOutbound\n\n\n\n\n\n\nOpenID Connect\n\n\nUMA\n\n\nUsers\n\n\nPersonal\n\n\n\n\n\n\n\n\n\n\nGluu Server Administrative Interface\n#\n\n\nThe administration interface (oxTrust) is accessible from the \nhostname\n provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username \nadmin\n and the \nLDAP superuser\n password. \n\n\nWelcome Page\n#\n\n\nThe administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.\n\n\n\nThe menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under \nUsers\n and the user-profile is under \nPersonal\n.\n\n\nConfiguration\n#\n\n\n\n\nThe configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.\n\n\nOrganization Configuration\n#\n\n\nThere are three sections in the organization configuration page which are \nSystem Configuration\n, \nSMTP Server Configuration\n and \nOxTrust Settings\n. These sections are detailed below with screenshots.\n\n\n\n\nSystem Configuration\n\nGluu Server CE is shipped with a built-in \nWhite Pages\n feature which can be enabled from the system configuration page. This page also contains the options to enable \nSelf-Service Password Reset\n which allows the Gluu Server users to reset their password via email. This options depends on the \nSMTP Server Configuration\n, also available under the organization configuration page. Additionally the \nSCIM Support\n can be enabled from the System Configuration page. If the organization uses any custom \nDNS Server(s)\n, the address should be updated from the System Configuration interface.\n\n\n\nSMTP Server Configuration\n\nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.\n\n\n\nOxTrust Settings\n\nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.\n\n\n\n\nJSON Configuration\n#\n\n\nThe configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the \nJSON Configuration\n menu\n\n\n\nThe oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the \nUpdate\n button on the bottom of the page. \n\n\nThe oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.\n\n\nThe oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a \nxls\n file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields\n\n\nManage Authentication\n#\n\n\nThe \nManage Authentication\n page contains the internal OpenDJ settings for Gluu Server CE. The \nDefault Authentication Method\n defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The \noxTrust authentication mode\n decides the authentication mechasims for the users logging into the oxTrust admin interface.\n\n\n\nManage Custom Scripts\n#\n\n\nIt will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.\n\n\n\n\nThe details about the custom scripts are given later in this guide.\n\n\nManage Registration\n#\n\n\nGluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.\n\n\nAttributes\n#\n\n\nThe attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The \nShow All Attributes\n button will show the inactive attributes too. Custom attributes can be added by clicking the \nAdd Attribute\n button and filling up a simple form. \n\n\n\n\nCache Refresh\n#\n\n\nCache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The \nCache Refresh\n will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the \nPolling interval (minutes)\n form. The key attributes, object class and the source attributes can be defined from the \nCustomer  BackendKey/Attributes\n tab. The backend server address, bind DN and other information must go to the \nSource Backend LDAP Servers\n tab.\n\n\nConfigure Log Viewer\n#\n\n\nThe logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.\n\n\nView Log File\n#\n\n\nThe log files are listed in the \nView Log File\n page under the \nAllowed Log Files\n tab. The individual logs can be tailed by clicking them. The \nConfiguration\n contains the last line count which will show the number of lines specified from the log in the \nTail of Log File\n tab. This section is an alternative to getting into the Gluu \nchroot\n and tailing the log files.\n\n\nServer Status\n#\n\n\nThis page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.\n\n\nCertificates\n#\n\n\nThe certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.\n\n\nSAML\n#\n\n\nGluu Server CE contains all SAML related functionalities under the \nSAML\n tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA. \n\n\nOutbound\n#\n\n\n\n\nThe \nTrust Relationships\n page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.\n\n\nOpenID Connect\n#\n\n\nOpenID Connect is another protocol supported by Gluu Server CE following the \nopenID Connect specifications\n. The scopes page contains the \nAdd Scope\n button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.\n\n\n\n\nThe OpenID Connect clients are accessible from the \nClients\n page under \nOpenID Connect\n tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the \nAdd Client\n button.\n\n\n\n\nUMA\n#\n\n\nUMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the \nAdd Scope Description\n button.\n\n\n\nUMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the \nAdd Resource Set\n button.\n\n\n\nUsers\n#\n\n\nUsers tab allows Gluu admin to do various task, including add admin, search users, Import users from file.\n\n\nPersonal\n#\n\n\nPersonal tab allows the individual person to view his basic profile and modify certain fields.",
            "title": "Gluu Server UI"
        },
        {
            "location": "/admin-guide/#gluu-server-administrative-interface",
            "text": "The administration interface (oxTrust) is accessible from the  hostname  provided in the prompt from the setup script. After the installation is complete, log in to the web-based interface with the username  admin  and the  LDAP superuser  password.",
            "title": "Gluu Server Administrative Interface"
        },
        {
            "location": "/admin-guide/#welcome-page",
            "text": "The administrator is taken to the welcome page if the username and the password is correct. Some basic information about the VM/server is displayed in the welcome screen. The version is displayed on top followed by free memory,disk space. The health of the VM/server can be easily determined from the welcome page. There is a photo icon on the right hand top side of the page which can be used to navigate to the user-profile and logging out of Gluu Server CE.  The menu on the left side of the welcome page is used to navigate the admin interface for Gluu Server. The menu has separate buttons for SAML, OpenID Connect and UMA. The user-management menu is found under  Users  and the user-profile is under  Personal .",
            "title": "Welcome Page"
        },
        {
            "location": "/admin-guide/#configuration",
            "text": "The configuration tab contians the tools to configure Gluu Server CE. This section is dedicated to all tuning and tinkering except integration tools.\nThe configuration menu is divided in to other sections which are revealed on click. The administrator can manage authentication, registration, attributes, cache-refresh,logs etc. from this menu.  Organization Configuration #  There are three sections in the organization configuration page which are  System Configuration ,  SMTP Server Configuration  and  OxTrust Settings . These sections are detailed below with screenshots.   System Configuration \nGluu Server CE is shipped with a built-in  White Pages  feature which can be enabled from the system configuration page. This page also contains the options to enable  Self-Service Password Reset  which allows the Gluu Server users to reset their password via email. This options depends on the  SMTP Server Configuration , also available under the organization configuration page. Additionally the  SCIM Support  can be enabled from the System Configuration page. If the organization uses any custom  DNS Server(s) , the address should be updated from the System Configuration interface.  SMTP Server Configuration \nThe mail server used by the Gluu Server to send notification to the pre-selected email address is configured in this page/panel. All the fields in this page are manadory and the configuration can be tested before confirmation. The fields are self-explanatory and simple such as hostname, user, password, ssl-requirement, authentication requirement, sending name and address.  OxTrust Settings \nSome basic information abouht the administrator interface is available in this page. The administrator can find out the oxTrust build date and number by accessing the oxTrust settings page. The administrator can change the organization name, logo and favicon settings from this page as well. Finally oxTrust Settings page contains the name of the administrator group for Gluu Server. The users added in this group will have administrator access in Gluu Server where they will be able to maintain/configure the server.   JSON Configuration #  The configuration files are accessible from the administrator interface (oxTrust). There are three tabs under the  JSON Configuration  menu  The oxtrust JSON configuration file is accessible from this tab and it can be edited from this page. The changes are updated by clicking on the  Update  button on the bottom of the page.   The oxAuth JSON configuration page gives easy access to the different endpoints used by Gluu Server CE. This page also contains the supported response, grants and algorithms among other information. The details will follow later on this documentation.  The oxTrust Import Person Configuration page contains the configuration for the file method of importing users into Gluu Server CE. The administrator can import users from a  xls  file which must be defined in this tab to import data in the LDAP attributes. The default format should contain the following fields  Manage Authentication #  The  Manage Authentication  page contains the internal OpenDJ settings for Gluu Server CE. The  Default Authentication Method  defines the authentication mechanism used for general authentication and oxTrust authentication. The separation is introduced because the users logging into Service Providers (SP) do not see the administrative console. The  oxTrust authentication mode  decides the authentication mechasims for the users logging into the oxTrust admin interface.  Manage Custom Scripts #  It will not be an understatement to say that the custom script feature makes Gluu Server CE so robust and dynamic. The scripts are available for all intents and purposes the major being multi-factor authentication. There are many custom scritps included with the vanilla Gluu Server CE which can be enabled by clicking the check box.   The details about the custom scripts are given later in this guide.  Manage Registration #  Gluu Server CE is shiped with the feature to register users via the user-registration endpoint. The registry feature contains a Captcha which can be disabled from this page. Additionally it is possible to enable registration configuration from attributes.  Attributes #  The attributes that are avalaible in the Gluu Server CE is found in this page. The administration can only see the active attributes when this page is accessed. The  Show All Attributes  button will show the inactive attributes too. Custom attributes can be added by clicking the  Add Attribute  button and filling up a simple form.    Cache Refresh #  Cache Refresh is the mechanism used by Gluu Server CE to import users from a backend LDAP/AD data source. The entire configuration is handled from this page. The  Cache Refresh  will notify the administrator of any problem with cache refresh the last time it was run. The frequency of cache refresh is also set from this page with the  Polling interval (minutes)  form. The key attributes, object class and the source attributes can be defined from the  Customer  BackendKey/Attributes  tab. The backend server address, bind DN and other information must go to the  Source Backend LDAP Servers  tab.  Configure Log Viewer #  The logs for oxauth, oxtrust, cache refresh and the tomcat log can be configured from this tab. The log paths are given with the functionality to define any new log template with log file path.  View Log File #  The log files are listed in the  View Log File  page under the  Allowed Log Files  tab. The individual logs can be tailed by clicking them. The  Configuration  contains the last line count which will show the number of lines specified from the log in the  Tail of Log File  tab. This section is an alternative to getting into the Gluu  chroot  and tailing the log files.  Server Status #  This page will give some basic information about the Gluu Server such as the hostname, IP address, free memory & disk space. The number of users in the backend is also available in this page.  Certificates #  The certificate page will give the certificate information for Gluu Server. The issuer info along with the algorithm used and the expiry date is also available.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/#saml",
            "text": "Gluu Server CE contains all SAML related functionalities under the  SAML  tab divided into outbound and inbound SAML transactions. Inbound SAML is also known as ASIMBA.   Outbound #   The  Trust Relationships  page, as the name suggests, will allow the administrator to view the created trust relationships (TRs) by searching using the search button. There is a button to add relationship with the same name. All the available TRs can be searched by using two (2) spaces in the search bar. There are some information that the administrator needs to gather before creating any new TR in Gluu Server. The metadata of the Service Provider (SP) connected using TR must be gathered along with the required attributes. The creation of TR will be covered in detail later.",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/#openid-connect",
            "text": "OpenID Connect is another protocol supported by Gluu Server CE following the  openID Connect specifications . The scopes page contains the  Add Scope  button which can be used to add new scopes in Gluu Server. Additionally the available scopes can be searched by name or listed using two (2) spaces in the search bar.   The OpenID Connect clients are accessible from the  Clients  page under  OpenID Connect  tab. The structure is similar to the scopes page with the functionality to search by name or use two (2) spaces to list all the available clients. New clients can be added by clicking the  Add Client  button.",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/#uma",
            "text": "UMA or (User-Managed Access) is an access management protocol supported by Gluu Server.The available scopes can be searched using the search bar on the top of the page. New scope descriptions can be added using the  Add Scope Description  button.  UMA resources page also has a searchbar on the top of the page and can be used to search for resource sets. New resource sets can be added by clocking on the  Add Resource Set  button.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/#users",
            "text": "Users tab allows Gluu admin to do various task, including add admin, search users, Import users from file.",
            "title": "Users"
        },
        {
            "location": "/admin-guide/#personal",
            "text": "Personal tab allows the individual person to view his basic profile and modify certain fields.",
            "title": "Personal"
        },
        {
            "location": "/admin-guide/auth-protocol/",
            "text": "SAML\n\n\nSAML\n\n\nOpenID Connect\n\n\nOpenID Connect\n\n\nTerminology\n\n\nTerminology\n\n\nDiscovery\n\n\nDiscovery\n\n\n\n\n\n\nUser-Managed Access (UMA)\n\n\nEnterprise UMA\n\n\nTerminology\n\n\n\n\n\n\nUser-Managed Access (UMA)\n\n\nEnterprise UMA\n\n\nTerminology\n\n\nUMA Workflow\n\n\nUMA Workflow\n\n\nAuthorization\n\n\nAuthorization Token\n\n\n\n\n\n\nDiscovery\n\n\nAuthorization\n\n\nAuthorization Token\n\n\n\n\n\n\nDiscovery\n\n\n\n\n\n\nOAuth2.0\n\n\nOAuth2.0\n\n\nTerminology\n\n\n1.4.1 Terminology\n\n\nWorkflows\n\n\nClient Credentials Grant\n\n\n\n\n\n\nWorkflows\n\n\nCredentials Grant\n\n\nResource Owner Password Credential Grant\n\n\n\n\n\n\n\n\n\n\nThis grant allows the usage of RO password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below depicts the flow.\n\n\nResource Owner Password Credential Grant\n\n\nSecurity Properties\n\n\nUser Experience\n\n\n\n\n\n\nGluu OAuth2 Access Management\n\n\nSecurity Properties\n\n\nUser Experience\n\n\n\n\n\n\nGluu OAuth2 Access Management\n\n\nSCIM\n\n\nSCIM\n\n\nTerminology\n\n\nTerminology\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGluu Server supports Security Assertion Markup Language (SAML) and OpenID Connect protocols to authenticate users against Service Providers (SPs) and Requesting Parties (RPs). There are two different flows of SAML known as outbound SAML and inbound SAML, both supported out-of-the-box in Gluu Server Community Edition (Gluu CE).\n\n\nSAML\n#\n\n\n=======\n\n\nSAML\n#\n\n\n\n\nSecurity Assertion Markup Language (SAML) is an authentication and authorization protocol that defines the transaction process for XML-encoded assertions about authentication, authorization and attributes. The protocol is goverened by \nSecurity Assertion Markup Language Core\n(SAML) V2.0\n. The goal of this protocol is to exchange authentication and authorization data between Service Providers (SP) and the Identity Provider (IDP).\nGluu Server supports both inbound and outbound flow of SAML transaction. The oxTrutst administrator interface makes it easy to use SAML.\n\n\nTrust Relationships are the foundation on which SAML works. Gluu Server makes it easy to setup Trust Relationships from the oxTrust admin interface. There are two types of flow Gluu CE supports, inbound and outbound SAML.\nTrust Relationship creation is mandatory in both flows; however, the inbound flow also acts as a SAML proxy. The details about how to setup a Trust Relationship and how to setup SAML proxy follows later in this documentation. The image below is taken from wikipedia, showing a SAML transaction workflow.\n\n\n\n\nOpenID Connect\n#\n\n\n=======\n\n\nOpenID Connect\n#\n\n\n\n\nOpenID Connect\n is a standard profile of OAuth2 which defines a protocol to enable any website, mobile application to verify the identity of the user accessing its resources through an authorization server or identity server. The protocol is API friendly and works through endpoints making it easy for applications to use it. \n\n\nOpenID Connect specification consists of different documents which outline different aspects of the protocol. The basic implementation requires the \nOpenID Connect Core Specification\n. The figure below taken from the \nOpenID Connect website\n shows the overview of the protocol and the different parts of the specification.\n\n\n\n\nTerminology\n#\n\n\n=======\n\n\nTerminology\n#\n\n\n\n\nClaim: Information about the entity\n\n\nID Token: JSON Web Token (JWT) that contains claims about the authentication\n\n\nIssuer: The authority that issues the claims\n\n\nOpenID Provider (OP): OAuth2.0 authorization server that authenticates user through claims to the Relying Party (RP)\n\n\nRelying Party (RP): OAuth 2.0 Client application that requires authentication and claims from an OpenID Provider(OP)\n\n\nUserInfo Endpoint: An URL using https that returns authorization for the user from the OP to the RP\n\n\n\n\nDiscovery\n#\n\n\n=======\n\n\nDiscovery\n#\n\n\nOpenID Connect provides a simple mechanism to notify about the available endpoints. This is difined in the \nOpenID Connect Discovery Specification\n. \n\n\nIn order for an OpenID Connect Relying Party (RP) to utilize OpenID Connect services for an End-User, the RP needs to know where the OpenID Provider is. OpenID Connect uses WebFinger to locate the OpenID Provider for an End-User.\nOnce the OpenID Provider has been identified, the configuration information for the OP is retrieved from a well-known location as a JSON document, including its OAuth 2.0 endpoint locations.\nIf you want to try a discovery request, you can make the following WebFinger request to discover the Issuer location:\n\n\nGET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}\n\n\n\n\nUser-Managed Access (UMA)\n#\n\n\n\n\nUMA is an oAuth based protocol to \"enable a resource owner to control the authorization of data sharing and other protected-resource access made between online services on the owner's behalf or with the owner's authorization by an autonomous requesting party\"\n1\n.\n\n\nEnterprise UMA\n#\n\n\nThe Gluu Server implements UMA in a way that enables the protection of any web resource. Through the oxTrust interface, the server admin can write \ncustom authorization interception scripts\n which may contain logic to grant (or forbid) access. The diagram below shows an overview of the UMA Authorization workflow.\n\n\n\n\nTerminology\n#\n\n\n=======\n\n\nUser-Managed Access (UMA)\n#\n\n\n\n\nUMA is an oAuth based protocol to \"enable a resource owner to control the authorization of data sharing and other protected-resource access made between online services on the owner\u2019s behalf or with the owner\u2019s authorization by an autonomous requesting party\"\n1\n.\n\n\nEnterprise UMA\n#\n\n\nThe Gluu Server implements UMA in a way that enables the protection of any web resource. Through the oxTrust interface, the server admin can write \ncustom authorization interception scripts\n which may contain logic to grant (or forbid) access. The diagram below shows an overview of the UMA Authorization workflow.\n\n\n\n\nTerminology\n#\n\n\n\n\nResource Server (RS): Where the resources are held. \n\n\nAuthorization Server (AS): A server that governs access based on resource owner policies. \n\n\nRequesting Party (RP): An end-user, or a corporation or other legal person, that uses a client to seek access to a protected resource. The requesting party may or may not be the same party as the resource owner. \n\n\nClient: A web or native app that is used to access a digital resource. \n\n\nProtection API Token (PAT): An entity seeking protection API access MUST have the scope \"uma_protection\". An access token with at least this scope is called a protection API token (PAT) and an entity that can acquire an access token with this scope is by definition a resource server. \n\n\nRequesting Party Token (RPT): the token that a client presents to a resource server when trying to access a protected resource. \n\n\nAuthorization API Token (AAT): An entity seeking authorization API access MUST have the scope \"uma_authorization\". An access token with at least this scope is called an authorization API token (AAT) and an entity that can acquire an access token with this scope is by definition a client.\n\n\n\n\nUMA Workflow\n#\n\n\n=======\n\n\nUMA Workflow\n#\n\n\nThe complete workflow sequence is shown in the diagram below. However there are two different authorization workflow given below for authorization and authorization token.\n\n\n\n\nAuthorization\n#\n\n\n\n\nAuthorization Token\n#\n\n\n\n\nDiscovery\n#\n\n\n=======\n\n\nAuthorization\n#\n\n\n\n\nAuthorization Token\n#\n\n\n\n\nDiscovery\n#\n\n\nGluu Server CE provides an endpoint for discovering information about UMA Provider configuration. A resource server or client can perform an HTTP GET on \nhttps://<hostname>/.well-known/uma-configuration\n to retrieve a JSON object indicating the UMA Provider configuration.\n\n\nThe following is an example of a GET request to the UMA configuration discovery endpoint:\n\n\n{\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}\n\n\n\n\n\n\nNote\n\n\nThe UMA Response  may contain custom properties which are uniquely named for convenience and disguishing between standard & custom properties.\n\n\n\n\nOAuth2.0\n#\n\n\n=======\n\n\nOAuth2.0\n#\n\n\n\n\nOAuth2.0 is the next version in the OAuth protocol focusing on simplicity with specific authorization flows for different platforms. The core specification is called the \nOAuth 2.0 Authorization Framework\n. OAuth introduces an authorization layer and separates the role of the client from the resource owner. The resource is accessed using access tokens instead of credentials.\n\n\nTerminology\n#\n\n\n=======\n\n\n1.4.1 Terminology\n#\n\n\n\n\nResource Owner (RO): Entity that owns and controls the access to any resource\n\n\nResource Server (RS): Where the resources are held\n\n\nClient: Any application/web-site that requests access to the protected resource stored in any RS.\n\n\nAuthorization Server: The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization\n\n\n\n\nWorkflows\n#\n\n\nClient Credentials Grant\n#\n\n\n=======\n\n\nWorkflows\n#\n\n\nCredentials Grant\n#\n\n\nThe Client Credentials Grant allows \nRO\n to use username and password as an authorization grant to obtain an access token. This flow is only encouraged when there is high degree of trust between \nRO\n and the client and no other grant types are not available.\n\n\nAlthough this grant requires direct client access to the \nRO\n credentials it is used for a single request for an access token. This grant type can eliminate the need for the client to store the \nRO\n credentials for future use, by exchanging the credentials with a long-lived access token or refresh token.\n\n\n\n\nThe steps of the flow are:\n\n\n\n\nThe application requests an access token from the authorization server, authenticating the request with its client credentials.\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client.\n\n\n\n\nThis flow should be used when the resources of or any application/service are stored externally in cloud storages such as Google Storage or Amazon S3 which can be accessed using API. In this case the application needs to read and update these resources, but acting on behalf of the app itself rather than any individual user. The application can ask the OAuth authorization server for an access token directly, without the involvement of any end user.\n\n\nThe following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer\n\n\n\n\nThe message sent to the authorization server is\n\n\n\n\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\n\n\n\n\n\n\nHost: seed.gluu.org\n\n\n\n\n\n\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\n\n\n\n\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\ngrant_type=client_credentials&scope=storage\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse upon successful authentication\n\n\n\n\n\n\n\n\n\n\nHTTP/1.1 200\n\n\n\n\n\n\nContent-Type: application/json\n\n\n\n\n\n\nCache-Control: no-store, private\n\n\n\n\n\n\nPragma: no-cache\n\n\n\n\n\n\n{\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}\n\n\n\n\n\n\n\n\nResource Owner Password Credential Grant\n#\n\n\nThis grant allows the usage of \nRO\n password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below depicts the flow.\n#\n\n\nResource Owner Password Credential Grant\n#\n\n\nThis grant allows the usage of \nRO\n password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below shows the flow\n\n\n\n\nThe steps of the flow are:\n1. User presents their credentials to the application in addition to a username and password.\n2. If the client credentials are successfully authenticated, an access token is returned to the client\n\n\nThis flow should be sparingly used bacause the password for the \nRO\n is exposed to the appilcation/client. It is recommended only for first-party \"official\"  applications released by the API provider, and not opened up to wider third-party developer communities. If a user is asked to toe their password into \"official\" applications, they may become acustomed to doing so and becom evulneralbe to phishing attempts by other apps. In order to mitigat this concern, developers and IT administrators should clearly educate their users how they should dertermine which apps are \"official\" and which are not.\n\n\nThis flow should be sparingly used becase the password for the \nRO\n is exposed to the application/client. It is recommended only for first-party \u201cofficial\u201d applications released by the API provider, and not opened up to wider third-party developer communities. If a user is asked to type their password into \u201cofficial\u201d applications, they may become accustomed to doing so and become vulnerable to phishing attempts by other apps. In order to mitigate this concern, developers and IT administrators should clearly educate their users how they should determine which apps are \u201cofficial\u201d and which are not.\n\n\nThe following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28\n\n\n\n\nThe message sent to the authorization server is\n\n\n\n\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\n\n\n\n\n\n\nHost: seed.gluu.org\n\n\n\n\n\n\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\n\n\n\n\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\ngrant_type=password&scope=openid&username=mike&password=secret\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse upon successful authentication\n\n\n\n\n\n\n\n\n\n\nHTTP/1.1 200\n\n\n\n\n\n\nContent-Type: application/json\n\n\n\n\n\n\nCache-Control: no-store, private\n\n\n\n\n\n\nPragma: no-cache\n\n\n\n\n\n\n{\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}\n\n\n\n\n\n\n\n\nSecurity Properties\n#\n\n\nThere are some security benefits to using this flow against authenticating API calls with a user name and password (via HTTP Basic access authentication or similar) although the application has access to the resource owner's password. With Basic authentication, an application needs to have continuous access to the user's password in orfer to make API calls. If the user wants to revoke the access of the client, he must change the password and re-enter the password in all the applications that are allowed access to the resource.\n\n\nHowever, if the oAuth Resource owner Password flow is used, the application only needs access to the user's credentials once: on first use when the credentials are exchanged for an access token. This means there is no requirement for the app to store these credentials within the application or on the device, and revoking access is easy as well.\n\n\nUser Experience\n#\n\n\nThe user experience for this flow is identical to typical password-based access requests. \nThe application asks the user for their username and password and the user provides the information. The application then makes either a server-side or client-side request to the API provider's aiuthorization server. \nWithout any user-facing interface changes. If the API provider does not issue a refresh_token and the issued access_token is short-lived, the application will likely store the username and password for future authentication attempts. Unfortunately, this defeats some of the benefit of this flow.\n\n\nGluu OAuth2 Access Management\n#\n\n\n=======\n\n\nSecurity Properties\n#\n\n\nThere are some security benefits to using this flow against authenticating API calls with a username and password (via HTTP Basic access authentication or similar) although the application has access to the resource owner's password. With Basic authentication, an application needs to have continuous access to the user\u2019s password in order to make API calls. If the user wants to revoke the access of the client, he must change the password and re-enter the password in all the applications that are allowed access to the resource.\n\n\nHowever, if the OAuth Resource Owner Password flow is used, the application only needs access to the user\u2019s credentials once: on first use when the credentials are exchanged for an access token. This means there\u2019s no requirement for the app to store these credentials within the application or on the device, and revoking access is easy as well.\n\n\nUser Experience\n#\n\n\nThe user experience for this flow is identical to typical password-based access requests. The application asks the user for their username and password and the user provides the information. The application then makes either a server-side or client-side request to the API provider\u2019s authorization server, without any user-facing interface changes. If the API provider does not issue a refresh_token and the issued access_token is short-lived, the application will likely store the username and password for future authentication attempts. Unfortunately, this defeats some of the benefit of this flow.\n\n\nGluu OAuth2 Access Management\n#\n\n\nThis flow uses Gluu Access Token (GAT) for access management. The flow needs a profile enabling a client to obtain a token from the \nAS\n by explicitly specifyting the requested scopes. The diagram below shows the overview of the flow.\n\n\n\n\nGAT\n as a plain json object looks like the example below\n\n\n{\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n} \n\n\n\n\nThe \nGAT\n is issued at the endpoint published at \nhttps://<hostname>/.well-known/uma-configuration\n. Please note that all requests/response to/from/between RP, [RS][], \nAS\n must contain \"\nGAT\n\" HTTP header with \ntrue\n value. In this way \nAS\n differentiantes calls from normal UMA.The example below shows a response with \nGAT\n value set to \ntrue\n.\n\n\nPOST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}\n\n\n\n\nThe message sent to the authorization server is\n\n\n\n\n\n\n\n\nRequest\n\n\n\n\n\n\n\n\n\n\nGET /users/alice/album/photo.jpg HTTP/1.1\n\n\n\n\n\n\nAuthorization: Bearer vF9dft4qmT\n\n\n\n\n\n\nHost: gluu.example.com\n\n\n\n\n\n\nGAT: true\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse with \nrpt\n\n\n\n\n\n\n\n\n\n\nHTTP/1.1 200 OK\n\n\n\n\n\n\nContent-Type: application/json\n\n\n\n\n\n\nGAT: true\n\n\n\n\n\n\n{\n\n\n\n\n\n\n\"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\nSCIM\n#\n\n\n=======\n\n\nSCIM\n#\n\n\nSCIM stands for System for Cross-domain Identity Management which is a specification to manage users in a cloud environment. Gluu Server supports SCIM version 1.0 and 2.0 out of the box. The following diagram shows the SCIM model from the \nSCIM Website\n.\n\n\n\n\nThe SCIM Specifications are available from the SCIM Website. There are two specifications in SCIM 2.0:\n\n\n\n\nSCIM 2.0 Core Specifications\n\n\nSCIM 2.0 Protocol Specification\n\n\n\n\nTerminology\n#\n\n\n=======\n\n\nTerminology\n#\n\n\nThe SCIM specification defines some basic terms that are used in the document. The basic terms like attribute, [SP][] are same across all the protocols. A few confusing ones are listed below from the \nSCIM 2.0 Specs\n.\n\n\n\n\n\n\nResource:  An artifact that is managed by a service provider and that\n      contains one or more attributes, e.g., \"User\" or \"Group\".\n\n\n\n\n\n\nResource Type:  A type of a resource that is managed by a service provider.  The\n      resource type defines the resource name, endpoint URL, schemas,\n      and other metadata that indicate where a resource is managed and\n      how it is composed, e.g., \"User\" or \"Group\".\n\n\n\n\n\n\nSchema: A collection of attribute definitions that describe the contents of an entire or partial resource, e.g.,\n      \"urn:ietf:params:scim:schemas:core:2.0:User\".\n\n\n\n\n\n\nThe details of the SCIM API are given later in this documentation.",
            "title": "Authentication Protocols"
        },
        {
            "location": "/admin-guide/auth-protocol/#saml",
            "text": "=======",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/auth-protocol/#saml_1",
            "text": "Security Assertion Markup Language (SAML) is an authentication and authorization protocol that defines the transaction process for XML-encoded assertions about authentication, authorization and attributes. The protocol is goverened by  Security Assertion Markup Language Core\n(SAML) V2.0 . The goal of this protocol is to exchange authentication and authorization data between Service Providers (SP) and the Identity Provider (IDP).\nGluu Server supports both inbound and outbound flow of SAML transaction. The oxTrutst administrator interface makes it easy to use SAML.  Trust Relationships are the foundation on which SAML works. Gluu Server makes it easy to setup Trust Relationships from the oxTrust admin interface. There are two types of flow Gluu CE supports, inbound and outbound SAML.\nTrust Relationship creation is mandatory in both flows; however, the inbound flow also acts as a SAML proxy. The details about how to setup a Trust Relationship and how to setup SAML proxy follows later in this documentation. The image below is taken from wikipedia, showing a SAML transaction workflow.",
            "title": "SAML"
        },
        {
            "location": "/admin-guide/auth-protocol/#openid-connect",
            "text": "=======",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/auth-protocol/#openid-connect_1",
            "text": "OpenID Connect  is a standard profile of OAuth2 which defines a protocol to enable any website, mobile application to verify the identity of the user accessing its resources through an authorization server or identity server. The protocol is API friendly and works through endpoints making it easy for applications to use it.   OpenID Connect specification consists of different documents which outline different aspects of the protocol. The basic implementation requires the  OpenID Connect Core Specification . The figure below taken from the  OpenID Connect website  shows the overview of the protocol and the different parts of the specification.   Terminology #  =======  Terminology #   Claim: Information about the entity  ID Token: JSON Web Token (JWT) that contains claims about the authentication  Issuer: The authority that issues the claims  OpenID Provider (OP): OAuth2.0 authorization server that authenticates user through claims to the Relying Party (RP)  Relying Party (RP): OAuth 2.0 Client application that requires authentication and claims from an OpenID Provider(OP)  UserInfo Endpoint: An URL using https that returns authorization for the user from the OP to the RP   Discovery #  =======  Discovery #  OpenID Connect provides a simple mechanism to notify about the available endpoints. This is difined in the  OpenID Connect Discovery Specification .   In order for an OpenID Connect Relying Party (RP) to utilize OpenID Connect services for an End-User, the RP needs to know where the OpenID Provider is. OpenID Connect uses WebFinger to locate the OpenID Provider for an End-User.\nOnce the OpenID Provider has been identified, the configuration information for the OP is retrieved from a well-known location as a JSON document, including its OAuth 2.0 endpoint locations.\nIf you want to try a discovery request, you can make the following WebFinger request to discover the Issuer location:  GET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/auth-protocol/#user-managed-access-uma",
            "text": "UMA is an oAuth based protocol to \"enable a resource owner to control the authorization of data sharing and other protected-resource access made between online services on the owner's behalf or with the owner's authorization by an autonomous requesting party\" 1 .  Enterprise UMA #  The Gluu Server implements UMA in a way that enables the protection of any web resource. Through the oxTrust interface, the server admin can write  custom authorization interception scripts  which may contain logic to grant (or forbid) access. The diagram below shows an overview of the UMA Authorization workflow.   Terminology #  =======",
            "title": "User-Managed Access (UMA)"
        },
        {
            "location": "/admin-guide/auth-protocol/#user-managed-access-uma_1",
            "text": "UMA is an oAuth based protocol to \"enable a resource owner to control the authorization of data sharing and other protected-resource access made between online services on the owner\u2019s behalf or with the owner\u2019s authorization by an autonomous requesting party\" 1 .  Enterprise UMA #  The Gluu Server implements UMA in a way that enables the protection of any web resource. Through the oxTrust interface, the server admin can write  custom authorization interception scripts  which may contain logic to grant (or forbid) access. The diagram below shows an overview of the UMA Authorization workflow.   Terminology #   Resource Server (RS): Where the resources are held.   Authorization Server (AS): A server that governs access based on resource owner policies.   Requesting Party (RP): An end-user, or a corporation or other legal person, that uses a client to seek access to a protected resource. The requesting party may or may not be the same party as the resource owner.   Client: A web or native app that is used to access a digital resource.   Protection API Token (PAT): An entity seeking protection API access MUST have the scope \"uma_protection\". An access token with at least this scope is called a protection API token (PAT) and an entity that can acquire an access token with this scope is by definition a resource server.   Requesting Party Token (RPT): the token that a client presents to a resource server when trying to access a protected resource.   Authorization API Token (AAT): An entity seeking authorization API access MUST have the scope \"uma_authorization\". An access token with at least this scope is called an authorization API token (AAT) and an entity that can acquire an access token with this scope is by definition a client.   UMA Workflow #  =======  UMA Workflow #  The complete workflow sequence is shown in the diagram below. However there are two different authorization workflow given below for authorization and authorization token.   Authorization #   Authorization Token #   Discovery #  =======  Authorization #   Authorization Token #   Discovery #  Gluu Server CE provides an endpoint for discovering information about UMA Provider configuration. A resource server or client can perform an HTTP GET on  https://<hostname>/.well-known/uma-configuration  to retrieve a JSON object indicating the UMA Provider configuration.  The following is an example of a GET request to the UMA configuration discovery endpoint:  {\n  \"version\": \"1.0\",\n  \"issuer\": \"https://gluuserver.org\",\n  \"pat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"aat_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"rpt_profiles_supported\": [\n    \"bearer\"\n  ],\n  \"pat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"aat_grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"claim_profiles_supported\": [\n    \"openid\"\n  ],\n  \"dynamic_client_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/register\",\n  \"token_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/token\",\n  \"user_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n  \"introspection_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/status\",\n  \"resource_set_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc\",\n  \"permission_registration_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/host/rsrc_pr\",\n  \"rpt_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/rpt\",\n  \"authorization_request_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/requester/perm\",\n  \"scope_endpoint\": \"https://gluuserver.org/oxauth/seam/resource/restv1/uma/scopes\"\n}   Note  The UMA Response  may contain custom properties which are uniquely named for convenience and disguishing between standard & custom properties.",
            "title": "User-Managed Access (UMA)"
        },
        {
            "location": "/admin-guide/auth-protocol/#oauth20",
            "text": "=======",
            "title": "OAuth2.0"
        },
        {
            "location": "/admin-guide/auth-protocol/#oauth20_1",
            "text": "OAuth2.0 is the next version in the OAuth protocol focusing on simplicity with specific authorization flows for different platforms. The core specification is called the  OAuth 2.0 Authorization Framework . OAuth introduces an authorization layer and separates the role of the client from the resource owner. The resource is accessed using access tokens instead of credentials.  Terminology #  =======  1.4.1 Terminology #   Resource Owner (RO): Entity that owns and controls the access to any resource  Resource Server (RS): Where the resources are held  Client: Any application/web-site that requests access to the protected resource stored in any RS.  Authorization Server: The server issuing access tokens to the client after successfully authenticating the resource owner and obtaining authorization   Workflows #  Client Credentials Grant #  =======  Workflows #  Credentials Grant #  The Client Credentials Grant allows  RO  to use username and password as an authorization grant to obtain an access token. This flow is only encouraged when there is high degree of trust between  RO  and the client and no other grant types are not available.  Although this grant requires direct client access to the  RO  credentials it is used for a single request for an access token. This grant type can eliminate the need for the client to store the  RO  credentials for future use, by exchanging the credentials with a long-lived access token or refresh token.   The steps of the flow are:   The application requests an access token from the authorization server, authenticating the request with its client credentials.  If the client credentials are successfully authenticated, an access token is returned to the client.   This flow should be used when the resources of or any application/service are stored externally in cloud storages such as Google Storage or Amazon S3 which can be accessed using API. In this case the application needs to read and update these resources, but acting on behalf of the app itself rather than any individual user. The application can ask the OAuth authorization server for an access token directly, without the involvement of any end user.  The following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer  The message sent to the authorization server is     Request      POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1    Host: seed.gluu.org    Authorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==    Content-Type: application/x-www-form-urlencoded    grant_type=client_credentials&scope=storage        Response upon successful authentication      HTTP/1.1 200    Content-Type: application/json    Cache-Control: no-store, private    Pragma: no-cache    {\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}     Resource Owner Password Credential Grant #",
            "title": "OAuth2.0"
        },
        {
            "location": "/admin-guide/auth-protocol/#this-grant-allows-the-usage-of-ro-password-credentials-as-an-authorization-grant-to-obtain-an-access-token-this-grant-is-encouraged-in-a-high-trust-situation-as-well-the-diagram-below-depicts-the-flow",
            "text": "Resource Owner Password Credential Grant #  This grant allows the usage of  RO  password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below shows the flow   The steps of the flow are:\n1. User presents their credentials to the application in addition to a username and password.\n2. If the client credentials are successfully authenticated, an access token is returned to the client  This flow should be sparingly used bacause the password for the  RO  is exposed to the appilcation/client. It is recommended only for first-party \"official\"  applications released by the API provider, and not opened up to wider third-party developer communities. If a user is asked to toe their password into \"official\" applications, they may become acustomed to doing so and becom evulneralbe to phishing attempts by other apps. In order to mitigat this concern, developers and IT administrators should clearly educate their users how they should dertermine which apps are \"official\" and which are not.  This flow should be sparingly used becase the password for the  RO  is exposed to the application/client. It is recommended only for first-party \u201cofficial\u201d applications released by the API provider, and not opened up to wider third-party developer communities. If a user is asked to type their password into \u201cofficial\u201d applications, they may become accustomed to doing so and become vulnerable to phishing attempts by other apps. In order to mitigate this concern, developers and IT administrators should clearly educate their users how they should determine which apps are \u201cofficial\u201d and which are not.  The following is an example showing the messages between the client and the authorization server, also the example shows code fragments using the oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28  The message sent to the authorization server is     Request      POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1    Host: seed.gluu.org    Authorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==    Content-Type: application/x-www-form-urlencoded    grant_type=password&scope=openid&username=mike&password=secret        Response upon successful authentication      HTTP/1.1 200    Content-Type: application/json    Cache-Control: no-store, private    Pragma: no-cache    {\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}     Security Properties #  There are some security benefits to using this flow against authenticating API calls with a user name and password (via HTTP Basic access authentication or similar) although the application has access to the resource owner's password. With Basic authentication, an application needs to have continuous access to the user's password in orfer to make API calls. If the user wants to revoke the access of the client, he must change the password and re-enter the password in all the applications that are allowed access to the resource.  However, if the oAuth Resource owner Password flow is used, the application only needs access to the user's credentials once: on first use when the credentials are exchanged for an access token. This means there is no requirement for the app to store these credentials within the application or on the device, and revoking access is easy as well.  User Experience #  The user experience for this flow is identical to typical password-based access requests. \nThe application asks the user for their username and password and the user provides the information. The application then makes either a server-side or client-side request to the API provider's aiuthorization server. \nWithout any user-facing interface changes. If the API provider does not issue a refresh_token and the issued access_token is short-lived, the application will likely store the username and password for future authentication attempts. Unfortunately, this defeats some of the benefit of this flow.  Gluu OAuth2 Access Management #  =======  Security Properties #  There are some security benefits to using this flow against authenticating API calls with a username and password (via HTTP Basic access authentication or similar) although the application has access to the resource owner's password. With Basic authentication, an application needs to have continuous access to the user\u2019s password in order to make API calls. If the user wants to revoke the access of the client, he must change the password and re-enter the password in all the applications that are allowed access to the resource.  However, if the OAuth Resource Owner Password flow is used, the application only needs access to the user\u2019s credentials once: on first use when the credentials are exchanged for an access token. This means there\u2019s no requirement for the app to store these credentials within the application or on the device, and revoking access is easy as well.  User Experience #  The user experience for this flow is identical to typical password-based access requests. The application asks the user for their username and password and the user provides the information. The application then makes either a server-side or client-side request to the API provider\u2019s authorization server, without any user-facing interface changes. If the API provider does not issue a refresh_token and the issued access_token is short-lived, the application will likely store the username and password for future authentication attempts. Unfortunately, this defeats some of the benefit of this flow.  Gluu OAuth2 Access Management #  This flow uses Gluu Access Token (GAT) for access management. The flow needs a profile enabling a client to obtain a token from the  AS  by explicitly specifyting the requested scopes. The diagram below shows the overview of the flow.   GAT  as a plain json object looks like the example below  {\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n}   The  GAT  is issued at the endpoint published at  https://<hostname>/.well-known/uma-configuration . Please note that all requests/response to/from/between RP, [RS][],  AS  must contain \" GAT \" HTTP header with  true  value. In this way  AS  differentiantes calls from normal UMA.The example below shows a response with  GAT  value set to  true .  POST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}  The message sent to the authorization server is     Request      GET /users/alice/album/photo.jpg HTTP/1.1    Authorization: Bearer vF9dft4qmT    Host: gluu.example.com    GAT: true        Response with  rpt      HTTP/1.1 200 OK    Content-Type: application/json    GAT: true    {    \"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"    }",
            "title": "This grant allows the usage of RO password credentials as an authorization grant to obtain an access token. This grant is encouraged in a high trust situation as well. The diagram below depicts the flow."
        },
        {
            "location": "/admin-guide/auth-protocol/#scim",
            "text": "=======",
            "title": "SCIM"
        },
        {
            "location": "/admin-guide/auth-protocol/#scim_1",
            "text": "SCIM stands for System for Cross-domain Identity Management which is a specification to manage users in a cloud environment. Gluu Server supports SCIM version 1.0 and 2.0 out of the box. The following diagram shows the SCIM model from the  SCIM Website .   The SCIM Specifications are available from the SCIM Website. There are two specifications in SCIM 2.0:   SCIM 2.0 Core Specifications  SCIM 2.0 Protocol Specification   Terminology #  =======  Terminology #  The SCIM specification defines some basic terms that are used in the document. The basic terms like attribute, [SP][] are same across all the protocols. A few confusing ones are listed below from the  SCIM 2.0 Specs .    Resource:  An artifact that is managed by a service provider and that\n      contains one or more attributes, e.g., \"User\" or \"Group\".    Resource Type:  A type of a resource that is managed by a service provider.  The\n      resource type defines the resource name, endpoint URL, schemas,\n      and other metadata that indicate where a resource is managed and\n      how it is composed, e.g., \"User\" or \"Group\".    Schema: A collection of attribute definitions that describe the contents of an entire or partial resource, e.g.,\n      \"urn:ietf:params:scim:schemas:core:2.0:User\".    The details of the SCIM API are given later in this documentation.",
            "title": "SCIM"
        },
        {
            "location": "/admin-guide/auth-management/",
            "text": "Authenticaiton Management in Gluu Server\n#\n\n\nGluu Server comes with a separate tab for authenticaiton management where the adminstrator can define the backend LDAP/AD configuration of the organization. The \nManage Authentication\n tab is accessible from the \nConfiguration\n menu in oxTrust Administrator interface.\n\n\n\n\nManage LDAP Authentication\n#\n\n\nThe \nManage Authenticaiton\n page has two tabs: Manage LDAP Authentication and Default Authentication Method. The screen below shows the autentication management page.\n\n\n\n\n\n\nName: This field contains the name of the authentication server\n\n\nBind DN: The Username for the authentication server (local LDAP/remote LDAP/remote Active Directory) goes here\n\n\nMax Connections: This option can be used to define the total number of simultaneous connections allowed for reading local LDAP/remote Active Directory/remote LDAP\n\n\nPrimary Key: This field contains the primary key to connect to the authentication server (i.e. SAMAccountName/uid/mail etc.)\n\n\nLocal Primary Key: This field contains the internal LDAP primary key of the Gluu Server. Generally the key is either the \nuid\n or the \nmail\n\n\nServer: The unique name of the authentication server and port number (i.e. auth.company.org:636) goes here\n\n\nBase DN: Add base DNs in this field to allow the Gluu Server to connect and search the LDAP server. Every directory tree should be added separately using the \nAdd Base DN\n option\n\n\nUse SSL: If the authentication server requires a secured port (i.e. 636) then this option should be activated using the check-box\n\n\nDeactivate: This button \nDeactivates/Activates\n the Gluu Server accessibility for authentication.\n\n\n\n\nDefault Authentication Method\n#\n\n\nThis allows the Gluu Server administrator to select both the default authentication mode, and level for person authentication. Both modes are set to \"Default\" until additional authentication mechanisms are enabled via \ncustom scripts\n.\n\n\nGluu Server uses oxAuth as the first step of authentication in all kind of SSO protocols ( OpenID Connect, SAML, CAS )\n\n\n\n\n\n\nAuthentication mode: This mode defines the mode used for general authentication with Service Providers. The mode defined under this tab will not affect the users accessing the oxTrust administrator interface.\n\n\noxTrust authentication mode: This mode is used when the user is accessing the oxTrust administrator interface using the gluu server hostname.\n\n\nPassport Support: This mode uses third-party authentication e.g. Google+, Twitter, Facebook to authenticate users in Gluu Server.",
            "title": "Authentication Management"
        },
        {
            "location": "/admin-guide/auth-management/#authenticaiton-management-in-gluu-server",
            "text": "Gluu Server comes with a separate tab for authenticaiton management where the adminstrator can define the backend LDAP/AD configuration of the organization. The  Manage Authentication  tab is accessible from the  Configuration  menu in oxTrust Administrator interface.",
            "title": "Authenticaiton Management in Gluu Server"
        },
        {
            "location": "/admin-guide/auth-management/#manage-ldap-authentication",
            "text": "The  Manage Authenticaiton  page has two tabs: Manage LDAP Authentication and Default Authentication Method. The screen below shows the autentication management page.    Name: This field contains the name of the authentication server  Bind DN: The Username for the authentication server (local LDAP/remote LDAP/remote Active Directory) goes here  Max Connections: This option can be used to define the total number of simultaneous connections allowed for reading local LDAP/remote Active Directory/remote LDAP  Primary Key: This field contains the primary key to connect to the authentication server (i.e. SAMAccountName/uid/mail etc.)  Local Primary Key: This field contains the internal LDAP primary key of the Gluu Server. Generally the key is either the  uid  or the  mail  Server: The unique name of the authentication server and port number (i.e. auth.company.org:636) goes here  Base DN: Add base DNs in this field to allow the Gluu Server to connect and search the LDAP server. Every directory tree should be added separately using the  Add Base DN  option  Use SSL: If the authentication server requires a secured port (i.e. 636) then this option should be activated using the check-box  Deactivate: This button  Deactivates/Activates  the Gluu Server accessibility for authentication.",
            "title": "Manage LDAP Authentication"
        },
        {
            "location": "/admin-guide/auth-management/#default-authentication-method",
            "text": "This allows the Gluu Server administrator to select both the default authentication mode, and level for person authentication. Both modes are set to \"Default\" until additional authentication mechanisms are enabled via  custom scripts .  Gluu Server uses oxAuth as the first step of authentication in all kind of SSO protocols ( OpenID Connect, SAML, CAS )    Authentication mode: This mode defines the mode used for general authentication with Service Providers. The mode defined under this tab will not affect the users accessing the oxTrust administrator interface.  oxTrust authentication mode: This mode is used when the user is accessing the oxTrust administrator interface using the gluu server hostname.  Passport Support: This mode uses third-party authentication e.g. Google+, Twitter, Facebook to authenticate users in Gluu Server.",
            "title": "Default Authentication Method"
        },
        {
            "location": "/admin-guide/multi-factor-auth/",
            "text": "Multi Factor Authentication\n\n\nDUO Security\n\n\nOverview\n\n\nConfigure DUO Account\n\n\nConfigure CE Chroot\n\n\nConfigure oxTrust\n\n\n\n\n\n\nU2F\n\n\nOverview\n\n\nInstallation\n\n\nConfigure oxTrust\n\n\n\n\n\n\n\n\n\n\noxPush2\n\n\nOverview\n\n\nConfigure oxTrust\n\n\n\n\n\n\nWikid Authentication\n\n\nOverview\n\n\nInstallation\n\n\nConfigure CE Chroot\n\n\nToken Client\n\n\nConfigure oxTrust\n\n\n\n\n\n\nCertificate Authentication\n\n\nConfigure oxTrust\n\n\n\n\n\n\nConfigure Google\n\n\nConfigure oxTrust\n\n\nTesting\n\n\n\n\n\n\nTwilio multi-factor Authentication - OTP using custom script\n\n\nWriting a Custom Authentication Script\n\n\nCustom Script Location\n\n\nSuggested Development Environment\n\n\nSamples and Documentation\n\n\nImplement methods\n\n\nMethods\n\n\nSaving the value in LDAP and Passing values between two steps\n\n\nSaving Values:\n\n\nRetriving and passing values between the authentication steps:\n\n\n\n\n\n\nCustom Properties\n\n\nReturning a message to the user\n\n\nAdding Libraries\n\n\nTesting\n\n\nReverting Authentication Method\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMulti Factor Authentication\n#\n\n\nUsing the  Gluu Server, you can define the business logic for complex multi-step authentication workflows, providing SSO for people using smart cards, tokens, mobile or biometric authentication mechanisms. You don't have to chose one multi-factor authentication technology. You can have multiple authentication mechanisms active at the same time--Web or mobile clients can request a certain authentication type by using standard OpenID Connect request parameters.\n\n\nA number of multi-factor authentication scripts are shipped in the Gluu Server by default, including support for FIDO U2F tokens, Gluu's free mobile two-factor application \nSuper Gluu\n, certificate authentication, and Duo Security. \n\n\nDUO Security\n#\n\n\nOverview\n#\n\n\nThere are a few properties in the [DUO][duo] Authentication Script.\n\n\n\n\n\n\n\n\nProperty\n\n\nStatus\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nduo_creds_file\n\n\nMandatory\n\n\nPath to ikey, skey, akey\n\n\n/etc/certs/duo_creds.json\n\n\n\n\n\n\nduo_host\n\n\nMandatory\n\n\nURL of the DUO API Server\n\n\napi-random.duosecurity.com\n\n\n\n\n\n\naudit_attribute\n\n\nOptional\n\n\nAttribute to determine user group\n\n\nmemberOf\n\n\n\n\n\n\nduo_group\n\n\nOptional\n\n\nAttribute to enable DUO for specific user\n\n\nmemberOf\n\n\n\n\n\n\naudit_group\n\n\nOptional\n\n\nNotify administrator via email upon user login\n\n\nmemberOf\n\n\n\n\n\n\naudit_group_email\n\n\nOptional\n\n\nAdministrator email\n\n\nadmin@organization.com\n\n\n\n\n\n\n\n\nConfigure DUO Account\n#\n\n\n\n\n\n\nSign up for a Duo account.\n\n\n\n\n\n\nLog in to the Duo Admin Panel and navigate to Applications.\n\n\n\n\n\n\nClick Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your integration key, secret key, and API hostname.\n\n\n\n\n\n\nGenerate an \nakey\n value for your instance. \nClick here to know more \n\n\n\n\n\n\nFor additional info on Duo's Web SDK check \nthis atricle\n \n\n\nConfigure CE Chroot\n#\n\n\n\n\nPrepare the DUO credential file \n/etc/certs/duo_creds.json\n with \nikey, akey & skey\n\n\n\n\nConfigure oxTrust\n#\n\n\nFollow the steps below to configure the [DUO][duo] module in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\n\nScroll down to [DUO][duo] authentication script\n\n\n\n\n\n\n\n\nChange the value of \nduo_host\n to your API\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nChange the dufault authenticaiont method to [DUO][duo]\n\n\n\n\n\n\n\nU2F\n#\n\n\nThis script enables multi-factor authentication with any FIDO U2F device. Learn more about the U2F standard \nhere\n. For a list of U2F compliant devices for sale, \ncheck Amazon\n. \n\n\nSome well known U2F device manufacturers include:\n\n- \nYubico\n \n\n- \nHyperFIDO\n \n\n- \nFeitian Technologies\n    \n\n\nOverview\n#\n\n\nThe script has the following properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nu2f_server_uri\n\n\nURL of the u2f server\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\nu2f_server_metadata_uri\n\n\nURL of the u2f server metadata\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\n\n\nInstallation\n#\n\n\nConfigure oxTrust\n#\n\n\nFollow the steps below to configure the [DUO][duo] module in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the Person Authentication tab\n\n\n\n\n\n\n\nSelect the U2F script\n\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nClick \nUpdate\n\n\n\n\n\n\nChange the \nDefault Authentication Method\n to \nu2f\n\n\n\n\n\n\n\n\noxPush2\n#\n\n\nOverview\n#\n\n\nThe script has the following properties\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\napplication_id\n\n\nURL of the identity server\n\n\nhttps://idp.gluu.info\n\n\n\n\n\n\nauthentication_mode\n\n\nDetermine factor of authentication\n\n\ntwo_step\n\n\n\n\n\n\ncredentials_file\n\n\nJSON file for oxPush2\n\n\n/etc/certs/oxpush2_creds.json\n\n\n\n\n\n\n\n\nConfigure oxTrust\n#\n\n\n\n\n\n\nGo to Manage Custom Script\n\n\n\n\n\n\n\nClick on the Perosn Authentication tab\n\n\n\n\n\n\n\nSelect the oxPush2 Script\n\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nClick \nUpdate\n\n\n\n\n\n\nChange the Authentication method to oxPush2\n\n\n\n\n\n\n\nWikid Authentication\n#\n\n\nOverview\n#\n\n\nThe module has the following mandatory properties\n\n\n\n\n\n\n\n\nPeoperty\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nwikid_server_host\n\n\nIP address of WIKID server\n\n\n192.168.1.1\n\n\n\n\n\n\nwikid_server_port\n\n\nTCP port for WIKID serve\n\n\n[8388][default 8388]\n\n\n\n\n\n\nwikid_cert_path\n\n\nPath to the PKCS12 certificate file\n\n\n/etc/certs/wikid.p12\n\n\n\n\n\n\nwikid_cert_pass\n\n\nPassphrase for  PKCS12 file\n\n\npassphrase\n\n\n\n\n\n\nwikid_ca_store_path\n\n\n[CA][ca] for WAS server certificate\n\n\n/etc/certs/CACertStore.dat\n\n\n\n\n\n\nwikid_ca_store_pass\n\n\nPassphrase to secure the CA store file\n\n\npassphrase\n\n\n\n\n\n\nwikid_server_code\n\n\nServer domain 12 digit code\n\n\n135711131719\n\n\n\n\n\n\n\n\nInstallation\n#\n\n\nConfigure CE Chroot\n#\n\n\nThe following libraries must be present in the \n$TOMCAT_HOME/endorsed\n folder.\n\n\n\n\nhttps://www.wikidsystems.com/webdemo/wClient-3.5.0.jar\n\n\nhttp://central.maven.org/maven2/org/jdom/jdom/1.1.3/jdom-1.1.3.jar\n\n\nhttp://central.maven.org/maven2/log4j/log4j/1.2.17/log4j-1.2.17.jar\n\n\nhttp://central.maven.org/maven2/com/thoughtworks/xstream/xstream/1.4.8/xstream-1.4.8.jar\n\n\n\n\nFor more informatiaon about the wClient Library, please see \nthis page\n\n\nToken Client\n#\n\n\nWikid Authentication requires \ntoken client\n. Please install and configure it for \nfirst time use. The \ndemo\n explains how to do that.\n\n\nConfigure oxTrust\n#\n\n\n\n\n\n\nGo to \nManage Custom Scripts\n\n\n\n\n\n\n\n\nClick on the \nAdd custom script configuration\n button\n\n\n\n\n\n\n\nFill up the form and add the \nWikid Authentication Script\n\n\n\n\n\n\nEnable the script by ticking the check box\n\n\n\n\n\n\n\nChange the \nDefault Authentication Method\n to \nwikid\n\n\n\n\n\n\n\n\nCertificate Authentication\n#\n\n\nThe image below contains the design diagram for this module.\n\n\n\n\nThe script has a few properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nAllowed Values\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nchain_cert_file_path\n\n\nmandatory property pointing to certificate chains in [pem][pem] format\n\n\nfile path\n\n\n/etc/certs/chain_cert.pem\n\n\n\n\n\n\nmap_user_cert\n\n\nspecifies if the script should map new user to local account\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_generic_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_path_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_oscp_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_crl_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\ncrl_max_response_size\n\n\nspecifies the maximum allowed size of [CRL][crl] response\n\n\nInteger > 0\n\n\n2\n\n\n\n\n\n\n\n\nConfigure oxTrust\n#\n\n\nFollow the steps below to configure the certificate authentication in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the \nAdd Custom Scritp\n button\n\nadd-script-button\n\n\n\n\n\n\nFill up the from and add the \nCertificate Authentication Script\n\n\n\n\n\n\nEnable the script by ticking the check box\n\nenable\n\n\n\n\n\n\nChange the \nDefault Authentication Method\n to \nCert\n\n\n\n\n\n\n\n\nConfigure Google\n#\n\n\nIn order to call Google API's, you need to register as a developer and\ncreate client credentials. Here are some\n\ninstructions\n\nfor these steps.\n\n\nThe first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter your desired\nproject name.\n\n\n\n\nThen click on your newly created project from the listing on the\ndashboard, and under the Credentials section, create a new \"OAuth2 2.0\nclient ID\". \n\n\n\n\nGoogle will ask you to configure your consent screen, to add your logo\nand other information displayed to the user to authorize Google to\nrelease information.\n\n\n\n\nFill out the form...\n\n\n\n\nNow you're ready to create the credentials. Enter \"Authorized JavaScript\norigins\". It should be the uri of your Gluu Server--for example\n\nhttps://idp.example.com\n.\n\n\n\n\nGoogle will display the client-id and the according secret ... ignore\nit. Instead, download the JSON file which you are going to upload into\nyour Gluu Server, next.\n\n\n\n\nMove this file to the location \n/opt/tomcat/conf/google.json\n. The JSON\nfile will look something like this example (no... these data are not\nvalid credentials!):\n\n\n{\n  \"web\": {\n    \"client_id\": \"7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\",\n    \"auth_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\",\n    \"token_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\",\n    \"auth_provider_x509_cert_url\": \"https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\",\n    \"client_secret\": \"bb76a2c99be94e35b874\",\n    \"javascript_origins\": [\n    \"https:\\/\\/brookie.gluu.info\"\n    ]\n  }\n}\n\n\n\n\nThe last step is to enable Google+ API's:\n\n\n\n\nNavigate back to the Google API \nconsole\n\n\nSelect project and enter project name\n\n\nOpen new project \"API & auth -> API\" menu item in configuration navigation tree\n\n\nClick \"Google+ API\"\n\n\nClick \"Enable API\" button\n\n\n\n\nConfigure oxTrust\n#\n\n\nFollow the steps below to configure the certificate authentication in the oxTrust Admin GUI.\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the \nAdd Custom Scritp\n button\n\nadd-script-button\n\n\n\n\n\n\nFill up the form and add the \nGoogle External Authenticator\n Script.\n\n\n\n\n\n\nYou'll also need to add some custom properties:\n\n\n\n\ngplus_client_secrets_file\n: \n/opt/tomcat/conf/google.json\n\n\ngplus_deployment_type\n: enroll\n\n\ngplus_remote_attributes_list\n: email, given_name, family_name, and locale\n\n\n\n\ngplus_local_attributes_list\n: uid, mail, givenName, sn, cn, preferredLanguage\n\n\n\n\n\n\ngplus_client_secrets_file\n - It is a mandatory property that holds\n   the path to the application configuration file downloaded from Google\n   console for application. An example is \n/etc/certs/gplus_client_secrets.json\n.\n   These are the single steps needed to get it:\n    a) Log into: \nhttps://console.developers.google.com/project\n\n    b) Click \"Create project\" and enter project name\n    c) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree\n    d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n    e) Select \"Web application\" application type\n    f) Enter \"Authorized JavaScript origins\". It should be CE server DNS\n       name, for example \nhttps://gluu.info\n.\n    g) Click \"Create\" and Click \"OK\" in next dialog\n    h) Click \"Download JSON\" in order to download\n       \ngplus_client_secrets.json\n file.\n    Also it is mandatory to enable Google+ API:\n    a) Log into \nhttps://console.developers.google.com/project\n\n    b) Select project and enter project name\n    c) Open new project \"API & auth -> API\" menu item in configuration navigation tree\n    d) Click \"Google+ API\"\n    e) Click \"Enable API\" button\n\n\n\n\n\n\ngplus_deployment_type\n - Specify the deployment mode. It is an\noptional property. If this property isn't specified the script tries to\nfind the user in the local LDAP by 'subject_identifier' claim specified\nin id_token. If this property has a 'map' value the script allows to map\n'subject_identifier' to the local user account. If this property has an\n'enroll' value the script adds a new user to the local LDAP with status\n'active'. In order to map the IDP attributes to the local attributes it\nuses properties from both gplus_remote_attributes_list and\ngplus_local_attributes_list. The allowed values are map and enroll.\n\n\n\n\n\n\ngplus_remote_attributes_list\n - Comma-separated list of attribute\nnames (user claims) that Google+ returns which map to local attributes\nin the \ngplus_local_attributes_list\n property. It is mandatory only if\n\ngplus_deployment_type\n is set to 'enroll'.\n\n\n\n\n\n\ngplus_local_attributes_list\n - Comma-separated list of Gluu Server\nLDAP attribute names that are mapped to Google user claims from the\n\ngplus_remote_attributes_list\n property. It is mandatory only if\n\ngplus_deployment_type\n is set to 'enroll'.\n\n\n\n\n\n\nextension_module\n - Optional property to specify the full path of\nan external module that implements two methods:\n\n\n\n\n\n\n    # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False\n\n\n\n\n\n\ngplus_client_configuration_attribute\n - Optional property to\nspecify the client entry attribute name which can override\n\ngplus_client_secrets_file file\n content. It can be used in cases when\nall clients should use a separate \ngplus_client_secrets.json\n\nconfiguration.\n\n\n\n\nTesting\n#\n\n\nOne simple way to test the configuration is to use oxTrust. In the\n\"Configure Authentication\" dropdown menu, select \"Google\" (or whatever\nyou entered as the \"Name\" of the custom authentication script--as the\ndefault authentication method.\n\n\n\n\nAfter you login and logout, you should be presented with a new login\nform that has the Google login button:\n\n\n\n\nAfter clicking the Google login button, you are presented for\nauthorization--Google needs to make sure its ok to release attributes to\nthe Gluu Server:\n\n\n\n\nIf the script doesn't work, and you locked yourself out of oxTrust,\ndon't worry! You can create an LDIF file, for example \nrevert.ldif\n, to\nset back the default authentication method, like this:\n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\n\noxAuthenticationMode corresponds to the 'Name' of the customer\nauthentication script in oxTrust. Use \ninternal\n to revert to the\ndefault LDAP authentication. You'll have to change the \ninum\n with the\n\ninum\n of your installation. You can find it using ldapsearch like this:\n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum\n\n\n\n\n~/.pw\n is a file with your Directory Manager password. If you don't\nremember it, try to find it using \ngrep\n: \n\n\ngrep ldapPass= /install/community-edition-setup/setup.properties.last\n\n\n\n\nOnce your LDIF looks ok, then use \nldapmodify\n to revert back to\npassword authentication:\n\n\n/opt/opendj/bin/ldapmodify -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -f revert.ldif\n\n\n\n\nIf things go wrong, it can leave the sessions in your browser in a bad\nstate. If things get really weird, remove the cookies in your browser\nfor the hostname of your Gluu Server.\n\n\nTwilio multi-factor Authentication - OTP using custom script\n#\n\n\nWriting a Custom Authentication Script\n#\n\n\nIn this document we walk through the steps of writing a script to implement OTP authentication using \nTwilio\n to send an SMS code for a two-step out-of-band authentication mechanism.\n\n\nAt the end of this tutorial you should have a better understanding of how to write your own custom scripts. For reference, you can review the completed Twilio custom authentication script \nhere\n. \n\n\nFields in Custom Script:\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nName\n\n\nName of the Script\n\n\n\n\n\n\nDescription\n\n\n[optional] Description about the script\n\n\n\n\n\n\nProgramming Language\n\n\nCurrently Python is supported, In future jscript and Java script might be added\n\n\n\n\n\n\nLevel\n\n\nAuthentication Level for the authentication, which determines the security level\n\n\n\n\n\n\nLocation Type\n\n\nDetermines the script location. Can be stored in a \"File\" or could be stored in \"LDAP\"\n\n\n\n\n\n\nUsage Type\n\n\nDetermines the type of the usage. Web, Native or Both\n\n\n\n\n\n\nCustome Property\n\n\nDetermines the key and value of the custom property, which can added to the authentication to pass the values\n\n\n\n\n\n\nScript Box\n\n\nScript Box will displayed if Location Type is selected as \"File\", to enter the path of the script\n\n\n\n\n\n\nScript\n\n\nScript Box will be displayed when Location Type is selected as \"LDAP\"\n\n\n\n\n\n\n\n\nCustom Script Location\n#\n\n\nCustom scripts can either be inserted directly into the Gluu Server interface or you can specify a path to the script. Specifying a path will make script development easier. There is also an option to revert back to a working script if the script is faulty or needs further enhancements. The administrator can select \nFile\n from the Script Location Type in oxTrust and the file input box will be displayed:\n\n\n\n\nThe 'LDAP' option in the Script Location Type can be used to store the script in the LDAP tree once the development is complete. Remember that selecting the \nLDAP\n method requires the script to be copied in the input box that appears upon LDAP selection:\n\n\n\n\nSuggested Development Environment\n#\n\n\nGluu Server custom scripts are written in \nJython\n. It is recommended to use Eclipse for coding purposes.\n\n\nNow, create some files:\n- A Python file for your script\n- One or more XHTML files if you have a custom form for your authentication\n- One or more XML files (you'll need one for each XHTML file) that provide some information to the Tomcat server about how to display the XHTML file.\n\n\nSamples and Documentation\n#\n\n\nThere are many good examples of authentication interception scripts checked into Gluu's\n\n\noxAuth integrations folder\n. Also, the respective \nXHTML\n and \nXML\n files are checked in to the \nauth folder\n.\nThe interfaces for the authentication interception can be found in the \nGluu Documentation\n.\n\n\nWe used the \nBasic Script\n \nas a template. The \nWikid forms\n were also used as a template since it is required to pass the value of the \"code\" obtained from Twilio to step 2 of the authentication in order to validate and authenticate the user.\n\n\nThe \nWikid authentication\n script was also looked upon quite a bit for examples on how to process the form.\n\n\nImplement methods\n#\n\n\nSimple example of how to add a custom template and how to pass values between 2 steps of authentication and save the value temporarily for authentication of a user. Our Sample \n\nTwilio script\n\n\n\n\nLogin to Gluu UI\n\n\nNavigate to \"Configuration\" on the Menu panel to the left\n\n\nSelect Manage Custom Scripts\n\n\nScroll to the end of the page and click on \"Add custom script configuration\"\n\n\nEnter the Name, Description, Programming Language (Python will be by default, may be in future Java or JavaSCript will be added)\n\n\nSelect the Level needed to set the security level to.\n\n\nSelect Location Type from the script to be executed.\n\n\nSelect the Usage Type required for the authentication.\n\n\nDefine Custom property which is provided by Twilio and can be noted down from Twilio account page of the signed up user. \n\n\nClick on Enabled to enable the added custom script.\n\n\nScroll down to the end of the update and click on Update button to submit the form. \n\n\nAfter the custom script is added, click on Manage Authenticaion on the Menu Panel to left. \n\n\nSelect \"Default Authentication Method\" tab and change the oxTrust authentication mode to \"Twilio\" or \"Name of the script\" from the drop down.\n\n\n\n\nNote: All three below custom properties are mandatory for the Twilio Two-Factor Authentication script to work\n\n\n\n\nACCOUNT_SID - Numerical sequence of numbers, to identify the token assigned to the user associated with Twilio.\n\n\nAUTH TOKEN  - Alphanumerical number provided by Twilio for the account holder to identify the user.\n\n\nFROM_NUMBER - Number which is either assigned by Twilio or can be a number user provides to send the code from.\n\n\n\n\nAs shown in the below illustration:\n\n\n\n\nMethods\n#\n\n\nauthenticate():\n\n\nThe most important method to implement is obviously the \nauthenticate\n method. This is where the main business logic is located for\nthe authentication workflow. It is possible to switch on the step, with the \nif (step == 1):\n statement. In oxAuth, there is no\nassumption that step 1 and step 2 happen on the same server, therefore the value stored in the LDAP using a temporarily created attribute and retrieved in step 2. There the step is sent into the \nauthenticate\n method, which helps to save and retrieve the values whereever required.\n\n\nBelow are few Methods and Libraries used to Save the Value to LDAP and retrieve the values as per the requirement.\n\n\nrandom.randit()\n \nrandom.randit(\"start number\",\"\"end number\"), Generates the code as per designer or requirements. \nExample: random.randit(10000,99999)\n\n\ncontext.set()\n\nThis particular method is obtained from jboss to pass the session attribute value to ldap, by creating a temporary attribute which has limited life time and can be retrieved within the life span, expires and session becomes invalid. Save the value of the code obtained through the code generator method. context.set(\"Name of the temp attribute\", \n<key>\n). Where \n<key>\n is the value that needs to be stored temporarily in ldap.\nExample:\ncontext.set(\"code\",code)\n\n\nUserService.instance()\n \nGets the user login instance\n\n\nServerUtil.getFirstValue():\n\n\nTo access  information from requestParameters in your script with \nServerUtil.getFirstValue(requestParameters, <key>)\n where \n<key>\n\nspecifies the value you want to retrieve, you can also use another method \nrequestParameters.get(\"<key>\")\n\nwhere \n<key>\n specifies the value you want to retrieve .\n\n\nuserService.getUserByAttribute():\n\n\ngetUserByAttribute(\"LDAP Attribute\", <key>)\n method access the information in LDAP and retrieves the value of the attribute comparing the value of the \n<Key>\n.\nExample:\nuserService.getUserByAttribute(\"uid\", user_name)\n\n\ngetAttribute():\n\nTo retrieve the value of an attribute from LDAP, getAttribute(\"LDAP Attribute name\") can be used. \nExample:\ngetAttribute(\"mobile\")\n\n\nrequestParameters.get():\n\nTo retrieve values passed from the form through header can be obtained by using the method requestParameters.get(\n<key>\n). This will retrieve the values from the form via header and can be stored in a string. Where \n<key>\n is the value to be retrieved from header.\nExample:\nabc = requestParameters.get(\"passcode\")[0].strip()\n\n\ngetCountAuthenticationSteps():\n\n\nAnother method usually needed to implement is \ngetCountAuthenticationSteps\n. This method normally just returns 1, 2, or 3. If implementing an adaptive authentication strategy,\nwhere the number of steps depends on the context. Check out the\nDuo script for a good example of this. In our sample \n\nDuo script\n,\n\n\nDuo Script was scripted only for those who wanted to use Duo\nfor the IT group. So this was checked for group membership, and dynamically adjusted the number of steps. And this can be scripted for any logic or attribute to the check the authentication, like \"country\" or \"region\".\n\n\ngetExtraParametersForStep():\n\n\nIf required to save session variables between steps, use the \ngetExtraParametersForStep\n method. The Gluu Server persists\nthese variables in LDAP in able to support stateless clustered two\nstep authentications.\n\n\ngetPageForStep():\n\n\nIf required to display a special Web page for an interactive\nlogin, (or even a custom first page) you'll need to implement the\n\ngetPageForStep\n which specifies the page you want to return for a given\nstep.\n\n\nsession_attributes.get():\n\nThe attribute value that are saved by the session using context.set. This method is derived from the oxauth core java libraries and called using the SessionState parameters which is defined in the code or programme.\nsession_attributes.get(\n<key>\n), where \n<key>\n is the session atribute value that is stored in the ldap.\nExample:\nsession_attributes.get(\"code\")\n\n\nSaving the value in LDAP and Passing values between two steps\n#\n\n\nSaving Values:\n#\n\n\ncontext.set\n can be used to save values of the required key to an attribute temporarily and the created temporary attribute will be alive only for limited time and expires and gets removed, by that way, adding new attribute to the user is not messed up. And also the expired attribute kills the validity of the session and becomes invalid.\n\n\nRetriving and passing values between the authentication steps:\n#\n\n\nUsing \nsession_attribute.get()\n method, stored session attribute could be retrieved anywhere between the authentication method, by that way the values can be passed between two authentication methods for verification and validation.\nGenerated code and the entered \"code\" in the form can be verified using a simple if and the \"code\" from the form can be obtained using the requestParameters.get() method or serviceUtil.getFirstValue() method.\n\n\nCustom Properties\n#\n\n\nSometimes it is helpful to enable system administrators to\nenter properties that might change a lot. If administrators are\nnot allowed to modify the script, Custom Property feature can be used, as illustrated in below screenshot:\n\n\n\n\nconfigurationAttributes.get(\"\n\").getValue2\"():\n\n\nTo access this information in your script with \n\nconfigurationAttributes.get(\"<key>\").getValue2()\n\nwhere \n<key>\n specifies the value you want to retrieve.\n\n\nReturning a message to the user\n#\n\n\nIt is possible to use the Context to return a message to the\nuser, which could be especially useful if an error occurs, or if\nrequired to have some kind of user action.\n\n\nAdding Libraries\n#\n\n\nPure Python libraries, can be added to \n/opt/tomcat/conf/python\n, jar files can be added to \n/var/gluu/webapps/oxauth/libs\n.\n\n\nNote:\n jar files should be added within chroot. And not in the main \n/var/\n of the system.\n\n\nTesting\n#\n\n\nWhen the scripting is done, you can test the script by print\nthe statments to wrapper.log under \n/opt/tomcat/logs/wrapper.log\n. \n\n\nAnd by prefix the logs, will help to find the script at ease\nusing tail command \ntail -f | grep <prefix>\n, the prefix logs will\nprovide the script output while one trys to login using the script.\n\n\nIn the Twilio test script, a specific method called\n\nprintOut\n has been scripted to make it easier to add this prefix.\n\n\nAlso, remember that putting all the code in a \ntry / catch\n\nis a good practice to avoid unhandled exceptions. Since during\ndebugging, those exception may provide a hint pointing what causes the issue.\n\n\nFurther logs to debug and monitor the sequence can be done using oxauth_script.log and oxauth.log\nunder\n/opt/tomcat/logs/\n which is within the chroot.\n\n\nReverting Authentication Method\n#\n\n\nIt is not unlikely that one may get locked out of Gluu\nServer, while testing the authentication script.\n\n\nIf there is any problem in it. In such a case the following\nmethod can be used to revert back the older authentication method. \n\n\nAs a secondary option, InPrivate or Incognito or Private Browser from various Browsers can be used.\n\n\nPlease see the \nFAQ\n for details.",
            "title": "Configuring Multi-Factor Authentication"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#multi-factor-authentication",
            "text": "Using the  Gluu Server, you can define the business logic for complex multi-step authentication workflows, providing SSO for people using smart cards, tokens, mobile or biometric authentication mechanisms. You don't have to chose one multi-factor authentication technology. You can have multiple authentication mechanisms active at the same time--Web or mobile clients can request a certain authentication type by using standard OpenID Connect request parameters.  A number of multi-factor authentication scripts are shipped in the Gluu Server by default, including support for FIDO U2F tokens, Gluu's free mobile two-factor application  Super Gluu , certificate authentication, and Duo Security.",
            "title": "Multi Factor Authentication"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#duo-security",
            "text": "Overview #  There are a few properties in the [DUO][duo] Authentication Script.     Property  Status  Description  Example      duo_creds_file  Mandatory  Path to ikey, skey, akey  /etc/certs/duo_creds.json    duo_host  Mandatory  URL of the DUO API Server  api-random.duosecurity.com    audit_attribute  Optional  Attribute to determine user group  memberOf    duo_group  Optional  Attribute to enable DUO for specific user  memberOf    audit_group  Optional  Notify administrator via email upon user login  memberOf    audit_group_email  Optional  Administrator email  admin@organization.com     Configure DUO Account #    Sign up for a Duo account.    Log in to the Duo Admin Panel and navigate to Applications.    Click Protect an Application and locate Web SDK in the applications list. Click Protect this Application to get your integration key, secret key, and API hostname.    Generate an  akey  value for your instance.  Click here to know more     For additional info on Duo's Web SDK check  this atricle    Configure CE Chroot #   Prepare the DUO credential file  /etc/certs/duo_creds.json  with  ikey, akey & skey   Configure oxTrust #  Follow the steps below to configure the [DUO][duo] module in the oxTrust Admin GUI.    Go to Manage Custom Scripts     Scroll down to [DUO][duo] authentication script     Change the value of  duo_host  to your API    Enable the script by ticking the check box    Change the dufault authenticaiont method to [DUO][duo]",
            "title": "DUO Security"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#u2f",
            "text": "This script enables multi-factor authentication with any FIDO U2F device. Learn more about the U2F standard  here . For a list of U2F compliant devices for sale,  check Amazon .   Some well known U2F device manufacturers include: \n-  Yubico   \n-  HyperFIDO   \n-  Feitian Technologies       Overview #  The script has the following properties     Property  Description  Example      u2f_server_uri  URL of the u2f server  https://idp.gluu.info    u2f_server_metadata_uri  URL of the u2f server metadata  https://idp.gluu.info     Installation #  Configure oxTrust #  Follow the steps below to configure the [DUO][duo] module in the oxTrust Admin GUI.    Go to Manage Custom Scripts    Click on the Person Authentication tab    Select the U2F script    Enable the script by ticking the check box    Click  Update    Change the  Default Authentication Method  to  u2f",
            "title": "U2F"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#oxpush2",
            "text": "Overview #  The script has the following properties     Property  Description  Example      application_id  URL of the identity server  https://idp.gluu.info    authentication_mode  Determine factor of authentication  two_step    credentials_file  JSON file for oxPush2  /etc/certs/oxpush2_creds.json     Configure oxTrust #    Go to Manage Custom Script    Click on the Perosn Authentication tab    Select the oxPush2 Script    Enable the script by ticking the check box    Click  Update    Change the Authentication method to oxPush2",
            "title": "oxPush2"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#wikid-authentication",
            "text": "Overview #  The module has the following mandatory properties     Peoperty  Description  Example      wikid_server_host  IP address of WIKID server  192.168.1.1    wikid_server_port  TCP port for WIKID serve  [8388][default 8388]    wikid_cert_path  Path to the PKCS12 certificate file  /etc/certs/wikid.p12    wikid_cert_pass  Passphrase for  PKCS12 file  passphrase    wikid_ca_store_path  [CA][ca] for WAS server certificate  /etc/certs/CACertStore.dat    wikid_ca_store_pass  Passphrase to secure the CA store file  passphrase    wikid_server_code  Server domain 12 digit code  135711131719     Installation #  Configure CE Chroot #  The following libraries must be present in the  $TOMCAT_HOME/endorsed  folder.   https://www.wikidsystems.com/webdemo/wClient-3.5.0.jar  http://central.maven.org/maven2/org/jdom/jdom/1.1.3/jdom-1.1.3.jar  http://central.maven.org/maven2/log4j/log4j/1.2.17/log4j-1.2.17.jar  http://central.maven.org/maven2/com/thoughtworks/xstream/xstream/1.4.8/xstream-1.4.8.jar   For more informatiaon about the wClient Library, please see  this page  Token Client #  Wikid Authentication requires  token client . Please install and configure it for \nfirst time use. The  demo  explains how to do that.  Configure oxTrust #    Go to  Manage Custom Scripts     Click on the  Add custom script configuration  button    Fill up the form and add the  Wikid Authentication Script    Enable the script by ticking the check box    Change the  Default Authentication Method  to  wikid",
            "title": "Wikid Authentication"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#certificate-authentication",
            "text": "The image below contains the design diagram for this module.   The script has a few properties:     Property  Description  Allowed Values  example      chain_cert_file_path  mandatory property pointing to certificate chains in [pem][pem] format  file path  /etc/certs/chain_cert.pem    map_user_cert  specifies if the script should map new user to local account  true/false  true    use_generic_validator  enable/disable specific certificate validation  true/false  false    use_path_validator  enable/disable specific certificate validation  true/false  true    use_oscp_validator  enable/disable specific certificate validation  true/false  false    use_crl_validator  enable/disable specific certificate validation  true/false  false    crl_max_response_size  specifies the maximum allowed size of [CRL][crl] response  Integer > 0  2     Configure oxTrust #  Follow the steps below to configure the certificate authentication in the oxTrust Admin GUI.    Go to Manage Custom Scripts    Click on the  Add Custom Scritp  button add-script-button    Fill up the from and add the  Certificate Authentication Script    Enable the script by ticking the check box enable    Change the  Default Authentication Method  to  Cert",
            "title": "Certificate Authentication"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#configure-google",
            "text": "In order to call Google API's, you need to register as a developer and\ncreate client credentials. Here are some instructions \nfor these steps.  The first thing you'll need to do is Create a Project on Google to obtain\nclient credentials. Click \"Create project\" and enter your desired\nproject name.   Then click on your newly created project from the listing on the\ndashboard, and under the Credentials section, create a new \"OAuth2 2.0\nclient ID\".    Google will ask you to configure your consent screen, to add your logo\nand other information displayed to the user to authorize Google to\nrelease information.   Fill out the form...   Now you're ready to create the credentials. Enter \"Authorized JavaScript\norigins\". It should be the uri of your Gluu Server--for example https://idp.example.com .   Google will display the client-id and the according secret ... ignore\nit. Instead, download the JSON file which you are going to upload into\nyour Gluu Server, next.   Move this file to the location  /opt/tomcat/conf/google.json . The JSON\nfile will look something like this example (no... these data are not\nvalid credentials!):  {\n  \"web\": {\n    \"client_id\": \"7a64e55f-724d4e8c91823d5f1f18a0b2.apps.googleusercontent.com\",\n    \"auth_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/auth\",\n    \"token_uri\": \"https:\\/\\/accounts.google.com\\/o\\/oauth2\\/token\",\n    \"auth_provider_x509_cert_url\": \"https:\\/\\/www.googleapis.com\\/oauth2\\/v1\\/certs\",\n    \"client_secret\": \"bb76a2c99be94e35b874\",\n    \"javascript_origins\": [\n    \"https:\\/\\/brookie.gluu.info\"\n    ]\n  }\n}  The last step is to enable Google+ API's:   Navigate back to the Google API  console  Select project and enter project name  Open new project \"API & auth -> API\" menu item in configuration navigation tree  Click \"Google+ API\"  Click \"Enable API\" button   Configure oxTrust #  Follow the steps below to configure the certificate authentication in the oxTrust Admin GUI.    Go to Manage Custom Scripts    Click on the  Add Custom Scritp  button add-script-button    Fill up the form and add the  Google External Authenticator  Script.    You'll also need to add some custom properties:   gplus_client_secrets_file :  /opt/tomcat/conf/google.json  gplus_deployment_type : enroll  gplus_remote_attributes_list : email, given_name, family_name, and locale   gplus_local_attributes_list : uid, mail, givenName, sn, cn, preferredLanguage    gplus_client_secrets_file  - It is a mandatory property that holds\n   the path to the application configuration file downloaded from Google\n   console for application. An example is  /etc/certs/gplus_client_secrets.json .\n   These are the single steps needed to get it:\n    a) Log into:  https://console.developers.google.com/project \n    b) Click \"Create project\" and enter project name\n    c) Open new project \"API & auth -> Credentials\" menu item in configuration navigation tree\n    d) Click \"Add credential\" with type \"OAuth 2.0 client ID\"\n    e) Select \"Web application\" application type\n    f) Enter \"Authorized JavaScript origins\". It should be CE server DNS\n       name, for example  https://gluu.info .\n    g) Click \"Create\" and Click \"OK\" in next dialog\n    h) Click \"Download JSON\" in order to download\n        gplus_client_secrets.json  file.\n    Also it is mandatory to enable Google+ API:\n    a) Log into  https://console.developers.google.com/project \n    b) Select project and enter project name\n    c) Open new project \"API & auth -> API\" menu item in configuration navigation tree\n    d) Click \"Google+ API\"\n    e) Click \"Enable API\" button    gplus_deployment_type  - Specify the deployment mode. It is an\noptional property. If this property isn't specified the script tries to\nfind the user in the local LDAP by 'subject_identifier' claim specified\nin id_token. If this property has a 'map' value the script allows to map\n'subject_identifier' to the local user account. If this property has an\n'enroll' value the script adds a new user to the local LDAP with status\n'active'. In order to map the IDP attributes to the local attributes it\nuses properties from both gplus_remote_attributes_list and\ngplus_local_attributes_list. The allowed values are map and enroll.    gplus_remote_attributes_list  - Comma-separated list of attribute\nnames (user claims) that Google+ returns which map to local attributes\nin the  gplus_local_attributes_list  property. It is mandatory only if gplus_deployment_type  is set to 'enroll'.    gplus_local_attributes_list  - Comma-separated list of Gluu Server\nLDAP attribute names that are mapped to Google user claims from the gplus_remote_attributes_list  property. It is mandatory only if gplus_deployment_type  is set to 'enroll'.    extension_module  - Optional property to specify the full path of\nan external module that implements two methods:        # This is called when the authentication script initializes\n    def init(conf_attr):\n        # Code here\n        return True/False\n\n    # This is called after authentication\n    def postLogin(conf_attr, user):\n        # Code here\n        return True    # or return False   gplus_client_configuration_attribute  - Optional property to\nspecify the client entry attribute name which can override gplus_client_secrets_file file  content. It can be used in cases when\nall clients should use a separate  gplus_client_secrets.json \nconfiguration.   Testing #  One simple way to test the configuration is to use oxTrust. In the\n\"Configure Authentication\" dropdown menu, select \"Google\" (or whatever\nyou entered as the \"Name\" of the custom authentication script--as the\ndefault authentication method.   After you login and logout, you should be presented with a new login\nform that has the Google login button:   After clicking the Google login button, you are presented for\nauthorization--Google needs to make sure its ok to release attributes to\nthe Gluu Server:   If the script doesn't work, and you locked yourself out of oxTrust,\ndon't worry! You can create an LDIF file, for example  revert.ldif , to\nset back the default authentication method, like this:  dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  oxAuthenticationMode corresponds to the 'Name' of the customer\nauthentication script in oxTrust. Use  internal  to revert to the\ndefault LDAP authentication. You'll have to change the  inum  with the inum  of your installation. You can find it using ldapsearch like this:  /opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" inum  ~/.pw  is a file with your Directory Manager password. If you don't\nremember it, try to find it using  grep :   grep ldapPass= /install/community-edition-setup/setup.properties.last  Once your LDIF looks ok, then use  ldapmodify  to revert back to\npassword authentication:  /opt/opendj/bin/ldapmodify -h localhost -p 1389 -D \"cn=directory manager\" -j ~/.pw -f revert.ldif  If things go wrong, it can leave the sessions in your browser in a bad\nstate. If things get really weird, remove the cookies in your browser\nfor the hostname of your Gluu Server.",
            "title": "Configure Google"
        },
        {
            "location": "/admin-guide/multi-factor-auth/#twilio-multi-factor-authentication-otp-using-custom-script",
            "text": "Writing a Custom Authentication Script #  In this document we walk through the steps of writing a script to implement OTP authentication using  Twilio  to send an SMS code for a two-step out-of-band authentication mechanism.  At the end of this tutorial you should have a better understanding of how to write your own custom scripts. For reference, you can review the completed Twilio custom authentication script  here .   Fields in Custom Script:     Field  Description      Name  Name of the Script    Description  [optional] Description about the script    Programming Language  Currently Python is supported, In future jscript and Java script might be added    Level  Authentication Level for the authentication, which determines the security level    Location Type  Determines the script location. Can be stored in a \"File\" or could be stored in \"LDAP\"    Usage Type  Determines the type of the usage. Web, Native or Both    Custome Property  Determines the key and value of the custom property, which can added to the authentication to pass the values    Script Box  Script Box will displayed if Location Type is selected as \"File\", to enter the path of the script    Script  Script Box will be displayed when Location Type is selected as \"LDAP\"     Custom Script Location #  Custom scripts can either be inserted directly into the Gluu Server interface or you can specify a path to the script. Specifying a path will make script development easier. There is also an option to revert back to a working script if the script is faulty or needs further enhancements. The administrator can select  File  from the Script Location Type in oxTrust and the file input box will be displayed:   The 'LDAP' option in the Script Location Type can be used to store the script in the LDAP tree once the development is complete. Remember that selecting the  LDAP  method requires the script to be copied in the input box that appears upon LDAP selection:   Suggested Development Environment #  Gluu Server custom scripts are written in  Jython . It is recommended to use Eclipse for coding purposes.  Now, create some files:\n- A Python file for your script\n- One or more XHTML files if you have a custom form for your authentication\n- One or more XML files (you'll need one for each XHTML file) that provide some information to the Tomcat server about how to display the XHTML file.  Samples and Documentation #  There are many good examples of authentication interception scripts checked into Gluu's  oxAuth integrations folder . Also, the respective  XHTML  and  XML  files are checked in to the  auth folder .\nThe interfaces for the authentication interception can be found in the  Gluu Documentation .  We used the  Basic Script  \nas a template. The  Wikid forms  were also used as a template since it is required to pass the value of the \"code\" obtained from Twilio to step 2 of the authentication in order to validate and authenticate the user.  The  Wikid authentication  script was also looked upon quite a bit for examples on how to process the form.  Implement methods #  Simple example of how to add a custom template and how to pass values between 2 steps of authentication and save the value temporarily for authentication of a user. Our Sample  Twilio script   Login to Gluu UI  Navigate to \"Configuration\" on the Menu panel to the left  Select Manage Custom Scripts  Scroll to the end of the page and click on \"Add custom script configuration\"  Enter the Name, Description, Programming Language (Python will be by default, may be in future Java or JavaSCript will be added)  Select the Level needed to set the security level to.  Select Location Type from the script to be executed.  Select the Usage Type required for the authentication.  Define Custom property which is provided by Twilio and can be noted down from Twilio account page of the signed up user.   Click on Enabled to enable the added custom script.  Scroll down to the end of the update and click on Update button to submit the form.   After the custom script is added, click on Manage Authenticaion on the Menu Panel to left.   Select \"Default Authentication Method\" tab and change the oxTrust authentication mode to \"Twilio\" or \"Name of the script\" from the drop down.   Note: All three below custom properties are mandatory for the Twilio Two-Factor Authentication script to work   ACCOUNT_SID - Numerical sequence of numbers, to identify the token assigned to the user associated with Twilio.  AUTH TOKEN  - Alphanumerical number provided by Twilio for the account holder to identify the user.  FROM_NUMBER - Number which is either assigned by Twilio or can be a number user provides to send the code from.   As shown in the below illustration:   Methods #  authenticate():  The most important method to implement is obviously the  authenticate  method. This is where the main business logic is located for\nthe authentication workflow. It is possible to switch on the step, with the  if (step == 1):  statement. In oxAuth, there is no\nassumption that step 1 and step 2 happen on the same server, therefore the value stored in the LDAP using a temporarily created attribute and retrieved in step 2. There the step is sent into the  authenticate  method, which helps to save and retrieve the values whereever required.  Below are few Methods and Libraries used to Save the Value to LDAP and retrieve the values as per the requirement.  random.randit()  \nrandom.randit(\"start number\",\"\"end number\"), Generates the code as per designer or requirements. \nExample: random.randit(10000,99999)  context.set() \nThis particular method is obtained from jboss to pass the session attribute value to ldap, by creating a temporary attribute which has limited life time and can be retrieved within the life span, expires and session becomes invalid. Save the value of the code obtained through the code generator method. context.set(\"Name of the temp attribute\",  <key> ). Where  <key>  is the value that needs to be stored temporarily in ldap.\nExample:\ncontext.set(\"code\",code)  UserService.instance()  \nGets the user login instance  ServerUtil.getFirstValue():  To access  information from requestParameters in your script with  ServerUtil.getFirstValue(requestParameters, <key>)  where  <key> \nspecifies the value you want to retrieve, you can also use another method  requestParameters.get(\"<key>\") \nwhere  <key>  specifies the value you want to retrieve .  userService.getUserByAttribute():  getUserByAttribute(\"LDAP Attribute\", <key>)  method access the information in LDAP and retrieves the value of the attribute comparing the value of the  <Key> .\nExample:\nuserService.getUserByAttribute(\"uid\", user_name)  getAttribute(): \nTo retrieve the value of an attribute from LDAP, getAttribute(\"LDAP Attribute name\") can be used. \nExample:\ngetAttribute(\"mobile\")  requestParameters.get(): \nTo retrieve values passed from the form through header can be obtained by using the method requestParameters.get( <key> ). This will retrieve the values from the form via header and can be stored in a string. Where  <key>  is the value to be retrieved from header.\nExample:\nabc = requestParameters.get(\"passcode\")[0].strip()  getCountAuthenticationSteps():  Another method usually needed to implement is  getCountAuthenticationSteps . This method normally just returns 1, 2, or 3. If implementing an adaptive authentication strategy,\nwhere the number of steps depends on the context. Check out the\nDuo script for a good example of this. In our sample  Duo script ,  Duo Script was scripted only for those who wanted to use Duo\nfor the IT group. So this was checked for group membership, and dynamically adjusted the number of steps. And this can be scripted for any logic or attribute to the check the authentication, like \"country\" or \"region\".  getExtraParametersForStep():  If required to save session variables between steps, use the  getExtraParametersForStep  method. The Gluu Server persists\nthese variables in LDAP in able to support stateless clustered two\nstep authentications.  getPageForStep():  If required to display a special Web page for an interactive\nlogin, (or even a custom first page) you'll need to implement the getPageForStep  which specifies the page you want to return for a given\nstep.  session_attributes.get(): \nThe attribute value that are saved by the session using context.set. This method is derived from the oxauth core java libraries and called using the SessionState parameters which is defined in the code or programme.\nsession_attributes.get( <key> ), where  <key>  is the session atribute value that is stored in the ldap.\nExample:\nsession_attributes.get(\"code\")  Saving the value in LDAP and Passing values between two steps #  Saving Values: #  context.set  can be used to save values of the required key to an attribute temporarily and the created temporary attribute will be alive only for limited time and expires and gets removed, by that way, adding new attribute to the user is not messed up. And also the expired attribute kills the validity of the session and becomes invalid.  Retriving and passing values between the authentication steps: #  Using  session_attribute.get()  method, stored session attribute could be retrieved anywhere between the authentication method, by that way the values can be passed between two authentication methods for verification and validation.\nGenerated code and the entered \"code\" in the form can be verified using a simple if and the \"code\" from the form can be obtained using the requestParameters.get() method or serviceUtil.getFirstValue() method.  Custom Properties #  Sometimes it is helpful to enable system administrators to\nenter properties that might change a lot. If administrators are\nnot allowed to modify the script, Custom Property feature can be used, as illustrated in below screenshot:   configurationAttributes.get(\" \").getValue2\"():  To access this information in your script with  configurationAttributes.get(\"<key>\").getValue2() \nwhere  <key>  specifies the value you want to retrieve.  Returning a message to the user #  It is possible to use the Context to return a message to the\nuser, which could be especially useful if an error occurs, or if\nrequired to have some kind of user action.  Adding Libraries #  Pure Python libraries, can be added to  /opt/tomcat/conf/python , jar files can be added to  /var/gluu/webapps/oxauth/libs .  Note:  jar files should be added within chroot. And not in the main  /var/  of the system.  Testing #  When the scripting is done, you can test the script by print\nthe statments to wrapper.log under  /opt/tomcat/logs/wrapper.log .   And by prefix the logs, will help to find the script at ease\nusing tail command  tail -f | grep <prefix> , the prefix logs will\nprovide the script output while one trys to login using the script.  In the Twilio test script, a specific method called printOut  has been scripted to make it easier to add this prefix.  Also, remember that putting all the code in a  try / catch \nis a good practice to avoid unhandled exceptions. Since during\ndebugging, those exception may provide a hint pointing what causes the issue.  Further logs to debug and monitor the sequence can be done using oxauth_script.log and oxauth.log\nunder /opt/tomcat/logs/  which is within the chroot.  Reverting Authentication Method #  It is not unlikely that one may get locked out of Gluu\nServer, while testing the authentication script.  If there is any problem in it. In such a case the following\nmethod can be used to revert back the older authentication method.   As a secondary option, InPrivate or Incognito or Private Browser from various Browsers can be used.  Please see the  FAQ  for details.",
            "title": "Twilio multi-factor Authentication - OTP using custom script"
        },
        {
            "location": "/admin-guide/user-group/",
            "text": "User Management in Gluu Server\n\n\nLocal User Management\n\n\nPeople\n\n\n\n\n\n\nGroups\n\n\nCache Refresh\n\n\nCustomer Backend Key and Attributes\n\n\nSource Backend LDAP Servers\n\n\nInum LDAP Server\n\n\nAttributes Mapping\n\n\n\n\n\n\nImport People from file\n\n\nFile Scructure\n\n\n\n\n\n\nRegister User\n\n\noxTrust Configuration\n\n\n\n\n\n\nUser Registration\n\n\n\n\n\n\nSCIM 2.0 User Add/Delete\n\n\nAdd User\n\n\nRequired Parameters\n\n\nJSON String\n\n\nUser Object\n\n\n\n\n\n\nDelete User\n\n\nRequired Parameter\n\n\n\n\n\n\nUser Extensions\n\n\n\n\n\n\nLock User in Gluu Server\n\n\nCreate Custom Attribute\n\n\nScript Installation\n\n\n\n\n\n\n\n\n\n\nUser Management in Gluu Server\n#\n\n\nTo keep the Gluu Server up-to-date with the latest user claims, your\norganization can either \"push\" or \"pull\" identity data. In the \"pull\"\nmode, otherwise known as LDAP Synchronization or Cache Refresh, the Gluu\nServer can use an existing LDAP identity source like Microsoft Active\nDirectory as the authoritative source of identity information. If you\n\"push\" identities to the Gluu Server, you can use the JSON/REST SCIM\nAPI. Local user management can also be performed inside oxTrust. Each\nmethod is detailed below.\n\n\nLocal User Management\n#\n\n\nIn oxTrust, you can add, edit and manage people, groups and user\nattributes and claims to ensure the proper information is released about\nthe right people.\n\n\nPeople\n#\n\n\nTo manage people, navigate to User > Manage People, as shown in the\nscreenshot below.\n\n\n\n\nFrom this interface you can add users and search for specific users.\nBecause the user database can potentially be very large, a value is\nrequired in the search field. In other words, you can not click search\nwith a blank entry to populate all users. If you need to see all users,\nthis would be best performed manually within the Gluu OpenDJ server.\nUpon performing a user search, a list will be populated with all users\nthat match the search, as shown in the screenshot below.\n\n\n\n\nTo edit a user, simply click on any of the hyperlinks associated with\nthat user and you will be taken to a user management interface where you\ncan modify that specific attributes relating to that user as displayed\nbelow.\n\n\n\n\nGroups\n#\n\n\nOut of the box, the Gluu Server includes one group: Gluu Server manager\ngroup, named: \u201cgluuManager\u201d. Groups can be added and populated as\nneeded. By using the \nManage Groups\n feature, the Gluu Server\nAdministrator can add, delete or modify any group or user within a\ngroup. The list of available groups can be viewed by hitting the\n\nSearch\n button with a blank search box.\n\n\n\nThe Gluu Server Administrator can modify information such as Display\nName, Group Owner, Visibility type etc. The Server Administrator can\nalso add or delete users within existing groups. The group information\nis represented as shown below.\n\n\n\nIf any member of the Organization is required to be added in any\nspecific group, this can be achieved be clicking on the Add Member\nbutton. The flow is \nAdd Member --> Search the name/email of the user\n--> Select the user --> Click OK --> Update.\n\n\n\n\nCache Refresh\n#\n\n\nCache Refresh is the process of connecting an existing backend LDAP server, like Microsoft Active Directory, with the Gluu Server's local LDAP server. Synching people and attributes from a backend server into the Gluu Server speeds up authentication transactions. It is possible to perform attribute transformations, changing the name of attributes, or even using an interception script to change the values. Transformations are stored in the Gluu LDAP service. \n\n\n\n\n\n\n\n\nLast Run:\n The date and time of the latest cache refresh cycle\n  completion is shown here.\n\n\n\n\n\n\nUpdates at the Last Run:\n This shows the total number of users who\n  have been updated in the last Cache Refresh cycle. For example an user\n  who has any of his attribute updated will show up here.\n\n\n\n\n\n\nProblem at the Last Run:\n This shows the number of users who have\n  been rejected by the Gluu Server during the update. If there are any\n  rejections, please contact Gluu Support for clarification and help.\n\n\n\n\n\n\n\n\nCustomer Backend Key and Attributes\n#\n\n\n\n\n\n\n\n\nKey Attribute:\n This is the unique key attribute of backend Active\n  Directory/LDAP Server such as SAMAccountname for any Active Directory.\n\n\n\n\n\n\nObject Class:\n This contains the Object Classes of the backend Active\n  Directory/LDAP which has permission to talk to Gluu Server Cache Refresh\n  such as person, organizationalPerson, user etc.\n\n\n\n\n\n\nSource Attribute:\n This contains the list of attributes which will be\n  pulled and read by the Gluu Server.\n\n\n\n\n\n\nCustom LDAP Filter:\n If there is any custom search required, this\nfiltering mechanism can be used such as \"sn=*\" whereas the value of this\nfield ensures that every user must contain an attribute named SN.\n\n\n\n\n\n\nSource Backend LDAP Servers\n#\n\n\n\n\nThis section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of the organization.\n\n\n\n\n\n\nName:\n Please input \nsource\n as the value.\n\n\n\n\n\n\nUse Anonymous Bind:\n Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.\n\n\n\n\n\n\nBind DN:\n This contains the username to connect to the backend\n  server. You need to use full DN here. As for example,\n  \ncn=gluu,dc=company,dc=org\n.\n\n\n\n\n\n\nUse SSL:\n Use this feature if the backend server allows SSL\n  connectivity.\n\n\n\n\n\n\nMax Connections:\n This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value of 2 or 3.\n\n\n\n\n\n\nServer:\n This contains the backend Active Directory/LDAP server\n  hostname with port i.e. backend.organization.com:389. If organization\n  has a failover server, click \nAdd Server\n and add more hostnames with\n  port.\n\n\n\n\n\n\nBase DN:\n This contains the location of the Active Directory/LDAP\n  tree from where the Gluu Server shall read the user information.\n\n\n\n\n\n\nEnabled:\n This check-box is used to save and push the changes. Do not\n  use this unless the server administrator has entered all the required\n  values.\n\n\n\n\n\n\nChange Bind Password:\n This can be used for a new password or to\n  change any existing password.\n\n\n\n\n\n\nIf your organization has a multiple Active Directory/LDAP server, click\non \nAdd source LDAP server\n and add the additional server information.\nPlease remember that a \nfailover server\n is not a new server.\n\n\nInum LDAP Server\n#\n\n\n\n\nThis section of the application allows the server administrator to\nconnect to the internal LDAP of the Gluu Server. As Gluu Server\nadministrator, you do not need to insert anything here in this section\nas new Gluu Server versions automatically populates this for you (unless\nyou try to manually configure it anyway).\n\n\n\n\n\n\nRefresh Method:\n The Gluu Server allows the Server Administrator to\n  apply two types of Cache Refresh mechanism--(i) VDS Method and (ii) Copy\n  Method.\n\n\n\n\n\n\nVDS Method:\n Any organization with a database like \nmysql\n can use\n  the VDS method. This option can be enabled via the drop-down menu in\n  Refresh Method option.\n\n\n\n\n\n\n\n\n\n\nCopy Method:\n If the organization has any kind of Active\n  Directory/LDAP server, they are strongly recommended to use the \nCopy\n  Method\n from the drop-down menu.\n\n\n\n\n\n\nAttributes Mapping\n#\n\n\nWhen the Copy method is selected, a section for Attribute mapping will\nbe exposed. In this section, the Gluu Server Administrator can map any\nattribute from the backend Active Directory/LDAP to the LDAP cache of\nthe Gluu Server.\n\n\n\n\nIn the source attribute to destination attribute mapping field, you can\nenter the source attribute value on the left, and the destination\nattribute on the right. In other words, you can specify what the\nattribute is on the backend in the left field, and what it should be\nrendered as when it comes through the Gluu Server in the right field.\n\n\nThe Administrator can select any Cache Refresh Method according to the\nbackend Active Directory/LDAP server, but there are some essential\nvalues for both types of cache refresh method. The values are given\nbelow.\n\n\n\n\n\n\nPooling Interval (Minutes):\n This is the interval value for running\n    the Cache Refresh mechanism in the Gluu Server. It is recommended to \n    be kept higher than 15 minutes.\n\n\n\n\n\n\nScript File Name:\n The Gluu Server cache refresh can accept any\n    kind of Jython Script which might help to calculate any custom/complex\n    attribute i.e. eduPersonScopedAffiliation. For more information please\n    contact Gluu Support.\n\n\n\n\n\n\nSnapshot Folder:\n Every cycle of of Gluu Server Cache Refresh cycle\n    saves an overall snapshot and problem-list record on a specified\n    location. This is where the Gluu Server Administrator can specify the\n    location. You can easily decide whether cache refresh synchronizes all\n    users or not. Generally the rejected users are enclosed in the\n    problem-list file. An overall report is displayed at the top of the\n    cache refresh page with headings \nUpdated at the last run\n and\n    \nProblems at the last run\n.\n\n\n\n\n\n\nSnapshot Count:\n This defines the total number of snapshots that\n    are allowed to be saved in the hard drive of the VM. It is recommended\n    to be kept to 20 snapshots.\n\n\n\n\n\n\nLatest Gluu Servers (including Community Edition) introduced two\nupgraded sections here.\n\n\n\n\n\n\nServer IP Address:\n Include the IP of your Gluu Server here. This\n    feature helps to run Cache Refresh mechanism perfectly in a clustered\n    environment.\n\n\n\n\n\n\nRemoved Script File Name location:\n New version of the Gluu Server\n    allows the administrator to manage your custom scripts with more\n    interactive section under configuration named Manage Custom Scripts.\n\n\n\n\n\n\nUpdate:\n This button is used to push the changes in the Gluu\n    Server. Hit this button only when the values have been entered,\n    completely.\n\n\n\n\n\n\nUpdate and Validate Script:\n This button is used to test the\n    operation and integrity of any custom script such as a Jython Script.\n\n\n\n\n\n\nImport People from file\n#\n\n\n\n\nGluu Server allows the administrator to add users from files. This can be accessed from the \nImport People\n button from the \nUsers\n menu.\n\n\n\n\n\n\nClick on the \nAdd\n button to select the file from which the users will be imported. This feature has been tested with a \nxls\n file.\n\n\n\n\n\n\n\n\nThe file needs to be validated before it can be imported. Click on the \nValidate\n button.\n\n\n\n\n\n\n\n\nClick on the \nImport\n button to complete the import of users.\n\n\n\n\nFile Scructure\n#\n\n\nThe file needs to contain the following fields from which the user data will be pulled. Please remember to use the exact spelling as shown here.\n\n\n\n\n\n\nUsername\n\n\n\n\n\n\nFirst Name\n\n\n\n\n\n\nLast Name\n\n\n\n\n\n\nEmail\n\n\n\n\n\n\nRegister User\n#\n\n\nSelf-Registration is done by users on a self-service basis. Since\noxTrust user registration cannot add users to a backend LDAP or Active\nDirectory server, self-registration will only be effective if GluuLDAP\nis used for authentication of users.\n\n\nBY default a a limited number of attribute is present in default\nself-registration form. If more attributes are needed they can be added\nin Registration Management of Organization Configuration\nThe oxTrust component provides a very basic user registration service for \nthe people to sign-up for an account on the Gluu Server. This service is \ndisabled by default. The \nUser Registration\n custom script  is used to enable the \nregistration feature.\n\n\n\n\nNote\n\n\nWhen possible, we recommend handling user registration in your app locally, then pushing the information to the Gluu Server via SCIM 2.0. This will give you much more control and flexibility in defining the exact registration process. Also,\n\n\n\n\nfrequently oxTrust is not Internet facing--it was primarily designed as an interface for admins.\n\n\noxTrust Configuration\n#\n\n\nNavigate to the custom scripts section of the Admin Panel. Click on the \nConfiguration menu and then\nManage Custom Scripts`.\n\n\n\n\nThe tabs near the top of the page can be used to navigate to different custom scripts. We are concerned about \nthe \nUser Registration\n tab.\n\n\n\n\nSet the \nenable_user\n value to to \ntrue\n so that the user can login as soon as \nthe registration is complete, which sets the default status value. You may want to leave this to \nfalse\n if you \nwant to manually review user registrations before allowing them.\n\n\n\n\nClick \nEnable\n checkbox at the bottom of the page.\n\n\n\n\nUser Registration\n#\n\n\nThe users can register through the user registration link usually available at \n<hostname>/identity/register\n.\n\n\n\n\nSCIM 2.0 User Add/Delete\n#\n\n\nThis section outlines how to add/remove user from Gluu Server CE using \nSCIM-Client\n.\n\n\nAdd User\n#\n\n\nThere are two methods to add users:\n\n\n\n\nJSON Sting\n\n\nUser Object\n\n\n\n\nRequired Parameters\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuserName\n\n\nThe intended username for the end-user\n\n\n\n\n\n\ngivenName\n\n\nThe first name of the end-user\n\n\n\n\n\n\nfamilyName\n\n\nThe last name of the end-user\n\n\n\n\n\n\ndisplayName\n\n\nThe formatted first name followed by last name\n\n\n\n\n\n\ngroups\n\n\nOptional parameter if the user is added to any specific group\n\n\n\n\n\n\n\n\nJSON String\n#\n\n\nThe user is added using a JSON object string using the required parameters; however it is possible to add more parameters. The following is an example of a JSON string used to add a user.\n\n\n        Scim2Client client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        String createJson = {\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\"externalId\":\"12345\",\"userName\":\"newUser\",\"name\":{\"givenName\":\"json\",\"familyName\":\"json\",\"middleName\":\"N/A\",\"honorificPrefix\":\"\",\"honorificSuffix\":\"\"},\"displayName\":\"json json\",\"nickName\":\"json\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"json@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"json2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynytest_user\",\"type\":\"Skype\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Test Group\",\"value\":\"@!9B22.5F33.7D8D.B890!0001!880B.F95A!0003!60B7\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"cert-12345\"}]}\n        ScimResponse response = client.createPersonString(createJson, MediaType.APPLICATION_JSON);\n\n\n\n\nUser Object\n#\n\n\nThe following code snippet uses the User object.\n\n\n        User user = new User();\n\n        Name name = new Name();\n        name.setGivenName(\"Given Name\");\n        name.setMiddleName(\"Middle Name\");\n        name.setFamilyName(\"Family Name\");\n        user.setName(name);\n\n        user.setActive(true);\n\n        user.setUserName(\"newUser_\" +  + new Date().getTime());\n        user.setPassword(\"secret\");\n        user.setDisplayName(\"Display Name\");\n        user.setNickName(\"Nickname\");\n        user.setProfileUrl(\"\");\n        user.setLocale(\"en\");\n        user.setPreferredLanguage(\"US_en\");\n\n        List<Email> emails = new ArrayList<Email>();\n        Email email = new Email();\n        email.setPrimary(true);\n        email.setValue(\"a@b.com\");\n        email.setDisplay(\"a@b.com\");\n        email.setType(Email.Type.WORK);\n        email.setReference(\"\");\n        emails.add(email);\n        user.setEmails(emails);\n\n        List<PhoneNumber> phoneNumbers = new ArrayList<PhoneNumber>();\n        PhoneNumber phoneNumber = new PhoneNumber();\n        phoneNumber.setPrimary(true);\n        phoneNumber.setValue(\"123-456-7890\");\n        phoneNumber.setDisplay(\"123-456-7890\");\n        phoneNumber.setType(PhoneNumber.Type.WORK);\n        phoneNumber.setReference(\"\");\n        phoneNumbers.add(phoneNumber);\n        user.setPhoneNumbers(phoneNumbers);\n\n        List<Address> addresses = new ArrayList<Address>();\n        Address address = new Address();\n        address.setPrimary(true);\n        address.setValue(\"test\");\n        address.setDisplay(\"My Address\");\n        address.setType(Address.Type.WORK);\n        address.setReference(\"\");\n        address.setStreetAddress(\"My Street\");\n        address.setLocality(\"My Locality\");\n        address.setPostalCode(\"12345\");\n        address.setRegion(\"My Region\");\n        address.setCountry(\"My Country\");\n        address.setFormatted(\"My Formatted Address\");\n        addresses.add(address);\n        user.setAddresses(addresses);\n\n        ScimResponse response = client.createUser(user, new String[]{});\n        System.out.println(\"response body = \" + response.getResponseBodyString());\n\n        assertEquals(response.getStatusCode(), 201, \"Could not add user, status != 201\");\n\n        User userCreated = Util.toUser(response, client.getUserExtensionSchema());\n        String id = userCreated.getId();\n\n\n\n\nDelete User\n#\n\n\nTo delete a user only the id (the LDAP \ninum\n) is needed.\n\n\n        ScimResponse response = client.deletePerson(id);\n        assertEquals(response.getStatusCode(), 200, \"User could not be deleted, status != 200\");\n\n\n\n\nRequired Parameter\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe LDAP \ninum\n of the user to be deleted\n\n\n\n\n\n\n\n\nUser Extensions\n#\n\n\nSCIM 2.0 User Extensions implementation in Gluu server is very simple. Just set the custom attribute's \nSCIM Attribute\n parameter to \ntrue\n in oxTrust GUI and it will be recognized as a User extension. It is a must to create new custom attributes to be used as User extensions for a cleaner implementation.\n\n\n\n\nYou can verify the User extensions via the \nSchema\n endpoint:\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:gluu:2.0:User\n\n\n\n\nNow for the actual code, you can refer to the unit tests in SCIM-Client:\n\n\n\n\nUserExtensionsObjectTest\n\n\nUserExtensionsJsonTest\n\n\n\n\nLock User in Gluu Server\n#\n\n\nThis section deals with the locking of user after 4 failed login attempts. This feature requires using the interception script to achieve the goal. The login attempts are stored in a custom attribute which needs to be created first.\n\n\nCreate Custom Attribute\n#\n\n\nThe custom attribute \noxCountInvalidLogin\n will track the unsuccessful login attempts by any user. Please create that attribute from the oxTrust Admin GUI.\n\n\n\n\n\n\nClick on the add user button under \nConfiguration\n\n\n\n\n\n\n\n\nPlease fill up the form as shown in the screenshot below\n\n\n\n\n\n\n\nClick the \nUpdate\n button and the custom attribute is added in the Gluu Server\n\n\n\n\n\n\nScript Installation\n#\n\n\n\n\n\n\nGo to Manage Custom Scripts\n\n\n\n\n\n\n\nClick on the Person Authenticaiton tab\n\n\n\n\n\n\n\nClick on the Add custon script configuration button\n\n\n\n\n\n\n\nFill up the form with the following information:\n\n\n\n\n\n\n\nName: LockAccount\n\n\n\n\n\n\nDescription: Basic Lock Account\n\n\n\n\n\n\nProgramming Language: Python\n\n\n\n\n\n\nLevel: 1\n\n\n\n\n\n\nLocation Type: Ldap\n\n\n\n\n\n\nUsage Type: Both methods\n\n\n\n\n\n\nCustom property(key/value)\n\n\n\n\n\n\ninvalid_login_count_attribute: oxCountInvalidLogin\n\n\n\n\n\n\nmaximum_invalid_login_attemps: 4\n\n\n\n\n\n\nScript: \nLock User Account Script\n\n\n\n\n\n\nEnable the script by ticking the check box \n\n\n\n\n\n\n\nClick Update \n\n\n\n\n\n\n\nChange Default Authentication Method to LockAccount",
            "title": "Manage & Configure Users"
        },
        {
            "location": "/admin-guide/user-group/#user-management-in-gluu-server",
            "text": "To keep the Gluu Server up-to-date with the latest user claims, your\norganization can either \"push\" or \"pull\" identity data. In the \"pull\"\nmode, otherwise known as LDAP Synchronization or Cache Refresh, the Gluu\nServer can use an existing LDAP identity source like Microsoft Active\nDirectory as the authoritative source of identity information. If you\n\"push\" identities to the Gluu Server, you can use the JSON/REST SCIM\nAPI. Local user management can also be performed inside oxTrust. Each\nmethod is detailed below.",
            "title": "User Management in Gluu Server"
        },
        {
            "location": "/admin-guide/user-group/#local-user-management",
            "text": "In oxTrust, you can add, edit and manage people, groups and user\nattributes and claims to ensure the proper information is released about\nthe right people.  People #  To manage people, navigate to User > Manage People, as shown in the\nscreenshot below.   From this interface you can add users and search for specific users.\nBecause the user database can potentially be very large, a value is\nrequired in the search field. In other words, you can not click search\nwith a blank entry to populate all users. If you need to see all users,\nthis would be best performed manually within the Gluu OpenDJ server.\nUpon performing a user search, a list will be populated with all users\nthat match the search, as shown in the screenshot below.   To edit a user, simply click on any of the hyperlinks associated with\nthat user and you will be taken to a user management interface where you\ncan modify that specific attributes relating to that user as displayed\nbelow.",
            "title": "Local User Management"
        },
        {
            "location": "/admin-guide/user-group/#groups",
            "text": "Out of the box, the Gluu Server includes one group: Gluu Server manager\ngroup, named: \u201cgluuManager\u201d. Groups can be added and populated as\nneeded. By using the  Manage Groups  feature, the Gluu Server\nAdministrator can add, delete or modify any group or user within a\ngroup. The list of available groups can be viewed by hitting the Search  button with a blank search box.  The Gluu Server Administrator can modify information such as Display\nName, Group Owner, Visibility type etc. The Server Administrator can\nalso add or delete users within existing groups. The group information\nis represented as shown below.  If any member of the Organization is required to be added in any\nspecific group, this can be achieved be clicking on the Add Member\nbutton. The flow is  Add Member --> Search the name/email of the user\n--> Select the user --> Click OK --> Update.",
            "title": "Groups"
        },
        {
            "location": "/admin-guide/user-group/#cache-refresh",
            "text": "Cache Refresh is the process of connecting an existing backend LDAP server, like Microsoft Active Directory, with the Gluu Server's local LDAP server. Synching people and attributes from a backend server into the Gluu Server speeds up authentication transactions. It is possible to perform attribute transformations, changing the name of attributes, or even using an interception script to change the values. Transformations are stored in the Gluu LDAP service.      Last Run:  The date and time of the latest cache refresh cycle\n  completion is shown here.    Updates at the Last Run:  This shows the total number of users who\n  have been updated in the last Cache Refresh cycle. For example an user\n  who has any of his attribute updated will show up here.    Problem at the Last Run:  This shows the number of users who have\n  been rejected by the Gluu Server during the update. If there are any\n  rejections, please contact Gluu Support for clarification and help.     Customer Backend Key and Attributes #     Key Attribute:  This is the unique key attribute of backend Active\n  Directory/LDAP Server such as SAMAccountname for any Active Directory.    Object Class:  This contains the Object Classes of the backend Active\n  Directory/LDAP which has permission to talk to Gluu Server Cache Refresh\n  such as person, organizationalPerson, user etc.    Source Attribute:  This contains the list of attributes which will be\n  pulled and read by the Gluu Server.    Custom LDAP Filter:  If there is any custom search required, this\nfiltering mechanism can be used such as \"sn=*\" whereas the value of this\nfield ensures that every user must contain an attribute named SN.    Source Backend LDAP Servers #   This section allows the Gluu Server to connect to the backend Active\nDirectory/LDAP server of the organization.    Name:  Please input  source  as the value.    Use Anonymous Bind:  Some customers do now allow username/password\n  connections to their backend server. Enable this option if this applies\n  to your organization.    Bind DN:  This contains the username to connect to the backend\n  server. You need to use full DN here. As for example,\n   cn=gluu,dc=company,dc=org .    Use SSL:  Use this feature if the backend server allows SSL\n  connectivity.    Max Connections:  This value defines the maximum number of\n  connections that are allowed to read the backend Active Directory/LDAP\n  server. It is recommended to keep the value of 2 or 3.    Server:  This contains the backend Active Directory/LDAP server\n  hostname with port i.e. backend.organization.com:389. If organization\n  has a failover server, click  Add Server  and add more hostnames with\n  port.    Base DN:  This contains the location of the Active Directory/LDAP\n  tree from where the Gluu Server shall read the user information.    Enabled:  This check-box is used to save and push the changes. Do not\n  use this unless the server administrator has entered all the required\n  values.    Change Bind Password:  This can be used for a new password or to\n  change any existing password.    If your organization has a multiple Active Directory/LDAP server, click\non  Add source LDAP server  and add the additional server information.\nPlease remember that a  failover server  is not a new server.  Inum LDAP Server #   This section of the application allows the server administrator to\nconnect to the internal LDAP of the Gluu Server. As Gluu Server\nadministrator, you do not need to insert anything here in this section\nas new Gluu Server versions automatically populates this for you (unless\nyou try to manually configure it anyway).    Refresh Method:  The Gluu Server allows the Server Administrator to\n  apply two types of Cache Refresh mechanism--(i) VDS Method and (ii) Copy\n  Method.    VDS Method:  Any organization with a database like  mysql  can use\n  the VDS method. This option can be enabled via the drop-down menu in\n  Refresh Method option.      Copy Method:  If the organization has any kind of Active\n  Directory/LDAP server, they are strongly recommended to use the  Copy\n  Method  from the drop-down menu.    Attributes Mapping #  When the Copy method is selected, a section for Attribute mapping will\nbe exposed. In this section, the Gluu Server Administrator can map any\nattribute from the backend Active Directory/LDAP to the LDAP cache of\nthe Gluu Server.   In the source attribute to destination attribute mapping field, you can\nenter the source attribute value on the left, and the destination\nattribute on the right. In other words, you can specify what the\nattribute is on the backend in the left field, and what it should be\nrendered as when it comes through the Gluu Server in the right field.  The Administrator can select any Cache Refresh Method according to the\nbackend Active Directory/LDAP server, but there are some essential\nvalues for both types of cache refresh method. The values are given\nbelow.    Pooling Interval (Minutes):  This is the interval value for running\n    the Cache Refresh mechanism in the Gluu Server. It is recommended to \n    be kept higher than 15 minutes.    Script File Name:  The Gluu Server cache refresh can accept any\n    kind of Jython Script which might help to calculate any custom/complex\n    attribute i.e. eduPersonScopedAffiliation. For more information please\n    contact Gluu Support.    Snapshot Folder:  Every cycle of of Gluu Server Cache Refresh cycle\n    saves an overall snapshot and problem-list record on a specified\n    location. This is where the Gluu Server Administrator can specify the\n    location. You can easily decide whether cache refresh synchronizes all\n    users or not. Generally the rejected users are enclosed in the\n    problem-list file. An overall report is displayed at the top of the\n    cache refresh page with headings  Updated at the last run  and\n     Problems at the last run .    Snapshot Count:  This defines the total number of snapshots that\n    are allowed to be saved in the hard drive of the VM. It is recommended\n    to be kept to 20 snapshots.    Latest Gluu Servers (including Community Edition) introduced two\nupgraded sections here.    Server IP Address:  Include the IP of your Gluu Server here. This\n    feature helps to run Cache Refresh mechanism perfectly in a clustered\n    environment.    Removed Script File Name location:  New version of the Gluu Server\n    allows the administrator to manage your custom scripts with more\n    interactive section under configuration named Manage Custom Scripts.    Update:  This button is used to push the changes in the Gluu\n    Server. Hit this button only when the values have been entered,\n    completely.    Update and Validate Script:  This button is used to test the\n    operation and integrity of any custom script such as a Jython Script.",
            "title": "Cache Refresh"
        },
        {
            "location": "/admin-guide/user-group/#import-people-from-file",
            "text": "Gluu Server allows the administrator to add users from files. This can be accessed from the  Import People  button from the  Users  menu.    Click on the  Add  button to select the file from which the users will be imported. This feature has been tested with a  xls  file.     The file needs to be validated before it can be imported. Click on the  Validate  button.     Click on the  Import  button to complete the import of users.   File Scructure #  The file needs to contain the following fields from which the user data will be pulled. Please remember to use the exact spelling as shown here.    Username    First Name    Last Name    Email",
            "title": "Import People from file"
        },
        {
            "location": "/admin-guide/user-group/#register-user",
            "text": "Self-Registration is done by users on a self-service basis. Since\noxTrust user registration cannot add users to a backend LDAP or Active\nDirectory server, self-registration will only be effective if GluuLDAP\nis used for authentication of users.  BY default a a limited number of attribute is present in default\nself-registration form. If more attributes are needed they can be added\nin Registration Management of Organization Configuration\nThe oxTrust component provides a very basic user registration service for \nthe people to sign-up for an account on the Gluu Server. This service is \ndisabled by default. The  User Registration  custom script  is used to enable the \nregistration feature.   Note  When possible, we recommend handling user registration in your app locally, then pushing the information to the Gluu Server via SCIM 2.0. This will give you much more control and flexibility in defining the exact registration process. Also,   frequently oxTrust is not Internet facing--it was primarily designed as an interface for admins.  oxTrust Configuration #  Navigate to the custom scripts section of the Admin Panel. Click on the  Configuration menu and then Manage Custom Scripts`.   The tabs near the top of the page can be used to navigate to different custom scripts. We are concerned about \nthe  User Registration  tab.   Set the  enable_user  value to to  true  so that the user can login as soon as \nthe registration is complete, which sets the default status value. You may want to leave this to  false  if you \nwant to manually review user registrations before allowing them.   Click  Enable  checkbox at the bottom of the page.",
            "title": "Register User"
        },
        {
            "location": "/admin-guide/user-group/#user-registration",
            "text": "The users can register through the user registration link usually available at  <hostname>/identity/register .",
            "title": "User Registration"
        },
        {
            "location": "/admin-guide/user-group/#scim-20-user-adddelete",
            "text": "This section outlines how to add/remove user from Gluu Server CE using  SCIM-Client .",
            "title": "SCIM 2.0 User Add/Delete"
        },
        {
            "location": "/admin-guide/user-group/#add-user",
            "text": "There are two methods to add users:   JSON Sting  User Object   Required Parameters #     Parameter  Description      userName  The intended username for the end-user    givenName  The first name of the end-user    familyName  The last name of the end-user    displayName  The formatted first name followed by last name    groups  Optional parameter if the user is added to any specific group     JSON String #  The user is added using a JSON object string using the required parameters; however it is possible to add more parameters. The following is an example of a JSON string used to add a user.          Scim2Client client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        String createJson = {\"schemas\":[\"urn:ietf:params:scim:schemas:core:2.0:User\"],\"externalId\":\"12345\",\"userName\":\"newUser\",\"name\":{\"givenName\":\"json\",\"familyName\":\"json\",\"middleName\":\"N/A\",\"honorificPrefix\":\"\",\"honorificSuffix\":\"\"},\"displayName\":\"json json\",\"nickName\":\"json\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"json@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"json2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynytest_user\",\"type\":\"Skype\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Test Group\",\"value\":\"@!9B22.5F33.7D8D.B890!0001!880B.F95A!0003!60B7\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"cert-12345\"}]}\n        ScimResponse response = client.createPersonString(createJson, MediaType.APPLICATION_JSON);  User Object #  The following code snippet uses the User object.          User user = new User();\n\n        Name name = new Name();\n        name.setGivenName(\"Given Name\");\n        name.setMiddleName(\"Middle Name\");\n        name.setFamilyName(\"Family Name\");\n        user.setName(name);\n\n        user.setActive(true);\n\n        user.setUserName(\"newUser_\" +  + new Date().getTime());\n        user.setPassword(\"secret\");\n        user.setDisplayName(\"Display Name\");\n        user.setNickName(\"Nickname\");\n        user.setProfileUrl(\"\");\n        user.setLocale(\"en\");\n        user.setPreferredLanguage(\"US_en\");\n\n        List<Email> emails = new ArrayList<Email>();\n        Email email = new Email();\n        email.setPrimary(true);\n        email.setValue(\"a@b.com\");\n        email.setDisplay(\"a@b.com\");\n        email.setType(Email.Type.WORK);\n        email.setReference(\"\");\n        emails.add(email);\n        user.setEmails(emails);\n\n        List<PhoneNumber> phoneNumbers = new ArrayList<PhoneNumber>();\n        PhoneNumber phoneNumber = new PhoneNumber();\n        phoneNumber.setPrimary(true);\n        phoneNumber.setValue(\"123-456-7890\");\n        phoneNumber.setDisplay(\"123-456-7890\");\n        phoneNumber.setType(PhoneNumber.Type.WORK);\n        phoneNumber.setReference(\"\");\n        phoneNumbers.add(phoneNumber);\n        user.setPhoneNumbers(phoneNumbers);\n\n        List<Address> addresses = new ArrayList<Address>();\n        Address address = new Address();\n        address.setPrimary(true);\n        address.setValue(\"test\");\n        address.setDisplay(\"My Address\");\n        address.setType(Address.Type.WORK);\n        address.setReference(\"\");\n        address.setStreetAddress(\"My Street\");\n        address.setLocality(\"My Locality\");\n        address.setPostalCode(\"12345\");\n        address.setRegion(\"My Region\");\n        address.setCountry(\"My Country\");\n        address.setFormatted(\"My Formatted Address\");\n        addresses.add(address);\n        user.setAddresses(addresses);\n\n        ScimResponse response = client.createUser(user, new String[]{});\n        System.out.println(\"response body = \" + response.getResponseBodyString());\n\n        assertEquals(response.getStatusCode(), 201, \"Could not add user, status != 201\");\n\n        User userCreated = Util.toUser(response, client.getUserExtensionSchema());\n        String id = userCreated.getId();",
            "title": "Add User"
        },
        {
            "location": "/admin-guide/user-group/#delete-user",
            "text": "To delete a user only the id (the LDAP  inum ) is needed.          ScimResponse response = client.deletePerson(id);\n        assertEquals(response.getStatusCode(), 200, \"User could not be deleted, status != 200\");  Required Parameter #     Parameter  Description      id  The LDAP  inum  of the user to be deleted",
            "title": "Delete User"
        },
        {
            "location": "/admin-guide/user-group/#user-extensions",
            "text": "SCIM 2.0 User Extensions implementation in Gluu server is very simple. Just set the custom attribute's  SCIM Attribute  parameter to  true  in oxTrust GUI and it will be recognized as a User extension. It is a must to create new custom attributes to be used as User extensions for a cleaner implementation.   You can verify the User extensions via the  Schema  endpoint:  <domain root>/identity/seam/resource/restv1/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:gluu:2.0:User   Now for the actual code, you can refer to the unit tests in SCIM-Client:   UserExtensionsObjectTest  UserExtensionsJsonTest",
            "title": "User Extensions"
        },
        {
            "location": "/admin-guide/user-group/#lock-user-in-gluu-server",
            "text": "This section deals with the locking of user after 4 failed login attempts. This feature requires using the interception script to achieve the goal. The login attempts are stored in a custom attribute which needs to be created first.",
            "title": "Lock User in Gluu Server"
        },
        {
            "location": "/admin-guide/user-group/#create-custom-attribute",
            "text": "The custom attribute  oxCountInvalidLogin  will track the unsuccessful login attempts by any user. Please create that attribute from the oxTrust Admin GUI.    Click on the add user button under  Configuration     Please fill up the form as shown in the screenshot below    Click the  Update  button and the custom attribute is added in the Gluu Server",
            "title": "Create Custom Attribute"
        },
        {
            "location": "/admin-guide/user-group/#script-installation",
            "text": "Go to Manage Custom Scripts    Click on the Person Authenticaiton tab    Click on the Add custon script configuration button    Fill up the form with the following information:    Name: LockAccount    Description: Basic Lock Account    Programming Language: Python    Level: 1    Location Type: Ldap    Usage Type: Both methods    Custom property(key/value)    invalid_login_count_attribute: oxCountInvalidLogin    maximum_invalid_login_attemps: 4    Script:  Lock User Account Script    Enable the script by ticking the check box     Click Update     Change Default Authentication Method to LockAccount",
            "title": "Script Installation"
        },
        {
            "location": "/admin-guide/logs/",
            "text": "<<<<<<< HEAD\n\n\nGluu Server Logs\n#\n\n\nWhen it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--logs are the best place to start. \n\n\nThe Gluu Server administrator can investigate logs from the oxTrust \nView Logs\n feature or directly with SSH access to the Gluu-Server container. \n\n\nGluu Server logs can be found in the following locations:\n\n\nLog Levels\n#\n\n\nGluu Server logs use the log4j logging levels which can be changed in the \nlog4j.xml\n file under the \n/opt/tomcat/webapps/oxauth/WEB-INF/classes\n folder.\nThe available logging levels are :\n\n\n\n\n\n\n\n\nLevel\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nALL\n\n\nAll log levels are documented\n\n\n\n\n\n\nDEBUG\n\n\nDetailed events useful to debug application\n\n\n\n\n\n\nERROR\n\n\nErrors are documented\n\n\n\n\n\n\nINFO\n\n\nLogs informational messages as the application runs\n\n\n\n\n\n\nOFF\n\n\nNo logs are recorded\n\n\n\n\n\n\nTRACE\n\n\nLogs detailed events; more than DEBUG\n\n\n\n\n\n\n\n\nAs mentioned above the \nlog4j.xml\n contains the log levels. Open the file using the command below\n\n\n# vi /opt/tomcat/webapps/oxauth/WEB-INF/classes/log4j.xml\n\n\n\n\nThe log leves are defined under the \n<level value=\" \" />\n tags which can be changed to one of the above from the table. The following section is taken from a live Gluu Server \nlog4j.xml\n file showing different log levels for different logs. The changes made this section will reflect in the logs.\n\n\n <logger name=\"org.xdi.oxauth.service.status.ldap\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_PERSISTENCE_LDAP_STATISTICS_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.PythonService\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.custom.script\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.oxauth.service.custom\" additivity=\"false\">\n        <level value=\"TRACE\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n\n\n\nPlease restart \ntomcat\n after any change in log levels to allow the changes to take effect. Use the following command to restart tomcat:\n\n\n# service tomcat restart\n\n\n\n\nSystem logs\n#\n\n\n\n\nFor Ubuntu: \n/var/log/syslog\n\n\nFor RPM based systems: \n/var/log/messages\n\n\n\n\nWeb Server logs\n#\n\n\n\n\nFor Debian: \n/var/log/apache2/\n\n\nFor RPM based systems: \n/var/log/httpd/\n\n\n\n\nCore Gluu Server logs\n#\n\n\n\n\nopt/tomcat/logs/\n\n\n\n\nSAML transaction related logs\n#\n\n\n\n\n/opt/idp/logs/\n\n\n\n\nLDAP logs\n#\n\n\n\n\n/opt/opendj/logs/\n\n\n\n\nMiscellaneous logs\n#\n\n\n\n\n/var/logs/\n\n\n\n\nTo escalate the log levels\n#\n\n\n\n\nOpenID Connect or any core logging: \nlog4j.xml\n, which is located in \n/opt/tomcat/webapps/oxauth/WEB-INF/classes/\n\n\nSAML logging: \nlogging.xml\n, which is located in \n/opt/idp.conf/\n\n\n\n\nSystem Logs\n#\n\n\nSometimes it worthy to check system logs like \n/var/log/messages\n. These logs contain global system messages.\n\n\nWeb Server logs\n#\n\n\nApache httpd / apache2 logs are available in \n/var/log/httpd\n or \n/var/log/apache2\n for Ubuntu.\n\n\n\n\n\n\naccess_log\n: This log contains information about requests coming into the Gluu Server, success status or requests, execution time for any request etc.     \n\n\n\n\n\n\nerror_log\n: This log shows error messages if the web server encounter any issue while processing incoming requests.    \n\n\n\n\n\n\nother_vhosts_access.log\n: This log is specific to the Gluu Server setup and those links which are being requested by a user from a web browser. An example below:     \n\n\ntest.gluu.org:443 192.168.201.184 - - [17/Jul/2016:18:25:21 +0000] \"GET /index.html HTTP/1.1\" 200 13239 \"-\" \"Java/1.7.0_95\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET / HTTP/1.1\" 302 2185 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/ HTTP/1.1\" 200 583 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/home.htm HTTP/1.1\" 302 272 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/login?cid=4 HTTP/1.1\" 302 474 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /oxauth/authorize?scope=openid+profile+email+user_name&response_type=code+id_token&nonce=nonce&redirect_uri=https%3A%2F%2Ftest.gluu.org%2Fidentity%2Fauthentication%2Fauthcode&client_id=%40%21EFCB.890F.FB6C.2603%210001%210A49.F454%210008%21F047.7275 HTTP/1.1\" 302 450 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\n\n\n\n\n\n\n\nThere are few other logs like \nssl_access_log\n , \nssl_error_log\n , and \nssl_request_log\n which are collecting information on port 443 specifically.      \n\n\n\n\n\n\nRemember the initial \nGET\n request will hit the Apache server first, and then be proxied via the AJP port 8009 to tomcat. If you see traffic on the web server, but not on tomcat, this is a good place to check to see if something is wrong. For example, you might want to check if the firewall is blocking port 8009 if you see somthing like this:\n\n\n    [Thu Jul 14 23:49:19 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:19 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n\n\n\nCore logs\n#\n\n\noxAuth logs\n#\n\n\n\n\n\n\noxauth.log\n    \n\nThis log is gathering most of the authentication related information. Generally this is the first log to review for any authentication-related troubleshooting, like authentication failure or missing clients etc. Here's an example showing a successful user authentication:\n\n\n2016-07-16 15:43:28,232 INFO  [org.xdi.oxauth.auth.Authenticator] Authentication success for Client: '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,232 TRACE [org.xdi.oxauth.auth.Authenticator] Authentication successfully for '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,238 DEBUG [xdi.oxauth.token.ws.rs.TokenRestWebServiceImpl] Attempting to request access token: grantType = authorization_code, code = 61ba3c0d-42c4-4f1f-8420-fd5f6707f1b1, redirectUri = https://test.gluu.org/identity/authentication/authcode, username = null, refreshToken = null, clientId = null, ExtraParams = {grant_type=[Ljava.lang.String;@1add2a62, redirect_uri=[Ljava.lang.String;@2e0995b5, code=[Ljava.lang.String;@7743b5af}, isSecure = true, codeVerifier = null\n2016-07-16 15:43:28,249 DEBUG [org.xdi.oxauth.service.UserService] Getting user information from LDAP: userId = zico\n\n\n\n\n\n\n\noxauth_script.log\n   \n\nMost of the custom script's initialization and few more information are loaded here in this script. In the sample log below we can see 'Super Gluu' 2FA has been loaded in the Gluu Server:\n\n\n2016-07-16 19:06:32,705 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialization\n2016-07-16 19:06:32,713 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialize notification services\n2016-07-16 19:06:32,750 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialized successfully. oneStep: 'False', twoStep: 'True', pushNotifications: 'False'\n\n\n\n\n\n\n\noxTrust logs\n#\n\n\n\n\n\n\noxtrust.log\n   \n\nThis log gather logs related to Gluu Server Admin panel (called oxTrust). For example, what is the clientID of an oxTrust session? Or, what scopes are being used, etc. In the example below, you can see an admin user has successfuly logged into the \ntest.gluu.org\n Gluu Server admin panel, has the proper authorizationCode, a redirectURI, and the user's role:\n\n\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator] authorizationCode : 555a7586-6ca2-4b39-ab39-2ac78ec81524\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator]  scopes : user_name email openid profile\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] clientID : @!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] getting accessToken\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] tokenURL : https://test.gluu.org/oxauth/seam/resource/restv1/oxauth/token\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] Sending request to token endpoint\n2016-07-16 16:41:55,692 INFO  [org.gluu.oxtrust.action.Authenticator] redirectURI : https://test.gluu.org/identity/authentication/authcode\n2016-07-16 16:41:55,919 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse : org.xdi.oxauth.client.TokenResponse@1914b8d\n2016-07-16 16:41:55,920 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse.getErrorType() : null\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  accessToken : d39bd11c-7bc0-45e1-b772-2d0a5f74e6fb\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  validating AccessToken\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator]  response3.getStatus() : 200\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator] validate check session status:200\n2016-07-16 16:41:56,004 INFO  [org.gluu.oxtrust.action.Authenticator] Session validation successful. User is logged in\n2016-07-16 16:41:56,108 INFO  [org.gluu.oxtrust.action.Authenticator] user uid:admin\n2016-07-16 16:41:56,119 INFO  [org.gluu.oxtrust.action.Authenticator] Authenticating user 'admin'\n2016-07-16 16:41:56,125 DEBUG [org.gluu.oxtrust.action.Authenticator] Configuring application after user 'admin' login\n\n\n\n\n\n\n\noxtrust_script.log\n   \n\nThis log collects information on oxTrust related scripts and their operations. For example, if an organization uses a custom attribute which populates values for every user, then the Gluu Server Administrator needs to use a custom script for their 'Cache Refresh' process. This log will receive information when the custom script runs.\n\n\n\n\n\n\noxtrust_cache_refresh.log\n  \n\nCache Refresh related information is available here, such as Status, Primary failure etc. In the sample snippet below we are seeing the status of users that have been synced into Gluu Server, number of failures, and total number of updated users.\n\n\n2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries\n\n\n\n\n\n\n\nWrapper logs\n#\n\n\n\n\n\n\ncatalina.log\n  \n\nA standard servlet contianer log. For example: \n\n\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\n\n\n\n\n\n\n\nlocalhost.log\n   \n\nStandard logs on web applications. For example: \n\n\nJul 16, 2016 3:33:31 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:33:32 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:37:27 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:42 PM org.apache.catalina.core.ApplicationContext log\nINFO: No Spring WebApplicationInitializer types detected on classpath\nJul 16, 2016 3:37:43 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:54 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring FrameworkServlet 'cas'\n\n\n\n\n\n\n\nwrapper.log\n   \n\nThis log is the godfather of all Gluu Server logs, accounting for roughly 95% of log information. As you can see in the example snippet below, this log is showing that one CAS module loaded, one user is trying to authenticate, there's a search happening for this user in LDAP, etc.:\n\n\nINFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Reloading registered services.>\nINFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Loaded 1 services.>\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,835 TRACE [org.xdi.oxauth.service.SessionStateService] Found session_state cookie: '2f73dc6e-7421-48ff-9b49-7c59565bfe50'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Try to get session by id: 2f73dc6e-7421-48ff-9b49-7c59565bfe50 ...\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Session dn: uniqueIdentifier=2f73dc6e-7421-48ff-9b49-7c59565bfe50,ou=session,o=@!EFCB.890F.FB6C.2603!0001!0A49.F454,o=gluu\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,839 DEBUG [org.xdi.oxauth.service.external.ExternalAuthenticationService] Executing python 'authenticate' authenticator method\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Authenticating user with LDAP: username: support@gluu.org\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Attempting to find userDN by primary key: 'mail' and key value: 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Getting user information from LDAP: attributeName = 'mail', attributeValue = 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,844 DEBUG [org.xdi.oxauth.service.AuthenticationService] Found '2' entries\n\n\n\n\n\n\n\nCache Refresh logs\n#\n\n\n\n\noxtrust_cache_refresh.log\n     \n\n\n\n\nCache Refresh related information such as status, primary failure, etc., is available in this log. In the sample snippet below we see the total number of users that have been synced into the Gluu Server, number of failures, and total number of updated users. \n\n\n    2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n    2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n    2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n    2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n    2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n    2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries\n\n\n\nCAS logs\n#\n\n\n\n\ncas.log\n    \n\n\n\n\nIf oxCAS is enabled in the Gluu Server then this log will have information about any CAS transactions. In the example snippet below, we see a CAS service validate a response from the Gluu Server:\n\n\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.web.ServiceValidateController] - Successfully validated service ticket ST-237741-1LZ4eWcHvBS75FAXTICY-myldap.gluu.org for service [https://testcas1.gluu.org/c?pkg=https://testcas1.gluu.org/portal.p_redirect]\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Attempted to extract Request from HttpServletRequest. Results:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Request Body:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted ArtifactId: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted Request Id: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.web.support.SamlArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/?pkg=https://testcas1.gluu.org/portal.p_redirect\n    2016-07-16 15:50:41,878 DEBUG [org.jasig.cas.web.support.CasArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/\n    2016-07-16 15:50:41,880 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Updating ticket ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [uid] in the list of allowed attributes for service [zico]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [sn] in the list of allowed attributes for service [mohib]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.CentralAuthenticationServiceImpl] - Principal id to return for service [mohib zico] is [mzico]. The default principal id is [mzico].\n    2016-07-16 15:50:41,883 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Deleting ticket         ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,884 INFO [com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager] - Audit trail record BEGIN\n    =============================================================\n    WHO: audit:unknown\n    WHAT: ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    ACTION: SERVICE_TICKET_VALIDATED\n    APPLICATION: CAS\n    WHEN: Sat Jul 16 15:50:41 EDT 2016\n    CLIENT IP ADDRESS: 192.168.1.2\n    SERVER IP ADDRESS: test.gluu.org\n    =============================================================\n\n\n\nAsimba logs\n#\n\n\n\n\nwrapper.log\n     \n\n\n\n\nAny Asimba SAML proxy transactions are logged in \nwrapper.log\n. In the below example we see the requestor (from where the SSO request is coming), we see the SAML proxy server's information (\ntest.gluu.org\n), and the authentication server (\nnest.gluu.org\n) which is performing the authentication, releasing attributes, etc. \n\n\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | <samlp:AuthnRequest\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     AssertionConsumerServiceURL=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Destination=\"https://test.gluu.org/asimba/profiles/saml2/sso/web\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ID=\"_a5704abd6d2f2e5b0eba5a1671f6c658\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     IssueInstant=\"2016-07-17T15:40:33Z\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://sp.gluu.org/shibboleth</saml:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <samlp:NameIDPolicy AllowCreate=\"1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | </samlp:AuthnRequest>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO Put on map? urlpath.context=web \n    ......................\n    ......................\n    ......................\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Request recieved: https://test.gluu.org/asimba/sso/web\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Creating new MetadataProvider from configured source for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] NamedFilesystemMetadataProvider Created for file with name /opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider New metadata succesfully loaded for '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider Next refresh cycle for metadata provider '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml' will occur on '2016-07-17T18:40:37.746Z' ('2016-07-17T18:40:37.746Z' local time)\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] StandardMetadataProviderManager No EntitiesDescriptor was returned, so no IDPList to create.\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Using binding: urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Returning existing MetadataProvider for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] MemorySessionFactory Existing session(s) updated: fQUnP-s1K_fdxK2wdLjp4A for requestor 'https://sp.gluu.org/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] AbstractAuthNMethodSAML2Profile <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | <saml2p:AuthnRequest AssertionConsumerServiceIndex=\"0\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Destination=\"https://nest.gluu.org/idp/profile/SAML2/POST/SSO\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ForceAuthn=\"false\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ID=\"_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     IssueInstant=\"2016-07-17T15:40:37.771Z\" ProviderName=\"Sp.gluu.org\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/asimba/profiles/saml2</saml2:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         <ds:SignedInfo>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:Reference URI=\"#_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 </ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestValue>okTsHKhXes6hA7cKbLjsBwFZhtM=</ds:DigestValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             </ds:Reference>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         </ds:SignedInfo>\n    ............................INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"uid\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:0.9.2342.19200300.100.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"sn\" Name=\"urn:oid:2.5.4.4\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">User</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"givenName\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:2.5.4.42\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">Admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |         </saml2:AttributeStatement>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |     </saml2:Assertion>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 | </saml2p:Response>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |\n\n\n\nSAML logs\n#\n\n\n\n\n\n\nidp-access.log\n   \n\nEach time the IDP is accessed a log entry is made detailing whether or not information sent back. These messages include request time, remote host making the rreuqest, server host name and port, and the request path. This log is written in the machine parsable format:\n\n\n20160717T162519Z|192.168.201.1|test.gluu.org:443|/profile/SAML2/Redirect/SSO|\n\n\n\n\n\n\n\nidp-process.log\n  \n\nThis is one of the most important logs for SAML transactions in the Gluu Server. It includes the Issuer's information, released attributes, certificate information etc. Here's an example: \n\n\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response\n    Destination=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    ID=\"_322f0ff5e516e8ecb3b7ecd21aaf457c\"\n    InResponseTo=\"_a05a4d01389b7904c7e4d40a4d099285\"\n    IssueInstant=\"2016-07-17T16:25:19.165Z\" Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <saml2:Issuer\n        Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/idp/shibboleth</saml2:Issuer>\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n        <ds:SignedInfo>\n...................\n...................\n...................\neLiXH2CuvJrwkHhcSQSyKAs4WPXbLE5hhzEd9GGRmiovGmdZJvDU5zRX74m80GcL0d+mf6WzLRZBVmcPcs/2Dk1+J2Sw67W0DF0vgpoDvhgKHMdkKI8Ex\nZ38cVHo1xJqpQvUq0StjGPgdRBWUJoMe4BVRD8sM7BDbjFoY5H3TJxzYbnjsxwDZaqIZQt+4=</xenc:CipherValue>\n            </xenc:CipherData>\n        </xenc:EncryptedData>\n    </saml2:EncryptedAssertion>\n</saml2p:Response>\n\n16:25:19.395 - INFO [Shibboleth-Audit:1028] - 20160717T162519Z|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect|_a05a4d01389b7904c7e4d40a4d099285|https://sp.gluu.org/shibboleth|urn:mace:shibboleth:2.0:profiles:saml2:sso|https://test.gluu.org/idp/shibboleth|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|_322f0ff5e516e8ecb3b7ecd21aaf457c|admin|urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport|uid,mail,sn,givenName,|||\n\n\n\n\n\n\n\nLDAP logs\n#\n\n\n\n\n\n\naccess.log\n   \n\n\naccess.log\n is in active mode all the time. The \naccess.log\n messages provide information about the types of LDAP operations processed by the Gluu Server.\n\n\n\n\n\n\naudit.log\n  \n\nAll changes / modifications of LDAP server are being logged here in audit log.\n\n\n\n\n\n\nerrors.log\n  \n\nLDAP server startup and shutdown related information are available in \nerrors.log\n.\n\n\n\n\n\n\n=======\nlogs.md for Auth Management\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naa935adcda228d7539f9d75223d62e64c34e4e57",
            "title": "Log Management"
        },
        {
            "location": "/admin-guide/logs/#gluu-server-logs",
            "text": "When it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--logs are the best place to start.   The Gluu Server administrator can investigate logs from the oxTrust  View Logs  feature or directly with SSH access to the Gluu-Server container.   Gluu Server logs can be found in the following locations:",
            "title": "Gluu Server Logs"
        },
        {
            "location": "/admin-guide/logs/#log-levels",
            "text": "Gluu Server logs use the log4j logging levels which can be changed in the  log4j.xml  file under the  /opt/tomcat/webapps/oxauth/WEB-INF/classes  folder.\nThe available logging levels are :     Level  Description      ALL  All log levels are documented    DEBUG  Detailed events useful to debug application    ERROR  Errors are documented    INFO  Logs informational messages as the application runs    OFF  No logs are recorded    TRACE  Logs detailed events; more than DEBUG     As mentioned above the  log4j.xml  contains the log levels. Open the file using the command below  # vi /opt/tomcat/webapps/oxauth/WEB-INF/classes/log4j.xml  The log leves are defined under the  <level value=\" \" />  tags which can be changed to one of the above from the table. The following section is taken from a live Gluu Server  log4j.xml  file showing different log levels for different logs. The changes made this section will reflect in the logs.   <logger name=\"org.xdi.oxauth.service.status.ldap\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_PERSISTENCE_LDAP_STATISTICS_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.PythonService\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.service.custom.script\" additivity=\"false\">\n        <level value=\"INFO\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>\n\n    <logger name=\"org.xdi.oxauth.service.custom\" additivity=\"false\">\n        <level value=\"TRACE\"/>\n        <appender-ref ref=\"OX_SCRIPT_LOG_FILE\" />\n    </logger>  Please restart  tomcat  after any change in log levels to allow the changes to take effect. Use the following command to restart tomcat:  # service tomcat restart  System logs #   For Ubuntu:  /var/log/syslog  For RPM based systems:  /var/log/messages   Web Server logs #   For Debian:  /var/log/apache2/  For RPM based systems:  /var/log/httpd/   Core Gluu Server logs #   opt/tomcat/logs/   SAML transaction related logs #   /opt/idp/logs/   LDAP logs #   /opt/opendj/logs/   Miscellaneous logs #   /var/logs/   To escalate the log levels #   OpenID Connect or any core logging:  log4j.xml , which is located in  /opt/tomcat/webapps/oxauth/WEB-INF/classes/  SAML logging:  logging.xml , which is located in  /opt/idp.conf/",
            "title": "Log Levels"
        },
        {
            "location": "/admin-guide/logs/#system-logs_1",
            "text": "Sometimes it worthy to check system logs like  /var/log/messages . These logs contain global system messages.",
            "title": "System Logs"
        },
        {
            "location": "/admin-guide/logs/#web-server-logs_1",
            "text": "Apache httpd / apache2 logs are available in  /var/log/httpd  or  /var/log/apache2  for Ubuntu.    access_log : This log contains information about requests coming into the Gluu Server, success status or requests, execution time for any request etc.         error_log : This log shows error messages if the web server encounter any issue while processing incoming requests.        other_vhosts_access.log : This log is specific to the Gluu Server setup and those links which are being requested by a user from a web browser. An example below:       test.gluu.org:443 192.168.201.184 - - [17/Jul/2016:18:25:21 +0000] \"GET /index.html HTTP/1.1\" 200 13239 \"-\" \"Java/1.7.0_95\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET / HTTP/1.1\" 302 2185 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/ HTTP/1.1\" 200 583 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/home.htm HTTP/1.1\" 302 272 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /identity/login?cid=4 HTTP/1.1\" 302 474 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\ntest.gluu.org:443 192.168.201.1 - - [17/Jul/2016:18:25:56 +0000] \"GET /oxauth/authorize?scope=openid+profile+email+user_name&response_type=code+id_token&nonce=nonce&redirect_uri=https%3A%2F%2Ftest.gluu.org%2Fidentity%2Fauthentication%2Fauthcode&client_id=%40%21EFCB.890F.FB6C.2603%210001%210A49.F454%210008%21F047.7275 HTTP/1.1\" 302 450 \"https://test.gluu.org/identity/\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"    There are few other logs like  ssl_access_log  ,  ssl_error_log  , and  ssl_request_log  which are collecting information on port 443 specifically.          Remember the initial  GET  request will hit the Apache server first, and then be proxied via the AJP port 8009 to tomcat. If you see traffic on the web server, but not on tomcat, this is a good place to check to see if something is wrong. For example, you might want to check if the firewall is blocking port 8009 if you see somthing like this:      [Thu Jul 14 23:49:19 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:19 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: ajp_ilink_receive() can't receive header\n    [Thu Jul 14 23:49:20 2016] [error] ajp_read_header: ajp_ilink_receive failed\n    [Thu Jul 14 23:49:20 2016] [error] (70007)The timeout specified has expired: proxy: read response failed from (null) (localhost)",
            "title": "Web Server logs"
        },
        {
            "location": "/admin-guide/logs/#core-logs",
            "text": "oxAuth logs #    oxauth.log      \nThis log is gathering most of the authentication related information. Generally this is the first log to review for any authentication-related troubleshooting, like authentication failure or missing clients etc. Here's an example showing a successful user authentication:  2016-07-16 15:43:28,232 INFO  [org.xdi.oxauth.auth.Authenticator] Authentication success for Client: '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,232 TRACE [org.xdi.oxauth.auth.Authenticator] Authentication successfully for '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275'\n2016-07-16 15:43:28,238 DEBUG [xdi.oxauth.token.ws.rs.TokenRestWebServiceImpl] Attempting to request access token: grantType = authorization_code, code = 61ba3c0d-42c4-4f1f-8420-fd5f6707f1b1, redirectUri = https://test.gluu.org/identity/authentication/authcode, username = null, refreshToken = null, clientId = null, ExtraParams = {grant_type=[Ljava.lang.String;@1add2a62, redirect_uri=[Ljava.lang.String;@2e0995b5, code=[Ljava.lang.String;@7743b5af}, isSecure = true, codeVerifier = null\n2016-07-16 15:43:28,249 DEBUG [org.xdi.oxauth.service.UserService] Getting user information from LDAP: userId = zico    oxauth_script.log     \nMost of the custom script's initialization and few more information are loaded here in this script. In the sample log below we can see 'Super Gluu' 2FA has been loaded in the Gluu Server:  2016-07-16 19:06:32,705 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialization\n2016-07-16 19:06:32,713 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialize notification services\n2016-07-16 19:06:32,750 INFO  [org.xdi.service.PythonService] (pool-2-thread-2) oxPush2. Initialized successfully. oneStep: 'False', twoStep: 'True', pushNotifications: 'False'    oxTrust logs #    oxtrust.log     \nThis log gather logs related to Gluu Server Admin panel (called oxTrust). For example, what is the clientID of an oxTrust session? Or, what scopes are being used, etc. In the example below, you can see an admin user has successfuly logged into the  test.gluu.org  Gluu Server admin panel, has the proper authorizationCode, a redirectURI, and the user's role:  2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator] authorizationCode : 555a7586-6ca2-4b39-ab39-2ac78ec81524\n2016-07-16 16:41:55,690 INFO  [org.gluu.oxtrust.action.Authenticator]  scopes : user_name email openid profile\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] clientID : @!EFCB.890F.FB6C.2603!0001!0A49.F454!0008!F047.7275\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] getting accessToken\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] tokenURL : https://test.gluu.org/oxauth/seam/resource/restv1/oxauth/token\n2016-07-16 16:41:55,691 INFO  [org.gluu.oxtrust.action.Authenticator] Sending request to token endpoint\n2016-07-16 16:41:55,692 INFO  [org.gluu.oxtrust.action.Authenticator] redirectURI : https://test.gluu.org/identity/authentication/authcode\n2016-07-16 16:41:55,919 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse : org.xdi.oxauth.client.TokenResponse@1914b8d\n2016-07-16 16:41:55,920 DEBUG [org.gluu.oxtrust.action.Authenticator]  tokenResponse.getErrorType() : null\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  accessToken : d39bd11c-7bc0-45e1-b772-2d0a5f74e6fb\n2016-07-16 16:41:55,921 DEBUG [org.gluu.oxtrust.action.Authenticator]  validating AccessToken\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator]  response3.getStatus() : 200\n2016-07-16 16:41:56,004 DEBUG [org.gluu.oxtrust.action.Authenticator] validate check session status:200\n2016-07-16 16:41:56,004 INFO  [org.gluu.oxtrust.action.Authenticator] Session validation successful. User is logged in\n2016-07-16 16:41:56,108 INFO  [org.gluu.oxtrust.action.Authenticator] user uid:admin\n2016-07-16 16:41:56,119 INFO  [org.gluu.oxtrust.action.Authenticator] Authenticating user 'admin'\n2016-07-16 16:41:56,125 DEBUG [org.gluu.oxtrust.action.Authenticator] Configuring application after user 'admin' login    oxtrust_script.log     \nThis log collects information on oxTrust related scripts and their operations. For example, if an organization uses a custom attribute which populates values for every user, then the Gluu Server Administrator needs to use a custom script for their 'Cache Refresh' process. This log will receive information when the custom script runs.    oxtrust_cache_refresh.log    \nCache Refresh related information is available here, such as Status, Primary failure etc. In the sample snippet below we are seeing the status of users that have been synced into Gluu Server, number of failures, and total number of updated users.  2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries    Wrapper logs #    catalina.log    \nA standard servlet contianer log. For example:   Jul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.\nJul 16, 2016 7:06:26 PM com.sun.faces.renderkit.html_basic.HtmlBasicRenderer getForComponent\nWARNING: Unable to find component with ID j_idt244 in view.    localhost.log     \nStandard logs on web applications. For example:   Jul 16, 2016 3:33:31 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:33:32 PM org.apache.catalina.core.ApplicationContext log\nINFO: Closing Spring root WebApplicationContext\nJul 16, 2016 3:37:27 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:42 PM org.apache.catalina.core.ApplicationContext log\nINFO: No Spring WebApplicationInitializer types detected on classpath\nJul 16, 2016 3:37:43 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring root WebApplicationContext\nJul 16, 2016 3:37:54 PM org.apache.catalina.core.ApplicationContext log\nINFO: Initializing Spring FrameworkServlet 'cas'    wrapper.log     \nThis log is the godfather of all Gluu Server logs, accounting for roughly 95% of log information. As you can see in the example snippet below, this log is showing that one CAS module loaded, one user is trying to authenticate, there's a search happening for this user in LDAP, etc.:  INFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Reloading registered services.>\nINFO   | jvm 1    | 2016/07/16 19:17:48 | 2016-07-16 19:17:48,855 INFO [org.jasig.cas.services.DefaultServicesManagerImpl] - <Loaded 1 services.>\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,835 TRACE [org.xdi.oxauth.service.SessionStateService] Found session_state cookie: '2f73dc6e-7421-48ff-9b49-7c59565bfe50'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Try to get session by id: 2f73dc6e-7421-48ff-9b49-7c59565bfe50 ...\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,838 TRACE [org.xdi.oxauth.service.SessionStateService] Session dn: uniqueIdentifier=2f73dc6e-7421-48ff-9b49-7c59565bfe50,ou=session,o=@!EFCB.890F.FB6C.2603!0001!0A49.F454,o=gluu\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,839 DEBUG [org.xdi.oxauth.service.external.ExternalAuthenticationService] Executing python 'authenticate' authenticator method\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Authenticating user with LDAP: username: support@gluu.org\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Attempting to find userDN by primary key: 'mail' and key value: 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,840 DEBUG [org.xdi.oxauth.service.AuthenticationService] Getting user information from LDAP: attributeName = 'mail', attributeValue = 'support@gluu.org'\nINFO   | jvm 1    | 2016/07/16 19:17:51 | 2016-07-16 19:17:51,844 DEBUG [org.xdi.oxauth.service.AuthenticationService] Found '2' entries    Cache Refresh logs #   oxtrust_cache_refresh.log         Cache Refresh related information such as status, primary failure, etc., is available in this log. In the sample snippet below we see the total number of users that have been synced into the Gluu Server, number of failures, and total number of updated users.       2016-07-16 17:18:17,691 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated person '@!EFCB.890F.FB6C.2603!0001!0A49.F454!0000!40EB.AB8E'\n    2016-07-16 17:18:17,691 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Updated '2,002' entries\n    2016-07-16 17:18:17,722 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Failed to update '0' entries\n    2016-07-16 17:18:17,738 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Keep external persons: 'true'\n    2016-07-16 17:18:17,739 DEBUG [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Count entries '0' for removal from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) Removed '0' persons from target server\n    2016-07-16 17:18:17,739 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries before updating inum list\n    2016-07-16 17:18:17,740 INFO  [gluu.oxtrust.ldap.cache.service.CacheRefreshTimer] (pool-1-thread-9) There are '2,002' entries after removal '0' entries  CAS logs #   cas.log        If oxCAS is enabled in the Gluu Server then this log will have information about any CAS transactions. In the example snippet below, we see a CAS service validate a response from the Gluu Server:      2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.web.ServiceValidateController] - Successfully validated service ticket ST-237741-1LZ4eWcHvBS75FAXTICY-myldap.gluu.org for service [https://testcas1.gluu.org/c?pkg=https://testcas1.gluu.org/portal.p_redirect]\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Attempted to extract Request from HttpServletRequest. Results:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Request Body:\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted ArtifactId: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.authentication.principal.SamlService] - Extracted Request Id: null\n    2016-07-16 15:50:39,211 DEBUG [org.jasig.cas.support.saml.web.support.SamlArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/?pkg=https://testcas1.gluu.org/portal.p_redirect\n    2016-07-16 15:50:41,878 DEBUG [org.jasig.cas.web.support.CasArgumentExtractor] - Extractor generated service for: https://testcas1.gluu.org/c/\n    2016-07-16 15:50:41,880 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Updating ticket ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [uid] in the list of allowed attributes for service [zico]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.services.support.RegisteredServiceDefaultAttributeFilter] - Found attribute [sn] in the list of allowed attributes for service [mohib]\n    2016-07-16 15:50:41,882 DEBUG [org.jasig.cas.CentralAuthenticationServiceImpl] - Principal id to return for service [mohib zico] is [mzico]. The default principal id is [mzico].\n    2016-07-16 15:50:41,883 DEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Deleting ticket         ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    2016-07-16 15:50:41,884 INFO [com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager] - Audit trail record BEGIN\n    =============================================================\n    WHO: audit:unknown\n    WHAT: ST-237742-beBEaYMCtoiRJBCYJLKt-myldap.gluu.org\n    ACTION: SERVICE_TICKET_VALIDATED\n    APPLICATION: CAS\n    WHEN: Sat Jul 16 15:50:41 EDT 2016\n    CLIENT IP ADDRESS: 192.168.1.2\n    SERVER IP ADDRESS: test.gluu.org\n    =============================================================  Asimba logs #   wrapper.log         Any Asimba SAML proxy transactions are logged in  wrapper.log . In the below example we see the requestor (from where the SSO request is coming), we see the SAML proxy server's information ( test.gluu.org ), and the authentication server ( nest.gluu.org ) which is performing the authentication, releasing attributes, etc.       INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | <samlp:AuthnRequest\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     AssertionConsumerServiceURL=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Destination=\"https://test.gluu.org/asimba/profiles/saml2/sso/web\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ID=\"_a5704abd6d2f2e5b0eba5a1671f6c658\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     IssueInstant=\"2016-07-17T15:40:33Z\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://sp.gluu.org/shibboleth</saml:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |     <samlp:NameIDPolicy AllowCreate=\"1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | </samlp:AuthnRequest>\n    INFO   | jvm 1    | 2016/07/17 15:40:33 |\n    INFO   | jvm 1    | 2016/07/17 15:40:33 | (ASIMBAWA) [2016-07-17 15:40:33] [DEBUG] WebBrowserSSO Put on map? urlpath.context=web \n    ......................\n    ......................\n    ......................\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Request recieved: https://test.gluu.org/asimba/sso/web\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Creating new MetadataProvider from configured source for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] NamedFilesystemMetadataProvider Created for file with name /opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider New metadata succesfully loaded for '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] AbstractReloadingMetadataProvider Next refresh cycle for metadata provider '/opt/tomcat/webapps/asimba/WEB-INF/sample-data/idp/2185528996791210207.xml' will occur on '2016-07-17T18:40:37.746Z' ('2016-07-17T18:40:37.746Z' local time)\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] StandardMetadataProviderManager No EntitiesDescriptor was returned, so no IDPList to create.\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] WebBrowserSSOProfile Using binding: urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] SAML2IDP Returning existing MetadataProvider for SAML2 IDP 'https://nest.gluu.org/idp/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [INFO] MemorySessionFactory Existing session(s) updated: fQUnP-s1K_fdxK2wdLjp4A for requestor 'https://sp.gluu.org/shibboleth'\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | (ASIMBAWA) [2016-07-17 15:40:37] [DEBUG] AbstractAuthNMethodSAML2Profile <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 | <saml2p:AuthnRequest AssertionConsumerServiceIndex=\"0\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Destination=\"https://nest.gluu.org/idp/profile/SAML2/POST/SSO\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ForceAuthn=\"false\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     ID=\"_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     IssueInstant=\"2016-07-17T15:40:37.771Z\" ProviderName=\"Sp.gluu.org\"\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <saml2:Issuer xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/asimba/profiles/saml2</saml2:Issuer>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |     <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         <ds:SignedInfo>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             <ds:Reference URI=\"#_ee01f578f94409aa41af080cc74787b8fQUnP-s1K_fdxK2wdLjp4A\">\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                     <ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 </ds:Transforms>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |                 <ds:DigestValue>okTsHKhXes6hA7cKbLjsBwFZhtM=</ds:DigestValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |             </ds:Reference>\n    INFO   | jvm 1    | 2016/07/17 15:40:37 |         </ds:SignedInfo>\n    ............................INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"uid\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:0.9.2342.19200300.100.1.1\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"sn\" Name=\"urn:oid:2.5.4.4\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">User</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             <saml2:Attribute FriendlyName=\"givenName\"\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 Name=\"urn:oid:2.5.4.42\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                 <saml2:AttributeValue\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |                     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">Admin</saml2:AttributeValue>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |             </saml2:Attribute>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |         </saml2:AttributeStatement>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |     </saml2:Assertion>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 | </saml2p:Response>\n    INFO   | jvm 1    | 2016/07/17 15:40:56 |",
            "title": "Core logs"
        },
        {
            "location": "/admin-guide/logs/#saml-logs",
            "text": "idp-access.log     \nEach time the IDP is accessed a log entry is made detailing whether or not information sent back. These messages include request time, remote host making the rreuqest, server host name and port, and the request path. This log is written in the machine parsable format:  20160717T162519Z|192.168.201.1|test.gluu.org:443|/profile/SAML2/Redirect/SSO|    idp-process.log    \nThis is one of the most important logs for SAML transactions in the Gluu Server. It includes the Issuer's information, released attributes, certificate information etc. Here's an example:    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<saml2p:Response\n    Destination=\"https://sp.gluu.org/Shibboleth.sso/SAML2/POST\"\n    ID=\"_322f0ff5e516e8ecb3b7ecd21aaf457c\"\n    InResponseTo=\"_a05a4d01389b7904c7e4d40a4d099285\"\n    IssueInstant=\"2016-07-17T16:25:19.165Z\" Version=\"2.0\" xmlns:saml2p=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <saml2:Issuer\n        Format=\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" xmlns:saml2=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://test.gluu.org/idp/shibboleth</saml2:Issuer>\n    <ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\">\n        <ds:SignedInfo>\n...................\n...................\n...................\neLiXH2CuvJrwkHhcSQSyKAs4WPXbLE5hhzEd9GGRmiovGmdZJvDU5zRX74m80GcL0d+mf6WzLRZBVmcPcs/2Dk1+J2Sw67W0DF0vgpoDvhgKHMdkKI8Ex\nZ38cVHo1xJqpQvUq0StjGPgdRBWUJoMe4BVRD8sM7BDbjFoY5H3TJxzYbnjsxwDZaqIZQt+4=</xenc:CipherValue>\n            </xenc:CipherData>\n        </xenc:EncryptedData>\n    </saml2:EncryptedAssertion>\n</saml2p:Response>\n\n16:25:19.395 - INFO [Shibboleth-Audit:1028] - 20160717T162519Z|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect|_a05a4d01389b7904c7e4d40a4d099285|https://sp.gluu.org/shibboleth|urn:mace:shibboleth:2.0:profiles:saml2:sso|https://test.gluu.org/idp/shibboleth|urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST|_322f0ff5e516e8ecb3b7ecd21aaf457c|admin|urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport|uid,mail,sn,givenName,|||",
            "title": "SAML logs"
        },
        {
            "location": "/admin-guide/logs/#ldap-logs_1",
            "text": "access.log      access.log  is in active mode all the time. The  access.log  messages provide information about the types of LDAP operations processed by the Gluu Server.    audit.log    \nAll changes / modifications of LDAP server are being logged here in audit log.    errors.log    \nLDAP server startup and shutdown related information are available in  errors.log .    =======\nlogs.md for Auth Management         aa935adcda228d7539f9d75223d62e64c34e4e57",
            "title": "LDAP logs"
        },
        {
            "location": "/admin-guide/clients/",
            "text": "OpenID Connect Client\n#\n\n\n\n\nA client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for \nDynamic Client\nRegistration\n\nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the\n\noxAuth-RP\n and there is also another in \nPHP\nRP\n.\n\n\nA new client can be added by clicking the \nAdd Client\n link.\n\n\n\n\nAvailable \nClients\n can be seen by hitting the \nSearch\n button\nleaving the search box empty.\n\n\n\n\nRegister Client\n#\n\n\nGluu Server Administrators can click on the \nAdd Client\n button to register new clients. It is possible to dynamically register any client by calling the dynamic registration endpoint, but this section focuses on the manual registration of the client. The following screen appears when the \nAdd Client\n button is clicked.\n\n\n\n\n\n\n\n\nClient Name:\n This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.\n\n\n\n\n\n\nClient Secret:\n This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for the secret can be inserted manually.\n\n\n\n\n\n\nApplication Type:\n There are two types of applications, Web and\n  Native.\n\n\n\n\n\n\nWeb:\n The Dynamic Client Registration is the default for web. In this type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP. The web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.\n\n\n\n\n\n\nNative:\n Custom uri for Native type application have to follow HTTP with localhost. This is suitable for a mobile app which cannot maintain the client secret between itself and the authorization server.\n\n\n\n\n\n\n\n\n\n\nPre Authorization:\n Allow pre-authorized Client Applications \n\n\n\n\n\n\nLogo URI:\n The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.\n\n\n\n\n\n\nClient URI:\n The URL of the home page of the client.\n\n\n\n\n\n\nPolicy URI:\n The URL of the Privacy policy.\n\n\n\n\n\n\nTerms of Service URI:\n The URL to the Terms of Use of the Client.\n\n\n\n\n\n\nJWKS URI:\n The URL for the Client's JSON Web Key Set.\n\n\n\n\n\n\nJWKS:\n The value of  Client's JSON Web Key Set. The jwks_uri and jwks parameters MUST NOT be used together.\n\n\n\n\n\n\n\n\n\n\n\n\nSector Identifier URI:\n URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.\n\n\n\n\n\n\nSubject Type:\n The subject type requested for responses to this Client.\n\n\n\n\n\n\nJWS alg Algorithm for signing the ID Token:\n JWS alg algorithm for signing the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting the ID Token:\n JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the ID Token:\n JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing the UserInfo Responses:\n JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for encrypting the UserInfo Responses:\n  JWE alg algorithm for encrypting UserInfo Responses.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\n\n\n\n\n\n\nJWE enc Algorithm for encrypting the UserInfo Responses:\n JWE enc algorithm for encrypting UserInfo Responses. \n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWS alg Algorithm for signing Request Objects:\n JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The value none can be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE alg Algorithm for encrypting Request Objects:\n JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nJWE enc Algorithm for encrypting Request Objects:\n JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nAuthentication method for the Token Endpoint:\n Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\n\n\n\n\n\n\nJWS alg Algorithm for Authentication method to Token Endpoint:\n JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  See \nAlgorithms section\n for options.\n\n\n\n\n\n\nDefault Maximum Authentication Age:\n Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nRequire Auth Time:\n Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.\n\n\n\n\n\n\nPersist Client Authorizations*:\n Specifies whether to persist user authorizations.\n\n\n\n\n\n\n\n\n\n\n\n\nInitiate Login URI:\n URI using the https scheme that a third party can use to initiate a login by the RP.\n\n\n\n\n\n\nRequest URIs:\n Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.\n\n\n\n\n\n\nLogout URIs:\n Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.\n\n\n\n\n\n\nLogout Session Required*:\n Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.\n\n\n\n\n\n\nClient Secret Expires:\n Time at which the client will expire or 0 if it will not expire.\n\n\n\n\n\n\nAdd Login URI:\n This option can be used to add the login URL.\n\n\n\n\n\n\n\nAdd Redirect Logout URI:\n The logout request, if requires a redirection can be added here.\n\n\n\n\n\n\n\nAdd Scopes:\n This option can be used to add the required scopes in the Gluu Server.\n\nThe available scopes can be listed by hitting the \nSearch\n button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server administrator can select the required scopes.\n\n\n\n\n\n\nAdd Response Type:\n There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.\n\n\n\n\n\n\n\nAdd Grant Type:\n There are 3 grant type available in this option \nauthorization_code, implicit, refresh_token\n\n\n\n\n\n\n\n\nAdd Contact:\n Use this option to add the email address for the Client contact\n\n\n\n\n\n\nAdd Default ACR value:\n The default ACR Value is defined through this option and it is used to include multi-factor authentication in registered clients. Please use this option to define which from of authentication to use for specific client. See section 3.3.2.1 for details.\n\n\n\n\n\n\n\nAdd Request URI:\n Use this option to add the Request URI\n\n\n\n\n\n\nAdd Logout URI:\n Use this option to add the logout URI.\n\n\n\n\n\n\nMulti-Factor Authentication for Clients\n#\n\n\nThe \nacr_values\n parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the \nacr_value\n parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in \nAdd Default ACR value\n to chosen mechanism. The authentication mechanism must be enabled in the \nCustom Scripts\n section as well.\n\n\n\n\nNote\n\n\nSupported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"\n\n\n\n\nThe values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.\n\n\n\n\n\n\n\n\nACR Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nu2f\n\n\nFIDO U2F Device\n\n\n\n\n\n\nduo\n\n\nDuo soft-token authentication\n\n\n\n\n\n\nbasic\n\n\nUsername/Password authentication from LDAP Server\n\n\n\n\n\n\noxpush2\n\n\nMulti-factor authentication\n\n\n\n\n\n\ngplus\n\n\nGoogle+ authentication\n\n\n\n\n\n\ninternal\n\n\nUse Gluu Server LDAP to authenticate users\n\n\n\n\n\n\n\n\nAlgorithm\n#\n\n\noxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.\n\n\nNote:\n It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.\n\n\nAvailable Signature Algorithms:\n none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.\n\n\nEncryption, Key Encryption Algorithms:\n RSA1_5, RSA-OAEP, A128KW, A256KW.\n\n\nBlock Encryption Algorithms:\n A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,\n\n\nCustom Client Registration\n#\n\n\nUsing interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use \nredirect_uri\n to determine if we need to allow access to\nadditional scopes or not.\n\n\nTo access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.\n\n\n\n\n\n\nThe script is \navailable here",
            "title": "Configure and Manage OpenID Clients"
        },
        {
            "location": "/admin-guide/clients/#openid-connect-client",
            "text": "A client in OAuth2 could be either a website or mobile application.\nOpenID Connect has an API for  Dynamic Client\nRegistration \nwhich efficiently pushes the task to the application developer. If you\ndo not want to write an application to register your client, there are a\nfew web pages around that can do the job for you. Gluu publishes the oxAuth-RP  and there is also another in  PHP\nRP .  A new client can be added by clicking the  Add Client  link.   Available  Clients  can be seen by hitting the  Search  button\nleaving the search box empty.   Register Client #  Gluu Server Administrators can click on the  Add Client  button to register new clients. It is possible to dynamically register any client by calling the dynamic registration endpoint, but this section focuses on the manual registration of the client. The following screen appears when the  Add Client  button is clicked.     Client Name:  This contains the recognizable and unique display name\n  of the client. The name of the Client to be presented to the End-User.    Client Secret:  This is the Data Encryption Standard scheme used by\n  Confidential Clients to authenticate to the token endpoint. The value for the secret can be inserted manually.    Application Type:  There are two types of applications, Web and\n  Native.    Web:  The Dynamic Client Registration is the default for web. In this type the redirect_uri for implicit grant type must be a real\nhostname with HTTPS. This type is not approved any localhost or HTTP. The web application uses the authorization code flow for clients which\ncan maintain a client secret between the uris and the authorization\nserver.    Native:  Custom uri for Native type application have to follow HTTP with localhost. This is suitable for a mobile app which cannot maintain the client secret between itself and the authorization server.      Pre Authorization:  Allow pre-authorized Client Applications     Logo URI:  The URL of the logo for the client application.\n  If present, the server will display this image to the End-User during approval.    Client URI:  The URL of the home page of the client.    Policy URI:  The URL of the Privacy policy.    Terms of Service URI:  The URL to the Terms of Use of the Client.    JWKS URI:  The URL for the Client's JSON Web Key Set.    JWKS:  The value of  Client's JSON Web Key Set. The jwks_uri and jwks parameters MUST NOT be used together.       Sector Identifier URI:  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.\n  The URL references a file with a single JSON array of redirect_uri values.    Subject Type:  The subject type requested for responses to this Client.    JWS alg Algorithm for signing the ID Token:  JWS alg algorithm for signing the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting the ID Token:  JWE alg algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting the ID Token:  JWE enc algorithm for encrypting the ID Token issued to this Client.\n  See  Algorithms section  for options.    JWS alg Algorithm for signing the UserInfo Responses:  JWS alg algorithm for signing UserInfo Responses.\n  If this is specified, the response will be JWT serialized, and signed using JWS.\n  See  Algorithms section  for options.    JWS alg Algorithm for encrypting the UserInfo Responses:   JWE alg algorithm for encrypting UserInfo Responses.\n  See  Algorithms section  for options.       JWE enc Algorithm for encrypting the UserInfo Responses:  JWE enc algorithm for encrypting UserInfo Responses. \n  See  Algorithms section  for options.    JWS alg Algorithm for signing Request Objects:  JWS alg algorithm used for signing Request Objects sent to the OP.\n  This algorithm is used when the Request Object is passed by value (using the request parameter) and when it is\n  passed by reference (using the request_uri parameter).\n  The value none can be used.\n  See  Algorithms section  for options.    JWE alg Algorithm for encrypting Request Objects:  JWE alg algorithm the RP is declaring that it use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    JWE enc Algorithm for encrypting Request Objects:  JWE enc algorithm the RP is declaring that it may use for\n  encrypting Request Objects sent to the OP.\n  See  Algorithms section  for options.    Authentication method for the Token Endpoint:  Requested Client Authentication method for the Token Endpoint.\n  The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none.\n  If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.       JWS alg Algorithm for Authentication method to Token Endpoint:  JWS alg algorithm used for signing the JWT\n  used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt\n  authentication methods. The value none cannot be used.\n  See  Algorithms section  for options.    Default Maximum Authentication Age:  Specifies that the End-User must be actively authenticated if the End-User was\n  authenticated longer ago than the specified number of seconds.\n  If omitted, no default Maximum Authentication Age is specified.    Require Auth Time:  Specifies whether the auth_time Claim in the ID Token is required.\n  If omitted, the default value is false.    Persist Client Authorizations*:  Specifies whether to persist user authorizations.       Initiate Login URI:  URI using the https scheme that a third party can use to initiate a login by the RP.    Request URIs:  Array of request_uri values that are pre-registered by the RP for use at the OP.\n   The Server cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request.    Logout URIs:  Redirect logout URLs supplied by the RP to which it can request that the End-User's\n  User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed.    Logout Session Required*:  Specifies whether the RP requires that a sid (session ID) query parameter\n  be included to identify the RP session at the OP when the logout_uri is used.\n  If omitted, the default value is false.    Client Secret Expires:  Time at which the client will expire or 0 if it will not expire.    Add Login URI:  This option can be used to add the login URL.    Add Redirect Logout URI:  The logout request, if requires a redirection can be added here.    Add Scopes:  This option can be used to add the required scopes in the Gluu Server. The available scopes can be listed by hitting the  Search  button, and\n  keeping the search phrase blank. Furthermore, from this the Gluu Server administrator can select the required scopes.    Add Response Type:  There are three types of responses in the Gluu\n  Server and they are Code, Token and ID Token. The Gluu Server\n  Administrator can select all of them for testing purposes.    Add Grant Type:  There are 3 grant type available in this option  authorization_code, implicit, refresh_token     Add Contact:  Use this option to add the email address for the Client contact    Add Default ACR value:  The default ACR Value is defined through this option and it is used to include multi-factor authentication in registered clients. Please use this option to define which from of authentication to use for specific client. See section 3.3.2.1 for details.    Add Request URI:  Use this option to add the Request URI    Add Logout URI:  Use this option to add the logout URI.    Multi-Factor Authentication for Clients #  The  acr_values  parameter is used to specify the use of specific multi-factor authentication for each client. If a scenario is presented where different clients use different authentication mechanism, then the  acr_value  parameter is used to specify the choice. Out of the box, GLuu Server supports U2F, DUO, Basic, oxPush/SuperGluu, Google+ and internal LDAP authentication. While registering new clients, put the mode in  Add Default ACR value  to chosen mechanism. The authentication mechanism must be enabled in the  Custom Scripts  section as well.   Note  Supported ACR Values in Client Registration: \"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"   The values appear in order of preference and the successful authentication is sent as the acr claim value in the issued ID Token. The table below explains the acr values. Please click on the description to access the specific how-to guide for the ACR declared authentication.     ACR Value  Description      u2f  FIDO U2F Device    duo  Duo soft-token authentication    basic  Username/Password authentication from LDAP Server    oxpush2  Multi-factor authentication    gplus  Google+ authentication    internal  Use Gluu Server LDAP to authenticate users     Algorithm #  oxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.  Note:  It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.  Available Signature Algorithms:  none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.  Encryption, Key Encryption Algorithms:  RSA1_5, RSA-OAEP, A128KW, A256KW.  Block Encryption Algorithms:  A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,",
            "title": "OpenID Connect Client"
        },
        {
            "location": "/admin-guide/clients/#custom-client-registration",
            "text": "Using interception scripts you can customize client registration\nbehavior. For example, by default oxAuth allows new clients to access to\ndefault scopes only. With a custom client registration interception\nscript it is possible to allow access to more scopes. For instance, we\ncan use  redirect_uri  to determine if we need to allow access to\nadditional scopes or not.  To access the interface for custom scripts in oxTrust, navigate to\nConfiguration --> Custom Scripts --> Custom Client Registration.    The script is  available here",
            "title": "Custom Client Registration"
        },
        {
            "location": "/admin-guide/saml/",
            "text": "Outbound SAML\n\n\nTrust Relationship Requirements\n\n\nMetadata of the SP\n\n\nRequired Attributes\n\n\nSSO Testing Endpoint\n\n\n\n\n\n\nCreate a Trust Relationship\n\n\nRelying Party Configuration\n\n\nFederation Configuration\n\n\n\n\n\n\n\n\n\n\nInbound SAML\n\n\nRequired Setup\n\n\nSpecific Setup Details\n\n\n\n\n\n\nCustom Script Configuration\n\n\nAdding IDP in Asimba Server\n\n\nAdding SP Requestor in Asimba Server\n\n\nTest Asimba with SAML Proxy\n\n\n\n\n\n\n\n\n\n\nOutbound SAML\n#\n\n\nOutbound SAML can also be called SP-initiated Single Sign On (SSO) or traditional SAML. In an outbound SAML transaction, the SP redirects the user to the designated Identity Provider (IDP) for authentication and authorization. The IDP will ask for the username and password for the user and up on successful authentication, the user is sent back to the SP logged in. The requirement for the IDP is a trust relationship (TR) set up beforehand with the SP. The next section covers how to set up a TR in Gluu Server.\n\n\n\n\nNote\n\n\nFor any SAML transaction, a trust relationship must be created with the IDP.\n\n\n\n\nTrust Relationship Requirements\n#\n\n\nTrust Relationship requires the infomation listed below.\n\n\n\n\nMetadata of website\n\n\nRequired attribute of website\n\n\nSSO testing endpoint of website\n\n\n\n\nMetadata of the SP\n#\n\n\nMetadata is a XML file which has configuration data used to provision any website (SP) or IDP (Gluu Server) to communicate with each other. It is interchangeable between the IDP and the SP.\n\n\nWebsites (SP) can provide metadata via URL or as a separate file.\n\n\nRequired Attributes\n#\n\n\nEvery organization has their own policy to release/share attributes with\nany IDP or SP. The oxTrust GUI supports both preconfigured and custom attribute\nRelease to the SP. The administrator only needs to click on the desired \nattribute and it will be released to the SP.\n\n\nSSO Testing Endpoint\n#\n\n\nEvery website (SP) should have both a staging and a production URI\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.\n\n\nCreate a Trust Relationship\n#\n\n\n\n\nGo to SAML \u2192 Trust Relationships\n\n\nClick on \u201cAdd Relationship\u201d\n\n\n\n\n\n\n\n\nA new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.\n\n\n\n\n\n\n\n\nDisplay Name\n: Name of the Trust Relationship (it should be unique for every trust relationship)\n\n\nDescription\n: Little description. Purpose and SSO link can be added here.\n\n\nMetadata Type\n: Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server\n\n\nFile\n: If SP has uploadable metadata in XML format, this option works best.\n\n\nURI\n: If the metadata of SP has URI link and accessible from the internet, Gluu Server Administrator can use this option.\n\n\n\n\n\n\nReleased\n: The attributes that are required for the SP must be in this pane. The required attributes can be selected from the left side pane with the heading \u201cRelease Additional Attributes\u201d.\nThe TR is added by clicking on the \nAdd\n button located in the lower left side of the page.\n\n\n\n\nRelying Party Configuration\n#\n\n\nThe Relying Party must be configured for some SPs. The relying party configuration is accessible on the TR Creation page. The checkbox \nConfigure specific Relying Party\n must be checked.\n\n\n\n\nThe checkbox will result in a link which can be accessed to configure relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.\n\n\n\n\nFederation Configuration\n#\n\n\nIf the SP is part of any identity federation such as InCommon Federation, then the administrator must add the federation as a SP in Gluu Server. This will allow the administrator to add SPs under the federation easily from a TR. The requirement of a federation TR created using the general TR is a must. The example below shows an administrator adding a TR for InCommon Federation.\n\n\n\n\nOnce this is done, the SPs under the federation can be added by selecting the Federation from the \nFederation Name\n drop down menu and selecting the entity-id for the SP.\n\n\n\n\nInbound SAML\n#\n\n\nGluu Server uses an open source product called Asimba to achieve inbound SAML. Asimba allows websites to use a single IDP for SSO even when the organization has multiple trusted IDPs. Please see the \nAsimba website\n for more information.\n\n\nGluu Server is shipped with the SAML Script which simplifies the process of using SAML Proxy. The SAML proxy configuration is made easy from the oxTrust admin interface. This section provides a step-by-step method of configuring the proxy with two (2) IDPs and a single SP. The administrator can add multiple IDPs or SPs if required using the same method. However, it is mandatory that all the SPs and IDPs are connected to the Asimba server, or the IDP that has the Asimba module enabled.\ni\n\n\nRequired Setup\n#\n\n\n\n\n\n\n\n\nSetup hostname\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhttps://sp.gluu.org/protected/print.py\n\n\nThis is a shibboleth SP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\nhttps://test.gluu.org\n\n\nThis is a Gluu Server SAML IdP with Asimba\n\n\n\n\n\n\nhttps://nest.gluu.org\n\n\nThis is a second Gluu Server SAML IdP connected to \nhttps://test.gluu.org\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nDescription of SAML Authentication Module is available here: https://github.com/GluuFederation/oxAuth/tree/master/Server/integrations/saml\n\n\n\n\nSpecific Setup Details\n#\n\n\nThe Gluu Server setup with the hostname \nhttps://test.gluu.org\n must be setup with Asimba. This is done by typing \nyes\n to the \nsetup script prompt\n.\n\n\n\n\nCustom Script Configuration\n#\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://test.gluu.org\n.\n\n\n\n\n\n\n\n\nLog into the oxTrust interface as \nadmin\n\n\n\n\n\n\nNavigate to Configuration --> Manage Custom Scripts\n\n\n\n\n\n\n\n\n\n\nSelect/Add \nsaml\n script from \nPerson Authentication\n tab\n\n\n\n\n\n\n\n\nName: saml\n\n\nDescription: Saml Authentication module\n\n\nProgramming Language: Python\n\n\nLevel: 1\n\n\nLocation Type: LDAP\n\n\nUsage Type: Web\n\n\nCustom property (key/value)\n\n\nsaml_deployment_type: enroll\n\n\nsaml_idp_sso_target_url: https://test.gluu.org/asimba/profiles/saml2/sso/web\n\n\nsaml_validate_response: false\n\n\nasimba_entity_id: https://test.gluu.org/saml\n\n\nasimba_saml_certificate_file: /etc/certs/saml.pem \n\n\nnote: Deployer need to copy 'asimba.crt' in 'saml.pem' without the 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag. \n\n\n\n\n\n\nuser_object_classes: eduPerson\n\n\nsaml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] } \n\n\nexample: \n{\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }\n\n\n\n\n\n\nenforce_uniqueness_attr_list: attribute1, attribute2\n\n\nexample: \nedupersonprincipalname, uid, mail, givenName\n\n\n\n\n\n\nsaml_use_authn_context: false\n\n\nsaml_generate_name_id: true\n\n\nScript: Please copy the \nSAML Script\n from Github. \n\n\nEnabled: True\n\n\n\n\n\n\n\n\n\n\nAdding IDP in Asimba Server\n#\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://test.gluu.org\n.\n\n\n\n\n\n\n\n\nLog into the oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> Idp\n\n\n\n\n\n\n\n\n\n\nClick on 'Add IDP' button\n\n\n\n\n\n\n\n\n\n\nFill up the form with the information below:\n\n\n\n\n\n\nID: The entityID of the remote ID/ADFS \n\n\n\n\nExample: \nhttps:<hostname_of_gluu_server>/idp/shibboleth\n  \n\n\n\n\n\n\n\n\nFriendly Name: There is no particular format for this field, use anything \n\n\n\n\n\n\nMetadata URL: Keep it blank, we will upload metadata\n\n\n\n\n\n\nMetadata Timeout: Keep it as it is. \n\n\n\n\n\n\nMetadata File: Download metadata of remote IDP/ADFS and upload that XML file. \n\n\n\n\nExample: The metadata for Gluu IdP can be downloaded using \nwget -c https:<hostname_of_gluu_server>/idp/shibboleth\n\n\n\n\n\n\n\n\nTrust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 certificate\n\n\n\n\nExample: You will get the SAML certificate from Gluu Server's metadata link or available inside \n/etc/certs/shibIDP.crt\n\n\n\n\n\n\n\n\nNameIDFormat: SAML2 URI nameID format if remote IDP is a Gluu Server otherwise ask for their nameID format.\n\n\n\n\nExample: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'\n\n\n\n\n\n\n\n\nEnabled: Yes\n\n\n\n\n\n\nSend Scoping: Yes\n\n\n\n\n\n\nAllowCreate: Yes\n\n\n\n\n\n\nDisable SSO for IDP: No\n\n\n\n\n\n\nACS index: Yes\n\n\n\n\n\n\nSend NameIDPolicy: Yes\n\n\n\n\n\n\nAvoid Subject Confirmations: No\n\n\n\n\n\n\n\n\n\n\n\n\nAdding SP Requestor in Asimba Server\n#\n\n\n\n\n\n\nLog into oxTrust interface\n\n\n\n\n\n\nNavigate to SAML --> SP Requestor\n\n\n\n\n\n\n\n\n\n\nClick on 'Add SP Requestor'\n\n\n\n\n\n\n\n\nPlease fill up the form with the information below:\n\n\nSelect parent SP Pool: requestorpool.1\n\n\nID: https://test.gluu.org/saml\n\n\nFriendly Name: oxAuth SAML\n\n\nMetadata URL: Not required\n\n\nMetadata Timeout: -1\n\n\nMetadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata. \n\n\nTrust Certificate File: Not required\n\n\nProperties: Not required\n\n\nEnabled: Yes\n\n\nSigning: No\n\n\nmetadata snippet: \n\n\n\n\n\n\n\n\n<md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor> \n\n\n\n\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://test.gluu.org\n.\n\n\n\n\nCreate Trust relationships for all service provides which are included in SAML Proxy SSO workflow. In our test setup we created Trust relationship for remote SP which has entityID 'https://sp.gluu.org/shibboleth'. How to create Trust Relationship is available in \nSection 2.1\n.\n\n\n\n\nNote\n\n\nThe configuration below is done in the Gluu Server with Asimba installed with the hostname \nhttps://nest.gluu.org\n.\n\n\n\n\nLog into the oxTrust inteface and follow the steps to add a new Trust Relationship.\n\n\n\n\nGluu Server's Asimba metadata can be achieved from 'https://test.gluu.org/asimba/profiles/saml2'\n\n\nDownload the metadata and use 'File' method to create Trust relationship\n\n\n\n\n\n\nRelying Party Configuration: 'SAML2SSO' Profile \n\n\n\n\n\n\n\n\n- example: \n    - includeAttributeStatement: Yes\n    - assertionLifeTime: 300000\n    - assertionProxyCount: 0\n    - signResponses: conditional\n    - signAssertions: never\n    - signRequests: conditional\n    - encryptAssertions: never\n    - encryptNameIds: never\n\n\n\n\n\nAttribute: Any attribute Service Providers require. Any kind of nameID from below list is mandatory. \n\n\nnameID: \n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"\n\n\nnameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n\n\n\n\n\n\nHow to create nameID in Gluu Server is available \nhere\n\n\n\n\n\n\n\n\nTest Asimba with SAML Proxy\n#\n\n\nHere is a quick video on how SAML Proxy SSO might look like. Here in this video we are using 'https://sp.gluu.org/protected/print.py' as our protected service provider link. After initiating the SSO, we are moved to Gluu Server's SAML Proxy discovery page ( https://test.gluu.org ). From there we selected 'Nest' as our desired authentication server. After succesful authentication we are landing to proctected resource. \n\n\n\n\nYoutube Video Link",
            "title": "Configure and Manage SAML SSO"
        },
        {
            "location": "/admin-guide/saml/#outbound-saml",
            "text": "Outbound SAML can also be called SP-initiated Single Sign On (SSO) or traditional SAML. In an outbound SAML transaction, the SP redirects the user to the designated Identity Provider (IDP) for authentication and authorization. The IDP will ask for the username and password for the user and up on successful authentication, the user is sent back to the SP logged in. The requirement for the IDP is a trust relationship (TR) set up beforehand with the SP. The next section covers how to set up a TR in Gluu Server.   Note  For any SAML transaction, a trust relationship must be created with the IDP.   Trust Relationship Requirements #  Trust Relationship requires the infomation listed below.   Metadata of website  Required attribute of website  SSO testing endpoint of website   Metadata of the SP #  Metadata is a XML file which has configuration data used to provision any website (SP) or IDP (Gluu Server) to communicate with each other. It is interchangeable between the IDP and the SP.  Websites (SP) can provide metadata via URL or as a separate file.  Required Attributes #  Every organization has their own policy to release/share attributes with\nany IDP or SP. The oxTrust GUI supports both preconfigured and custom attribute\nRelease to the SP. The administrator only needs to click on the desired \nattribute and it will be released to the SP.  SSO Testing Endpoint #  Every website (SP) should have both a staging and a production URI\nendpoint which can be checked for SSO, where the user will access to log\ninto that SP.  Create a Trust Relationship #   Go to SAML \u2192 Trust Relationships  Click on \u201cAdd Relationship\u201d     A new page will appear. Here, as a Gluu Server administrator you need\n  to provide all the information regarding the SP to establish Trust\n  Relationship from Gluu Server.     Display Name : Name of the Trust Relationship (it should be unique for every trust relationship)  Description : Little description. Purpose and SSO link can be added here.  Metadata Type : Depending on trusted party\u2019s metadata (SP), there are four available types in Gluu Server  File : If SP has uploadable metadata in XML format, this option works best.  URI : If the metadata of SP has URI link and accessible from the internet, Gluu Server Administrator can use this option.    Released : The attributes that are required for the SP must be in this pane. The required attributes can be selected from the left side pane with the heading \u201cRelease Additional Attributes\u201d.\nThe TR is added by clicking on the  Add  button located in the lower left side of the page.   Relying Party Configuration #  The Relying Party must be configured for some SPs. The relying party configuration is accessible on the TR Creation page. The checkbox  Configure specific Relying Party  must be checked.   The checkbox will result in a link which can be accessed to configure relying party for the TR. The image below shows the relying party config panel from which the administrator can add the specific option.   Federation Configuration #  If the SP is part of any identity federation such as InCommon Federation, then the administrator must add the federation as a SP in Gluu Server. This will allow the administrator to add SPs under the federation easily from a TR. The requirement of a federation TR created using the general TR is a must. The example below shows an administrator adding a TR for InCommon Federation.   Once this is done, the SPs under the federation can be added by selecting the Federation from the  Federation Name  drop down menu and selecting the entity-id for the SP.",
            "title": "Outbound SAML"
        },
        {
            "location": "/admin-guide/saml/#inbound-saml",
            "text": "Gluu Server uses an open source product called Asimba to achieve inbound SAML. Asimba allows websites to use a single IDP for SSO even when the organization has multiple trusted IDPs. Please see the  Asimba website  for more information.  Gluu Server is shipped with the SAML Script which simplifies the process of using SAML Proxy. The SAML proxy configuration is made easy from the oxTrust admin interface. This section provides a step-by-step method of configuring the proxy with two (2) IDPs and a single SP. The administrator can add multiple IDPs or SPs if required using the same method. However, it is mandatory that all the SPs and IDPs are connected to the Asimba server, or the IDP that has the Asimba module enabled.\ni  Required Setup #     Setup hostname  Description      https://sp.gluu.org/protected/print.py  This is a shibboleth SP connected to  https://test.gluu.org    https://test.gluu.org  This is a Gluu Server SAML IdP with Asimba    https://nest.gluu.org  This is a second Gluu Server SAML IdP connected to  https://test.gluu.org      Note  Description of SAML Authentication Module is available here: https://github.com/GluuFederation/oxAuth/tree/master/Server/integrations/saml   Specific Setup Details #  The Gluu Server setup with the hostname  https://test.gluu.org  must be setup with Asimba. This is done by typing  yes  to the  setup script prompt .   Custom Script Configuration #   Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://test.gluu.org .     Log into the oxTrust interface as  admin    Navigate to Configuration --> Manage Custom Scripts      Select/Add  saml  script from  Person Authentication  tab     Name: saml  Description: Saml Authentication module  Programming Language: Python  Level: 1  Location Type: LDAP  Usage Type: Web  Custom property (key/value)  saml_deployment_type: enroll  saml_idp_sso_target_url: https://test.gluu.org/asimba/profiles/saml2/sso/web  saml_validate_response: false  asimba_entity_id: https://test.gluu.org/saml  asimba_saml_certificate_file: /etc/certs/saml.pem   note: Deployer need to copy 'asimba.crt' in 'saml.pem' without the 'BEGIN CERTIFICATE' and 'END CERTIFICATE' tag.     user_object_classes: eduPerson  saml_idp_attributes_mapping: { \"attribute_name\": [\"attribute_name\", \"SAML2 URI\"] }   example:  {\"uid\": [\"uid\", \"urn:oid:0.9.2342.19200300.100.1.1\"], \"mail\": [\"mail\", \"urn:oid:0.9.2342.19200300.100.1.3\"], \"givenName\": [\"givenName\", \"urn:oid:2.5.4.42\"], \"sn\": [\"sn\", \"urn:oid:2.5.4.4\"], \"eduPersonPrincipalName\": [\"eduPersonPrincipalName\", \"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\"] }    enforce_uniqueness_attr_list: attribute1, attribute2  example:  edupersonprincipalname, uid, mail, givenName    saml_use_authn_context: false  saml_generate_name_id: true  Script: Please copy the  SAML Script  from Github.   Enabled: True      Adding IDP in Asimba Server #   Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://test.gluu.org .     Log into the oxTrust interface    Navigate to SAML --> Idp      Click on 'Add IDP' button      Fill up the form with the information below:    ID: The entityID of the remote ID/ADFS    Example:  https:<hostname_of_gluu_server>/idp/shibboleth        Friendly Name: There is no particular format for this field, use anything     Metadata URL: Keep it blank, we will upload metadata    Metadata Timeout: Keep it as it is.     Metadata File: Download metadata of remote IDP/ADFS and upload that XML file.    Example: The metadata for Gluu IdP can be downloaded using  wget -c https:<hostname_of_gluu_server>/idp/shibboleth     Trust Certificate File: Grab the SAML cert from remote IDP/ADFS and upload that x509 certificate   Example: You will get the SAML certificate from Gluu Server's metadata link or available inside  /etc/certs/shibIDP.crt     NameIDFormat: SAML2 URI nameID format if remote IDP is a Gluu Server otherwise ask for their nameID format.   Example: `urn:oasis:names:tc:SAML:2.0:nameid-format:transient'     Enabled: Yes    Send Scoping: Yes    AllowCreate: Yes    Disable SSO for IDP: No    ACS index: Yes    Send NameIDPolicy: Yes    Avoid Subject Confirmations: No       Adding SP Requestor in Asimba Server #    Log into oxTrust interface    Navigate to SAML --> SP Requestor      Click on 'Add SP Requestor'     Please fill up the form with the information below:  Select parent SP Pool: requestorpool.1  ID: https://test.gluu.org/saml  Friendly Name: oxAuth SAML  Metadata URL: Not required  Metadata Timeout: -1  Metadata File: Create a SAML metadata like below and save it as 'saml_oxauth_metadata.xml'. Upload this metadata.   Trust Certificate File: Not required  Properties: Not required  Enabled: Yes  Signing: No  metadata snippet:      <md:EntityDescriptor xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" entityID=\"https://test.gluu.org/saml\">\n  <md:SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n    <md:AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://test.gluu.org/oxauth/postlogin\" index=\"0\"/>\n  </md:SPSSODescriptor>\n  <md:Organization>\n    <md:OrganizationName xml:lang=\"en\">Gluu</md:OrganizationName>\n    <md:OrganizationDisplayName xml:lang=\"en\">Gluu - Open Source Access Management</md:OrganizationDisplayName>\n    <md:OrganizationURL xml:lang=\"en\">http://www.gluu.org</md:OrganizationURL>\n  </md:Organization>\n  <md:ContactPerson contactType=\"technical\">\n    <md:GivenName>Administrator</md:GivenName>\n    <md:EmailAddress>support@gluu.org</md:EmailAddress>\n  </md:ContactPerson>\n</md:EntityDescriptor>     Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://test.gluu.org .   Create Trust relationships for all service provides which are included in SAML Proxy SSO workflow. In our test setup we created Trust relationship for remote SP which has entityID 'https://sp.gluu.org/shibboleth'. How to create Trust Relationship is available in  Section 2.1 .   Note  The configuration below is done in the Gluu Server with Asimba installed with the hostname  https://nest.gluu.org .   Log into the oxTrust inteface and follow the steps to add a new Trust Relationship.   Gluu Server's Asimba metadata can be achieved from 'https://test.gluu.org/asimba/profiles/saml2'  Download the metadata and use 'File' method to create Trust relationship    Relying Party Configuration: 'SAML2SSO' Profile      - example: \n    - includeAttributeStatement: Yes\n    - assertionLifeTime: 300000\n    - assertionProxyCount: 0\n    - signResponses: conditional\n    - signAssertions: never\n    - signRequests: conditional\n    - encryptAssertions: never\n    - encryptNameIds: never   Attribute: Any attribute Service Providers require. Any kind of nameID from below list is mandatory.   nameID:   nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"  nameIDFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"  nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"    How to create nameID in Gluu Server is available  here     Test Asimba with SAML Proxy #  Here is a quick video on how SAML Proxy SSO might look like. Here in this video we are using 'https://sp.gluu.org/protected/print.py' as our protected service provider link. After initiating the SSO, we are moved to Gluu Server's SAML Proxy discovery page ( https://test.gluu.org ). From there we selected 'Nest' as our desired authentication server. After succesful authentication we are landing to proctected resource.    Youtube Video Link",
            "title": "Inbound SAML"
        },
        {
            "location": "/admin-guide/oauth2/",
            "text": "Client Credentials Grant\n\n\nWhen Should the Client Credentials Flow Be Used?\n\n\nExample Flow\n\n\n\n\n\n\nResource Owner Password Credentials Grant\n\n\nWhen Should the Resource Owner Password Flow Be Used?\n\n\nSecurity Properties\n\n\nUser Experience\n\n\nExample Flow\n\n\n\n\n\n\nGluu OAuth2 Access Management\n\n\nOverview\n\n\nGluu Access Token\n\n\nGAT as plain json\n\n\nAS Respnse for RP\n\n\nAS Response for RP\n\n\nRP Request Resource with GAT\n\n\n\n\n\n\nDiscovery\n\n\n\n\n\n\n\n\n\n\nClient Credentials Grant\n#\n\n\nThe Client Credentials Grant allows resource owner to use password\ncredentials (i.e. username and password) as an authorization grant to\nobtain an access token. The credentials should only be used when there\nis a high degree of trust between the resource owner and the client\n(e.g. its device operating system or a highly privileged application),\nand when other authorization grant types are not available (such as an\nauthorization code).\n\n\nEven though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.\n\n\nThe flow is illustrated below:\n\n\n\n\nThe steps of the flow are:\n\n\n\n\n\n\nThe application requests an access token from the authorization server, authenticating the request with its client credentials.\n\n\n\n\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client.\n\n\n\n\n\n\nWhen Should the Client Credentials Flow Be Used?\n#\n\n\nThe Client Credentials flow should be used when the resources of or any\napplication/service are stored externally in cloud storages such as\nGoogle Storage or Amazon S3 which can be accessed using API. In this\ncase the application needs to read and update these resources, but\nacting on behalf of the app itself rather than any individual user.\nThe application can ask the OAuth authorization server for an access\ntoken directly, without the involvement of any end user.\n\n\nExample Flow\n#\n\n\nThe following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer\n\n\n\n\nThe message sent to the authorization server is:\n\n\n\n\nRequest\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&scope=storage\n\n\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client.\n\n\n\n\nResponse\n\n\n\n\nHTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}\n\n\n\n\nResource Owner Password Credentials Grant\n#\n\n\nThe resource owner password credentials (i.e. username and password) can\nbe used directly as an authorization grant to obtain an access token.\nThe credentials should only be used when there is a high degree of trust\nbetween the resource owner and the client (e.g. its device operating\nsystem or a highly privileged application), and when other authorization\ngrant types are not available (such as an authorization code).\n\n\nEven though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.\n\n\nThe flow is illustrated below:\n\n\n\n\nThe steps of the flow are:\n\n\n\n\n\n\nUser presents their credentials to the application in addition to a username and password.\n\n\n\n\n\n\nIf the client credentials are successfully authenticated, an access token is returned to the client\n\n\n\n\n\n\nWhen Should the Resource Owner Password Flow Be Used?\n#\n\n\nThis flow should be used sparingly because the resource owner\u2019s password\nis exposed to the application. It is recommended only for first-party\n\u201cofficial\u201d applications released by the API provider, and not opened up\nto wider third-party developer communities. If a user is asked to type\ntheir password into \u201cofficial\u201d applications, they may become accustomed\nto doing so and become vulnerable to phishing attempts by other apps. In\norder to mitigate this concern, developers and IT administrators should\nclearly educate their users how they should determine which apps are\n\u201cofficial\u201d and which are not.\n\n\nSecurity Properties\n#\n\n\nThere are some security benefits to using this flow against\nauthenticating API calls with a username and password (via HTTP Basic\naccess authentication or similar) although the application has access to\nthe resource owner's password. With Basic authentication, an application\nneeds to have continuous access to the user\u2019s password in order to make\nAPI calls. If the user wants to revoke the access of the client, he must\nchange the password and re-enter the password in all the applications\nthat are allowed access to the resource.\n\n\nHowever, if the OAuth Resource Owner Password flow is used, the\napplication only needs access to the user\u2019s credentials once: on first\nuse when the credentials are exchanged for an access token. This means\nthere\u2019s no requirement for the app to store these credentials within the\napplication or on the device, and revoking access is easy as well.\n\n\nUser Experience\n#\n\n\nThe user experience for this flow is identical to typical password-based\naccess requests. The application asks the user for their username and\npassword and the user provides the information. The application then\nmakes either a server-side or client-side request to the API provider\u2019s\nauthorization server, without any user-facing interface changes. If the\nAPI provider does not issue a refresh_token and the issued access_token\nis short-lived, the application will likely store the username and\npassword for future authentication attempts. Unfortunately, this defeats\nsome of the benefit of this flow.\n\n\nExample Flow\n#\n\n\nThe following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.\n\n\n// Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28\n\n\n\n\n\n\nRequest\n\n\n\n\nPOST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&scope=openid&username=mike&password=secret\n\n\n\n\n\n\nResponse\n\n\n\n\nHTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}\n\n\n\n\nGluu OAuth2 Access Management\n#\n\n\n[GAT][Gluu Access Token] is used for Gluu OAuth2 Access Management.\n\n\nOverview\n#\n\n\n\nCentralized Access Management needs a profile enabling a client ot obtain a token from the AS by explicitly specifyting the \nrequested scopes.\n\n\nGluu Access Token\n#\n\n\nGAT as plain json\n#\n\n\n{\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n}\n\n\n\n\nThe [GAT][Gluu Access Token] is issued at a new endpoint which is published at \n<hostname>/.well-known/uma-configuration\n\n\nImportant:\n all requests/response to/from/between RP, RS, AS must contain \"GAT\" HTTP header with \"true\" value. In this way \nAS differentiante calls from normal UMA.\n\n\nAS Respnse for RP\n#\n\n\nPOST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}\n\n\n\n\nAS Response for RP\n#\n\n\nGAT is returned in the \nrpt\n key as value.\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nGAT: true\n\n{\n  \"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"\n}\n\n\n\n\nRP Request Resource with GAT\n#\n\n\nGET /users/alice/album/photo.jpg HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com\nGAT: true\n\n\n\n\nDiscovery\n#\n\n\n   ...\n   \"gat_endpoint\":\"https://<host>/<relative path>/gat\",\n   ...",
            "title": "OAuth2 Grants"
        },
        {
            "location": "/admin-guide/oauth2/#client-credentials-grant",
            "text": "The Client Credentials Grant allows resource owner to use password\ncredentials (i.e. username and password) as an authorization grant to\nobtain an access token. The credentials should only be used when there\nis a high degree of trust between the resource owner and the client\n(e.g. its device operating system or a highly privileged application),\nand when other authorization grant types are not available (such as an\nauthorization code).  Even though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.  The flow is illustrated below:   The steps of the flow are:    The application requests an access token from the authorization server, authenticating the request with its client credentials.    If the client credentials are successfully authenticated, an access token is returned to the client.",
            "title": "Client Credentials Grant"
        },
        {
            "location": "/admin-guide/oauth2/#when-should-the-client-credentials-flow-be-used",
            "text": "The Client Credentials flow should be used when the resources of or any\napplication/service are stored externally in cloud storages such as\nGoogle Storage or Amazon S3 which can be accessed using API. In this\ncase the application needs to read and update these resources, but\nacting on behalf of the app itself rather than any individual user.\nThe application can ask the OAuth authorization server for an access\ntoken directly, without the involvement of any end user.",
            "title": "When Should the Client Credentials Flow Be Used?"
        },
        {
            "location": "/admin-guide/oauth2/#example-flow",
            "text": "The following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Request\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execClientCredentialsGrant(scope, clientId, clientSecret);\n\nint status response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken();\nTokenType tokenType response.getTokenType(); // bearer  The message sent to the authorization server is:   Request   POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&scope=storage  If the client credentials are successfully authenticated, an access token is returned to the client.   Response   HTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"c769d7ff-c476-42ab-b531-fe2f60b2f5cc\",\"token_type\":\"bearer\",\"expires_in\":3600}",
            "title": "Example Flow"
        },
        {
            "location": "/admin-guide/oauth2/#resource-owner-password-credentials-grant",
            "text": "The resource owner password credentials (i.e. username and password) can\nbe used directly as an authorization grant to obtain an access token.\nThe credentials should only be used when there is a high degree of trust\nbetween the resource owner and the client (e.g. its device operating\nsystem or a highly privileged application), and when other authorization\ngrant types are not available (such as an authorization code).  Even though this grant type requires direct client access to the\nresource owner credentials, the resource owner credentials are used for\na single request and are exchanged for an access token. This grant type\ncan eliminate the need for the client to store the resource owner\ncredentials for future use, by exchanging the credentials with a\nlong-lived access token or refresh token.  The flow is illustrated below:   The steps of the flow are:    User presents their credentials to the application in addition to a username and password.    If the client credentials are successfully authenticated, an access token is returned to the client",
            "title": "Resource Owner Password Credentials Grant"
        },
        {
            "location": "/admin-guide/oauth2/#when-should-the-resource-owner-password-flow-be-used",
            "text": "This flow should be used sparingly because the resource owner\u2019s password\nis exposed to the application. It is recommended only for first-party\n\u201cofficial\u201d applications released by the API provider, and not opened up\nto wider third-party developer communities. If a user is asked to type\ntheir password into \u201cofficial\u201d applications, they may become accustomed\nto doing so and become vulnerable to phishing attempts by other apps. In\norder to mitigate this concern, developers and IT administrators should\nclearly educate their users how they should determine which apps are\n\u201cofficial\u201d and which are not.",
            "title": "When Should the Resource Owner Password Flow Be Used?"
        },
        {
            "location": "/admin-guide/oauth2/#security-properties",
            "text": "There are some security benefits to using this flow against\nauthenticating API calls with a username and password (via HTTP Basic\naccess authentication or similar) although the application has access to\nthe resource owner's password. With Basic authentication, an application\nneeds to have continuous access to the user\u2019s password in order to make\nAPI calls. If the user wants to revoke the access of the client, he must\nchange the password and re-enter the password in all the applications\nthat are allowed access to the resource.  However, if the OAuth Resource Owner Password flow is used, the\napplication only needs access to the user\u2019s credentials once: on first\nuse when the credentials are exchanged for an access token. This means\nthere\u2019s no requirement for the app to store these credentials within the\napplication or on the device, and revoking access is easy as well.",
            "title": "Security Properties"
        },
        {
            "location": "/admin-guide/oauth2/#user-experience",
            "text": "The user experience for this flow is identical to typical password-based\naccess requests. The application asks the user for their username and\npassword and the user provides the information. The application then\nmakes either a server-side or client-side request to the API provider\u2019s\nauthorization server, without any user-facing interface changes. If the\nAPI provider does not issue a refresh_token and the issued access_token\nis short-lived, the application will likely store the username and\npassword for future authentication attempts. Unfortunately, this defeats\nsome of the benefit of this flow.",
            "title": "User Experience"
        },
        {
            "location": "/admin-guide/oauth2/#example-flow_1",
            "text": "The following is an example showing the messages between the client and\nthe authorization server, also the example shows code fragments using\nthe oxAuth-Client.jar API to interact with the authorization server.  // Parameters\nString tokenUrl = \"https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token\";\n\n// Call the service\nTokenClient tokenClient = new TokenClient(tokenUrl);\nTokenResponse response = tokenClient.execResourceOwnerPasswordCredentialsGrant(username, password, scope, clientId, clientSecret);\n\n// Handle response\nint status = response.getStatus(); // 200 if succeed\nString accessToken = response.getAccessToken(); // 26d55e4b-6c61-40ea-9763-3282f5db0f0e\nTokenType tokenType = response.getTokenType(); // Enumeration: bearer\nString refreshToken = response.getRefreshToken(); // aba91bd9-aa10-4fca-952b-50a9a9afac28   Request   POST /oxauth/seam/resource/restv1/oxauth/token HTTP/1.1\nHost: seed.gluu.org\nAuthorization: Basic QCExMTExITAwMDghRkY4MSEyRDM5OjYyMTNlOWI5LWM0NmQtNDAwOC04YWYxLTAzZjkxOGE4YWRlNA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&scope=openid&username=mike&password=secret   Response   HTTP/1.1 200\nContent-Type: application/json\nCache-Control: no-store, private\nPragma: no-cache\n\n{\"access_token\":\"26d55e4b-6c61-40ea-9763-3282f5db0f0e\",\"token_type\":\"bearer\",\"expires_in\":3599,\"refresh_token\":\"aba91bd9-aa10-4fca-952b-50a9a9afac28\",\"scope\":\"openid\",\"id_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvc2VlZC5nbHV1Lm9yZyIsInVzZXJfaWQiOiJtaWtlIiwiYXVkIjoiQCExMTExITAwMDghRkY4MSEyRDM5IiwiZXhwIjoxMzM5MTk2ODgxMzAzLCJveEludW0iOiJAITExMTEhMDAwMCFENEU3Iiwib3hWYWxpZGF0aW9uVVJJIjoiaHR0cHM6XC9cL3NlZWQuZ2x1dS5vcmdcL294YXV0aFwvc2VhbVwvcmVzb3VyY2VcL3Jlc3R2MVwvb3hhdXRoXC9jaGVja19zZXNzaW9uIiwib3hPcGVuSURDb25uZWN0VmVyc2lvbiI6Im9wZW5pZGNvbm5lY3QtMS4wIn0.SzWfJsmlz62qTRw1lEJZ8PygY9eRupgmsbXLCQwPVDQ\"}",
            "title": "Example Flow"
        },
        {
            "location": "/admin-guide/oauth2/#gluu-oauth2-access-management",
            "text": "[GAT][Gluu Access Token] is used for Gluu OAuth2 Access Management.",
            "title": "Gluu OAuth2 Access Management"
        },
        {
            "location": "/admin-guide/oauth2/#overview",
            "text": "Centralized Access Management needs a profile enabling a client ot obtain a token from the AS by explicitly specifyting the \nrequested scopes.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/oauth2/#gluu-access-token",
            "text": "GAT as plain json #  {\n    \"exp\": 1256953732,\n    \"iat\": 1256912345,\n    \"scopes\" : {\n       \"view\", \"manage\"\n    }\n}  The [GAT][Gluu Access Token] is issued at a new endpoint which is published at  <hostname>/.well-known/uma-configuration  Important:  all requests/response to/from/between RP, RS, AS must contain \"GAT\" HTTP header with \"true\" value. In this way \nAS differentiante calls from normal UMA.  AS Respnse for RP #  POST /gat HTTP/1.1\nHost: as.example.com\nAuthorization: Bearer jwfLG53^sad$#f\nGAT: true\n\n{\n \"scopes\": [\"view\", \"manage\"]\n}  AS Response for RP #  GAT is returned in the  rpt  key as value.  HTTP/1.1 200 OK\nContent-Type: application/json\nGAT: true\n\n{\n  \"rpt\": \"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv\"\n}  RP Request Resource with GAT #  GET /users/alice/album/photo.jpg HTTP/1.1\nAuthorization: Bearer vF9dft4qmT\nHost: photoz.example.com\nGAT: true",
            "title": "Gluu Access Token"
        },
        {
            "location": "/admin-guide/oauth2/#discovery",
            "text": "...\n   \"gat_endpoint\":\"https://<host>/<relative path>/gat\",\n   ...",
            "title": "Discovery"
        },
        {
            "location": "/admin-guide/openid/",
            "text": "Overview\n\n\nJargon (taxonomy)\n\n\nDiscovery\n\n\nAlgorithm\n\n\n\n\n\n\nSession management\n\n\nTesting with oxAuth RP\n\n\nAuthorization Endpoint\n\n\nRequest Authorization and receive the Authorization Code and ID Token\n\n\nRequest Access Token using the Authorization Code\n\n\nRequest new Access Token using the Refresh Token\n\n\n\n\n\n\nUserInfo Endpoint\n\n\nOpenID Connect Session Management\n\n\nEnd Session Endpoint\n\n\nCheck Session iFrame\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverview\n#\n\n\nOpenID Connect\n (\"Connect\") is a standard\nprofile of OAuth2 which defines a protocol to enable a website or mobile\napplication to send a person to a domain for authentication and required\nattributes (e.g. email address, first name, last name, etc.). OpenID Connect\nalso provides some of the plumbing around authentication to automate how\nthis happens. If a person is visiting a website for the first time, the\nprocess that OpenID Connect defines is 100% bootstrapable by the\nwebsite. This is really critical for Internet scalability. To visit\nsomeone's website, or to send someone an email, you do not need to get\nthe system administrators involved. Connect provides the same type of\nscalable infrastructure for authentication and authorization, and promises to define a base level domain\nidentification.\n\n\nJargon (taxonomy)\n#\n\n\nIf you are familiar with SAML, there are many parallels in OpenID\nConnect, but the jargon (or \"taxonomy\") is different. For example,\ninstead of attributes, we have \"user claims\". Instead of Service\nProvider (SP), we have \"client\". Instead of Identity Provider (IdP), it\nis an OpenID Provider (OP).\n\n\nDiscovery\n#\n\n\nThe first thing you want to know about any OAuth2 API is where are the\nendpoints (i.e. what are the uris where you call the APIs).\nOpenID Connect provides a very simple mechanism to accomplish this: \n\nOpenID Connect Discovery\n.\n\n\nIn order for an OpenID Connect Relying Party to utilize OpenID Connect\nservices for an End-User, the RP needs to know where the OpenID Provider is.\nOpenID Connect uses WebFinger \nWebFinger\n\nto locate the OpenID Provider for an End-User.\n\n\nOnce the OpenID Provider has been identified, the configuration information\nfor the OP is retrieved from a well-known location as a JSON document,\nincluding its OAuth 2.0 endpoint locations.\n\n\nIf you want to try a discovery request, you can make the following\nWebFinger request to discover the Issuer location:\n\n\nGET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}\n\n\n\n\nUsing the Issuer location discovered, the OpenID Provider's configuration information can be retrieved.\n\n\nThe RP makes the following request to the Issuer https://\n/.well-known/openid-configuration to obtain its\nConfiguration information:\n\n\nGET /.well-known/openid-configuration HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"issuer\": \"https://idp.gluu.org\",\n    \"authorization_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n    \"token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n    \"userinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n    \"clientinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n    \"check_session_iframe\": \"https://idp.gluu.org/oxauth/opiframe\",\n    \"end_session_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n    \"jwks_uri\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    \"registration_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n    \"validate_token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n    \"federation_metadata_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n    \"federation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n    \"id_generation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/id\",\n    \"introspection_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/introspection\",\n    \"scopes_supported\": [\n        \"clientinfo\",\n        \"email\",\n        \"openid\",\n        \"profile\",\n        \"address\",\n        \"uma_protection\",\n        \"user_name\",\n        \"uma_authorization\",\n        \"mobile_phone\",\n        \"phone\"\n    ],\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"token\",\n        \"token id_token\",\n        \"code token\",\n        \"code token id_token\",\n        \"id_token\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"acr_values_supported\": [\"\"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"],\n    \"auth_level_mapping\": {\"-1\": [[\"internal\"]]},\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"none\",\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"display_values_supported\": [\n        \"page\",\n        \"popup\"\n    ],\n    \"claim_types_supported\": [\"normal\"],\n    \"claims_supported\": [\n        \"birthdate\",\n        \"country\",\n        \"name\",\n        \"email\",\n        \"email_verified\",\n        \"given_name\",\n        \"gender\",\n        \"inum\",\n        \"family_name\",\n        \"updated_at\",\n        \"locale\",\n        \"middle_name\",\n        \"nickname\",\n        \"phone_number_verified\",\n        \"picture\",\n        \"preferred_username\",\n        \"profile\",\n        \"zoneinfo\",\n        \"user_name\",\n        \"website\"\n    ],\n    \"service_documentation\": \"http://gluu.org/docs\",\n    \"claims_locales_supported\": [\"en\"],\n    \"ui_locales_supported\": [\n        \"en\", \"es\"\n    ],\n    \"scope_to_claims_mapping\": [\n        {\"clientinfo\": [\n            \"name\",\n            \"inum\"\n        ]},\n        {\"email\": [\n            \"email_verified\",\n            \"email\"\n        ]},\n        {\"openid\": [\"inum\"]},\n        {\"profile\": [\n            \"name\",\n            \"family_name\",\n            \"given_name\",\n            \"middle_name\",\n            \"nickname\",\n            \"preferred_username\",\n            \"profile\",\n            \"picture\",\n            \"website\",\n            \"gender\",\n            \"birthdate\",\n            \"zoneinfo\",\n            \"locale\",\n            \"updated_at\"\n        ]},\n        {\"address\": [\n            \"formatted\",\n            \"postal_code\",\n            \"street_address\",\n            \"locality\",\n            \"country\",\n            \"region\"\n        ]},\n        {\"uma_protection\": []},\n        {\"user_name\": [\"user_name\"]},\n        {\"uma_authorization\": []},\n        {\"mobile_phone\": [\"phone_mobile_number\"]},\n        {\"phone\": [\n            \"phone_number_verified\",\n            \"phone_number\"\n        ]}\n    ],\n    \"claims_parameter_supported\": true,\n    \"request_parameter_supported\": true,\n    \"request_uri_parameter_supported\": true,\n    \"require_request_uri_registration\": false,\n    \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n    \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\",\n    \"http_logout_supported\": \"true\",\n    \"logout_session_supported\": \"true\"\n}\n\n\n\n\nThe following is an example using the \noxAuth-Client\n lib:\n\n\nString resource = \"acct:mike@idp.gluu.org\";\n\nOpenIdConnectDiscoveryClient openIdConnectDiscoveryClient = new OpenIdConnectDiscoveryClient(resource);\nOpenIdConnectDiscoveryResponse openIdConnectDiscoveryResponse = openIdConnectDiscoveryClient.exec();\n\n.....\n\nOpenIdConfigurationClient client = new OpenIdConfigurationClient(configurationEndpoint);\nOpenIdConfigurationResponse response = client.execOpenIdConfiguration();\n\n\n\n\nSee \norg.xdi.oxauth.ws.rs.ConfigurationRestWebServiceHttpTest\n\n\nAlgorithm\n#\n\n\noxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.\n\n\nNote:\n It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.\n\n\nAvailable Signature Algorithms:\n none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.\n\n\nEncryption, Key Encryption Algorithms:\n RSA1_5, RSA-OAEP, A128KW, A256KW.\n\n\nBlock Encryption Algorithms:\n A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,\n\n\nSession management\n#\n\n\nLogout is a catch-22. There is no perfect answer to logout that\nsatisfies all the requirements of all the domains on the Internet. For\nexample, large OpenID Providers, like Google, need a totally stateless\nimplementation--Google cannot track sessions on the server side for\nevery browser on the Internet. But in smaller domains, server side\nlogout functionality can be a convenient solution to cleaning up\nresources.\n\n\nThe OpenID Connect \nSession\nManagement\n is\nstill marked as draft, and new mechanisms for logout are in the works.\nThe current specification requires JavaScript to detect that the session\nhas been ended in the browser. It works... unless the tab with the\nJavaScript happens to be closed when the logout event happens on another\ntab. Also, inserting JavaScript into every page is not feasible for some\napplications. A new proposal is under discussion where the OpenID\nConnect logout API would return \nIMG\n HTML tags to the browser with the\nlogout callbacks of the clients. This way, the browser could call the\nlogout uris (not the server).\n\n\nThe Gluu Server is very flexible, and supports both server side session\nmanagement, and stateless session management. For server side business\nlogout, the domain admin can use Custom Logout scripts. This can be\nuseful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or\nperhaps in a portal.\n\n\nThe key for logout is to understand the limitations of logout, and to\ntest the use cases that are important to you, so you will not be\nsurprised by the behavior when you put your application into production.\n\n\nTesting with oxAuth RP\n#\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nOr deploy \noxAuth-rp.war\n\n\n\n\nAuthorization Endpoint\n#\n\n\nRequest Authorization and receive the Authorization Code and ID Token\n#\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Authorization Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize)\n\n\nSelect the Response Types: CODE and ID_TOKEN\n\n\nEnter the Client ID (eg: @!EDFB.879F.2DAE.D95A!0001!0442.B31E!0008!A2DA.C10F)\n\n\nSelect the desired scopes: OpenID is mandatory, profile, address,\n    email and phone are optional.\n\n\nEnter a Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam\n\n\nOptionally enter a state value.\n\n\nClick submit.\n\n\n\n\n\n\nRequest Access Token using the Authorization Code\n#\n\n\n\n\nOnce redirected back to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Token Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)\n\n\nSelect the Grant Type: AUTHORIZATION_CODE\n\n\nEnter the Client ID.\n\n\nEnter the Client Secret.\n\n\nEnter the Code received from the previous request\n\n\nEnter the Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam\n\n\nEnter the scopes: OpenID profile address email phone.\n\n\nClick submit.\n\n\n\n\n\n\nRequest new Access Token using the Refresh Token\n#\n\n\n\n\nGo to https://seed.gluu.org/oxauth-rp\n\n\nEnter the Token Endpoint (https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)\n\n\nSelect the Grant Type: REFRESH_TOKEN\n\n\nEnter the Client ID.\n\n\nEnter the Client Secret.\n\n\nEnter the Refresh Token received in a previous request.\n\n\nClick submit.\n\n\n\n\n\n\nUserInfo Endpoint\n#\n\n\n\n\nOpenID Connect Session Management\n#\n\n\nEnd Session Endpoint\n#\n\n\n\n\nCheck Session iFrame\n#",
            "title": "OpenID Connect"
        },
        {
            "location": "/admin-guide/openid/#overview",
            "text": "OpenID Connect  (\"Connect\") is a standard\nprofile of OAuth2 which defines a protocol to enable a website or mobile\napplication to send a person to a domain for authentication and required\nattributes (e.g. email address, first name, last name, etc.). OpenID Connect\nalso provides some of the plumbing around authentication to automate how\nthis happens. If a person is visiting a website for the first time, the\nprocess that OpenID Connect defines is 100% bootstrapable by the\nwebsite. This is really critical for Internet scalability. To visit\nsomeone's website, or to send someone an email, you do not need to get\nthe system administrators involved. Connect provides the same type of\nscalable infrastructure for authentication and authorization, and promises to define a base level domain\nidentification.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/openid/#jargon-taxonomy",
            "text": "If you are familiar with SAML, there are many parallels in OpenID\nConnect, but the jargon (or \"taxonomy\") is different. For example,\ninstead of attributes, we have \"user claims\". Instead of Service\nProvider (SP), we have \"client\". Instead of Identity Provider (IdP), it\nis an OpenID Provider (OP).",
            "title": "Jargon (taxonomy)"
        },
        {
            "location": "/admin-guide/openid/#discovery",
            "text": "The first thing you want to know about any OAuth2 API is where are the\nendpoints (i.e. what are the uris where you call the APIs).\nOpenID Connect provides a very simple mechanism to accomplish this:  OpenID Connect Discovery .  In order for an OpenID Connect Relying Party to utilize OpenID Connect\nservices for an End-User, the RP needs to know where the OpenID Provider is.\nOpenID Connect uses WebFinger  WebFinger \nto locate the OpenID Provider for an End-User.  Once the OpenID Provider has been identified, the configuration information\nfor the OP is retrieved from a well-known location as a JSON document,\nincluding its OAuth 2.0 endpoint locations.  If you want to try a discovery request, you can make the following\nWebFinger request to discover the Issuer location:  GET /.well-known/webfinger?resource=https%3A%2F%2Fidp.gluu.org&rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/jrd+json\n\n{\n    \"subject\": \"https://idp.gluu.org\",\n    \"links\": [{\n        \"rel\": \"http://openid.net/specs/connect/1.0/issuer\",\n        \"href\": \"https://idp.gluu.org\"\n    }]\n}  Using the Issuer location discovered, the OpenID Provider's configuration information can be retrieved.  The RP makes the following request to the Issuer https:// /.well-known/openid-configuration to obtain its\nConfiguration information:  GET /.well-known/openid-configuration HTTP/1.1\nHost: idp.gluu.org\n\nHTTP/1.1 200\nContent-Type: application/json\n\n{\n    \"issuer\": \"https://idp.gluu.org\",\n    \"authorization_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize\",\n    \"token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/token\",\n    \"userinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/userinfo\",\n    \"clientinfo_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/clientinfo\",\n    \"check_session_iframe\": \"https://idp.gluu.org/oxauth/opiframe\",\n    \"end_session_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/end_session\",\n    \"jwks_uri\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/jwks\",\n    \"registration_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/register\",\n    \"validate_token_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/validate\",\n    \"federation_metadata_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federationmetadata\",\n    \"federation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/oxauth/federation\",\n    \"id_generation_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/id\",\n    \"introspection_endpoint\": \"https://idp.gluu.org/oxauth/seam/resource/restv1/introspection\",\n    \"scopes_supported\": [\n        \"clientinfo\",\n        \"email\",\n        \"openid\",\n        \"profile\",\n        \"address\",\n        \"uma_protection\",\n        \"user_name\",\n        \"uma_authorization\",\n        \"mobile_phone\",\n        \"phone\"\n    ],\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"token\",\n        \"token id_token\",\n        \"code token\",\n        \"code token id_token\",\n        \"id_token\"\n    ],\n    \"grant_types_supported\": [\n        \"authorization_code\",\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"acr_values_supported\": [\"\"u2f\", \"duo\", \"basic\", \"mt\", \"oxpush2\", \"gplus\", \"internal\"],\n    \"auth_level_mapping\": {\"-1\": [[\"internal\"]]},\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"id_token_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"none\",\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"RSA1_5\", \"RSA-OAEP\",\n        \"A128KW\", \"A256KW\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A128CBC+HS256\", \"A256CBC+HS512\",\n        \"A128GCM\", \"A256GCM\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_basic\",\n        \"client_secret_post\",\n        \"client_secret_jwt\",\n        \"private_key_jwt\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"HS256\", \"HS384\", \"HS512\",\n        \"RS256\", \"RS384\", \"RS512\",\n        \"ES256\", \"ES384\", \"ES512\"\n    ],\n    \"display_values_supported\": [\n        \"page\",\n        \"popup\"\n    ],\n    \"claim_types_supported\": [\"normal\"],\n    \"claims_supported\": [\n        \"birthdate\",\n        \"country\",\n        \"name\",\n        \"email\",\n        \"email_verified\",\n        \"given_name\",\n        \"gender\",\n        \"inum\",\n        \"family_name\",\n        \"updated_at\",\n        \"locale\",\n        \"middle_name\",\n        \"nickname\",\n        \"phone_number_verified\",\n        \"picture\",\n        \"preferred_username\",\n        \"profile\",\n        \"zoneinfo\",\n        \"user_name\",\n        \"website\"\n    ],\n    \"service_documentation\": \"http://gluu.org/docs\",\n    \"claims_locales_supported\": [\"en\"],\n    \"ui_locales_supported\": [\n        \"en\", \"es\"\n    ],\n    \"scope_to_claims_mapping\": [\n        {\"clientinfo\": [\n            \"name\",\n            \"inum\"\n        ]},\n        {\"email\": [\n            \"email_verified\",\n            \"email\"\n        ]},\n        {\"openid\": [\"inum\"]},\n        {\"profile\": [\n            \"name\",\n            \"family_name\",\n            \"given_name\",\n            \"middle_name\",\n            \"nickname\",\n            \"preferred_username\",\n            \"profile\",\n            \"picture\",\n            \"website\",\n            \"gender\",\n            \"birthdate\",\n            \"zoneinfo\",\n            \"locale\",\n            \"updated_at\"\n        ]},\n        {\"address\": [\n            \"formatted\",\n            \"postal_code\",\n            \"street_address\",\n            \"locality\",\n            \"country\",\n            \"region\"\n        ]},\n        {\"uma_protection\": []},\n        {\"user_name\": [\"user_name\"]},\n        {\"uma_authorization\": []},\n        {\"mobile_phone\": [\"phone_mobile_number\"]},\n        {\"phone\": [\n            \"phone_number_verified\",\n            \"phone_number\"\n        ]}\n    ],\n    \"claims_parameter_supported\": true,\n    \"request_parameter_supported\": true,\n    \"request_uri_parameter_supported\": true,\n    \"require_request_uri_registration\": false,\n    \"op_policy_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:policy\",\n    \"op_tos_uri\": \"http://ox.gluu.org/doku.php?id=oxauth:tos\",\n    \"http_logout_supported\": \"true\",\n    \"logout_session_supported\": \"true\"\n}  The following is an example using the  oxAuth-Client  lib:  String resource = \"acct:mike@idp.gluu.org\";\n\nOpenIdConnectDiscoveryClient openIdConnectDiscoveryClient = new OpenIdConnectDiscoveryClient(resource);\nOpenIdConnectDiscoveryResponse openIdConnectDiscoveryResponse = openIdConnectDiscoveryClient.exec();\n\n.....\n\nOpenIdConfigurationClient client = new OpenIdConfigurationClient(configurationEndpoint);\nOpenIdConfigurationResponse response = client.execOpenIdConfiguration();  See  org.xdi.oxauth.ws.rs.ConfigurationRestWebServiceHttpTest  Algorithm #  oxAuth supports various types of signature and encryption\nalgorithms for authorizing request parameter passing, ID token signature\nand encryption, signing return responses, Encrypt User Info Endpoints\netc.  Note:  It is a good practice to implement ID Token Signatures with the RSA\nSHA-256 algorithm (algorithm value RS256). Additionally, oxAuth also\nsupports other algorithms that are listed below.  Available Signature Algorithms:  none, HS256, HS384, HS512, RS256, RS384, RS512, ES256, ES384, ES512.  Encryption, Key Encryption Algorithms:  RSA1_5, RSA-OAEP, A128KW, A256KW.  Block Encryption Algorithms:  A128CBC+HS256, A256CBC+HS612, A128GCM, A256GCM,",
            "title": "Discovery"
        },
        {
            "location": "/admin-guide/openid/#session-management",
            "text": "Logout is a catch-22. There is no perfect answer to logout that\nsatisfies all the requirements of all the domains on the Internet. For\nexample, large OpenID Providers, like Google, need a totally stateless\nimplementation--Google cannot track sessions on the server side for\nevery browser on the Internet. But in smaller domains, server side\nlogout functionality can be a convenient solution to cleaning up\nresources.  The OpenID Connect  Session\nManagement  is\nstill marked as draft, and new mechanisms for logout are in the works.\nThe current specification requires JavaScript to detect that the session\nhas been ended in the browser. It works... unless the tab with the\nJavaScript happens to be closed when the logout event happens on another\ntab. Also, inserting JavaScript into every page is not feasible for some\napplications. A new proposal is under discussion where the OpenID\nConnect logout API would return  IMG  HTML tags to the browser with the\nlogout callbacks of the clients. This way, the browser could call the\nlogout uris (not the server).  The Gluu Server is very flexible, and supports both server side session\nmanagement, and stateless session management. For server side business\nlogout, the domain admin can use Custom Logout scripts. This can be\nuseful to clean up sessions in a legacy SSO system (i.e. SiteMinder), or\nperhaps in a portal.  The key for logout is to understand the limitations of logout, and to\ntest the use cases that are important to you, so you will not be\nsurprised by the behavior when you put your application into production.",
            "title": "Session management"
        },
        {
            "location": "/admin-guide/openid/#testing-with-oxauth-rp",
            "text": "Go to https://seed.gluu.org/oxauth-rp  Or deploy  oxAuth-rp.war   Authorization Endpoint #  Request Authorization and receive the Authorization Code and ID Token #   Go to https://seed.gluu.org/oxauth-rp  Enter the Authorization Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/authorize)  Select the Response Types: CODE and ID_TOKEN  Enter the Client ID (eg: @!EDFB.879F.2DAE.D95A!0001!0442.B31E!0008!A2DA.C10F)  Select the desired scopes: OpenID is mandatory, profile, address,\n    email and phone are optional.  Enter a Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam  Optionally enter a state value.  Click submit.    Request Access Token using the Authorization Code #   Once redirected back to https://seed.gluu.org/oxauth-rp  Enter the Token Endpoint (eg: https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)  Select the Grant Type: AUTHORIZATION_CODE  Enter the Client ID.  Enter the Client Secret.  Enter the Code received from the previous request  Enter the Redirect uri, e.g. https://seed.gluu.org/oxauth-rp/home.seam  Enter the scopes: OpenID profile address email phone.  Click submit.    Request new Access Token using the Refresh Token #   Go to https://seed.gluu.org/oxauth-rp  Enter the Token Endpoint (https://seed.gluu.org/oxauth/seam/resource/restv1/oxauth/token)  Select the Grant Type: REFRESH_TOKEN  Enter the Client ID.  Enter the Client Secret.  Enter the Refresh Token received in a previous request.  Click submit.    UserInfo Endpoint #   OpenID Connect Session Management #  End Session Endpoint #   Check Session iFrame #",
            "title": "Testing with oxAuth RP"
        },
        {
            "location": "/admin-guide/uma/",
            "text": "This section describes the adminisration of UMA in Gluu Server CE. The UMA administration is accessible from the oxTrust administrator interface.\n\n\n\n\n6.1 Resource Registration\n#\n\n\nThe resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:\n\n\n\n\nname\n\n\nscopes\n\n\ntype\n\n\nicon_uri\n\n\n\n\nThe resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:\n\n\n{\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}\n\n\n\n\n\n\nNote\n\n\nResource JSON may contain custom properties.\n\n\n\n\n\n\nThe search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the \nAdd Resource Set\n button. The following screenshot shows the page that will appear up on clicking the add resource button.\n\n\n\n\nThe properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.\n\n\n\n\n\n\n6.2 Scopes\n#\n\n\nThe scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:\n\n\n\n\nname\n\n\nicon_uri\n\n\n\n\nAn example  of the scope JSON is given below:\n\n\n{\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}\n\n\n\n\n\n\nNote\n\n\nScope JSON may contain custom properties.\n\n\n\n\nThere are three (3) types of scopes in UMA:\n\n\n\n\ninternal\n: the scope is hosted within oxAuth in Gluu Server CE\n\n\nexternal\n: the scope is hosted in a different server\n\n\nexternal_auto\n: the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration\n\n\n\n\nThere is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format\n\n\nUMA URL=uma_scopes_endpoint+\"/\"+oxId;\n\n\n\n\nThe following is an example of an UMA URL:\n\n\nhttps://gluu.org/uma/scopes/view\n\n\n\n\n\n\nNote\n\n\nThe scope endpoint has to be present in UMA configuration to make it discoverable.\n\n\n\n\nThe \nldif\n for both external and internal scope is given below:\n\n\nExternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view\n\n\n\n\nInternal sample ldif\n\n\ndn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png\n\n\n\n\n6.2.1 Add Scope\n#\n\n\nThis section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the \nScopes\n page under \nUMA\n from the oxTrust menu.\n\n\n\n\nThe search bar can be used to look for available scopes. New scopes are added by clicking on the \nAdd Scope Description\n button which will bring up the interface shown below.\n\n\n\n\nAdditionally there is an option to add authorization policy with the new scope.\n\n\n6.3 UMA Policies\n#\n\n\nUMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:\n\n\n\n\nscopes: policy protects resources by scopes\n\n\nauthorization script: script that is evaluated in order to grant/deny access\n\n\nname: a human readable name to the UMA policy\n\n\n\n\nThe following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed from the Configuration Menu.\n\n\n\n\n\n\n6.3.1 UMA Policy Algorithm\n#\n\n\nThe UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.\n\n\n\n\n\n\nUMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn \ntrue\n in order to authorize access during RPT authorization.\n\n\n\n\n\n\nMultiple policies can protect a single scope. In such a case, all the policies must retun \ntrue\n to authorize access else aceess will be denied.",
            "title": "UMA"
        },
        {
            "location": "/admin-guide/uma/#61-resource-registration",
            "text": "The resources protected by UMA must be registered in oxTrust. The following propterties describe a resource:   name  scopes  type  icon_uri   The resource type can be a string, URI or any other supported value type supported by Gluu Server CE. The properties shown above are not concrete, and it is possible that a resource may contain custom properties. An example of the resource JSON is given beow:  {\n\"name\":\"scim_access\",\n\"icon_uri\":\"https:\\/\\/centos.gluu.info\\/identity\\/uma\\/scope\\/file\\/scim_access\"\n}   Note  Resource JSON may contain custom properties.    The search bar can be used to search for any existing resource within Gluu Server. New resoruces can be added by clicking on the  Add Resource Set  button. The following screenshot shows the page that will appear up on clicking the add resource button.   The properties of a resource is visible in this page. There are two additional buttons that allows the administrator to add specific resource or scope as well. By default, Gluu Server is shipped with SCIM resources protected by UMA.",
            "title": "6.1 Resource Registration"
        },
        {
            "location": "/admin-guide/uma/#62-scopes",
            "text": "The scopes in UMA are bount to resource sets and used by policies to check whether the specified user has access to the resource. The scopes are described in JSON and has the following properties:   name  icon_uri   An example  of the scope JSON is given below:  {\n  \"name\": \"Add photo\",\n  \"icon_uri\": \"http://www.gluu.org/icons/add_photo_scope.png\"\n}   Note  Scope JSON may contain custom properties.   There are three (3) types of scopes in UMA:   internal : the scope is hosted within oxAuth in Gluu Server CE  external : the scope is hosted in a different server  external_auto : the scope is hosted in a different server, but it is added to Gluu Server CE during the resource registration   There is no URI for an internal scope because it sits within oxAuth in the Gluu Server. The UMA URL is represented in the format  UMA URL=uma_scopes_endpoint+\"/\"+oxId;  The following is an example of an UMA URL:  https://gluu.org/uma/scopes/view   Note  The scope endpoint has to be present in UMA configuration to make it discoverable.   The  ldif  for both external and internal scope is given below:  External sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: external\noxUrl: http://photoz.example.com/dev/scopes/view  Internal sample ldif  dn: inum=@!1111!8990!BF80,ou=scopes,ou=uma,o=@!1111,o=gluu\ndisplayName: View\ninum: @!1111!8990!BF80\nobjectClass: oxAuthUmaScopeDescription\nobjectClass: top\noxType: internal\noxId: View\noxIconUrl: http://seed.gluu.org/uma/icons/view_scope.png  6.2.1 Add Scope #  This section defines the process of defining UMA scopes from oxTrust. The scopes are accessed from the  Scopes  page under  UMA  from the oxTrust menu.   The search bar can be used to look for available scopes. New scopes are added by clicking on the  Add Scope Description  button which will bring up the interface shown below.   Additionally there is an option to add authorization policy with the new scope.",
            "title": "6.2 Scopes"
        },
        {
            "location": "/admin-guide/uma/#63-uma-policies",
            "text": "UMA policies protect UMA Resources via scopes. Gluu Server evaluates all policies, identified by scopes, to grant access to resources. There are three (3) main properties of a policy:   scopes: policy protects resources by scopes  authorization script: script that is evaluated in order to grant/deny access  name: a human readable name to the UMA policy   The following section outlines how to define UMA policies from the Custom Script menu. The Custom Script page is accessed from the Configuration Menu.    6.3.1 UMA Policy Algorithm #  The UMA Policy alrorithm has two rules that are followed. These rules must be followed while writing UMA policy using the custom script feature of Gluu Server.    UMA Policy protects resources based on scopes. If a scope is protected by a policy, then the policy script must reutrn  true  in order to authorize access during RPT authorization.    Multiple policies can protect a single scope. In such a case, all the policies must retun  true  to authorize access else aceess will be denied.",
            "title": "6.3 UMA Policies"
        },
        {
            "location": "/admin-guide/attribute/",
            "text": "Attribute Management\n\n\nSAML Attributes\n\n\noxTrust Attribute Management\n\n\n\n\n\n\nOpenID Scopes\n\n\nAdd Scope\n\n\n\n\n\n\nCustom NameID\n\n\nDefining NameID\n\n\n\n\n\n\nManual Schema Management\n\n\n\n\n\n\n\n\n\n\nAttribute Management\n#\n\n\nSAML Attributes\n#\n\n\nLDAP attributes, SAML attributes, OpenID Connect user claims--whatever you call them--many organizations have business-specific information about people that needs to be shared with applications. For simplicity, this article will refer to them as \"attributes.\" Existing standard schemas like the LDAP \ninetOrgPerson\n standard, or the \nOpenID Connect user claims\n define attributes like first name, last name and email address. Where possible, we recommend you use standard attributes that are already defined in the Gluu Server. But what if there is an attribute that is just not in any standard schema? This article will explain what you need to do to configure the Gluu Server to\nsupport your new attributes, and give you some advice along the way with regard to best practices. We will use fictional Company Acme Inc., which has requirements for \"acmeCustNumber\" and \"acmeStateLicenseNumber\".\n\n\noxTrust Attribute Management\n#\n\n\nAdditional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the \nAdd Attribute\n button. Then, the following screen will\nappear:\n\n\n\n\n\n\n\n\n\n\nName:\n This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.\n\n\n\n\n\n\nSAML1 URI:\n This field contains the SAML1 uri for the custom attribute.\n\n\n\n\n\n\nSAML2 URI:\n This field contains the SAML2 uri for the custom attribute.\n\n\n\n\n\n\nDisplay Name:\n This display name can be anything that is human readable.\n\n\n\n\n\n\nType:\n The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:\n\n\n\n\nText\n\n\nNumeric\n\n\nPhoto\n\n\nDate\n\n\n\n\n\n\n\n\nEdit Type:\n This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).\n\n\n\n\n\n\nView Type:\n This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.\n\n\n\n\n\n\nPrivacy Level:\n Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.\n\n\n\n\n\n\nMultivalued:\n Please select multivalue in this field if the attribute\n  contains more than one value.\n\n\n\n\n\n\nSCIM Attributes:\n If the attribute is a part of SCIM architecture select true.\n\n\n\n\n\n\nDescription:\n This contains a few words to describe the attribute.\n\n\n\n\n\n\nStatus:\n The status, when selected active, will release and publish\n  the attribute in IdP.\n\n\n\n\n\n\nWhere are these attributes stored? During installation, the Gluu Server creates\na default objectclass specific for your organization. If you view\n\n/opt/opendj/config/schema/100-user.ldif\n, you'll see an objectclass called\nsomething like \nox-43A94B45403D3B0A00010D87EAF2\n (where this number is your \norganization identifier.) Any objects you add through the UI will be added to this\nobjectclass. In the JSON configuration for oxTrust, you'll see two properties: \n\npersonObjectClassTypes\n and \npersonCustomObjectClass\n where this objectclass is\nreferenced. Also, you'll see the display name for this objectclass referenced in \nthe \npersonObjectClassDisplayNames\n property (default value is \"custom\"). \n\n\nOpenID Scopes\n#\n\n\n\n\nThe SAML counterpart to scopes is attributes which is released to service providers, or in this case Relying Party. \nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims. \n\n\n\n\nAdd Scope\n#\n\n\nThe Gluu Server administrator can easily add more scopes in the GUI.\n\n\n\n\nClick \nAdd Scope\n and you will be presented with the following screen:\n\n\n\n\nThe following fields are available for input.\n\n\n\n\nDisplay Name\n\n\nDescription\n\n\nScope Type\n\n\nDefault Scope\n\n\nClaims\n\n\n\n\nDefault Scope:\n When a client uses dynamic\nclient registration, the OpenID Connect specification says that the\n\nopenid\n scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to \ntrue\n for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.\n\n\nClaims:\n The administrator can add claims in the scope by clicking on \nAdd Claim\n button. The following screen shall appear on clicking the button.\n\n\n\nCustom NameID\n#\n\n\nGluu Server comes with the \ntransientID\n attribute which is the default \nNameID\n.\nIf there are other \nNameID\n requirements, it is possible to create them as well.\nThe custom attribute must be created in oxTrust first before defining it as the \nNameID\n.\nPlease see the \noxTrust custom attribute guide\n to create the custom attribute in oxTrust.\n\n\nDefining NameID\n#\n\n\nThe template file for \nNameID\n definitions are located in the \nattribute-resolver.xml.vm\n file under \n/opt/tomcat/conf/shibboleth2/\n.\nThe example below adds \ntestcustomattribute\n as \nNameID\n based on UID attribute. The following are put into the \nattribute-resolver.xml.vm\n file.\n\n\n\n\nAdd declaration for the new attribute\n\n\n\n\nif( ! ($attribute.name.equals('transientId') or $attribute.name.equals('testcustomattribute') ) )\n\n\n\n\n\n\nAdd definition for the new attribute\n\n\n\n\n <resolver:AttributeDefinition id=\"testcustomattribute\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"uid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition> \n\n\n\n\n\n\nRestart tomcat service\n\n\n\n\nManual Schema Management\n#\n\n\nLet's say you have a lot of attributes to register. Or you want a more\nrepeatable process for adding schema to the Gluu Server. This next section\nwill document a slightly more geeky way to do automate the process.\n\n\nFirst of all, you should create a custom schema file, which you will copy \nto \n/opt/opendj/config/schema\n each time you configure a new Gluu Server.\nUse your organization name, for example something like 102-acme.ldif. \nFor more information about creating custom schema in OpenDJ, see the \n[ForgeRock OpenDJ Admin Guide]\n(https://backstage.forgerock.com/#!/docs/opendj/2.6/admin-guide/chap-schema). \nYou should consider prefixing the name of your attributes and objectclasses\nwith your organization. For example, instead of using \nspamId\n use \nacmeSpamId\n.\nRestart your LDAP server to make sure the schema is correct. If it's not, the\nOpenDJ server will not start.\n\n\nNow you have the objectclass and attributes in OpenDJ, but the Gluu Server\nstill does not know about them. You're going to have to \"register\" these \nattributes. Each attribute that you want to make available must have a \ncorresponding LDAP entry under \nou=attributes,o=<org-inum>,o=gluu\n. If \nyou browse your LDAP server after performing a Gluu Server base installation, \nyou will see that many commonly used attributes are already there. When an \nLDAP entry exists for your attribute, it is considered to be \"registered\". \nNote in this example, we are using @!1111 as the organization id, which will\nbe much longer in a real installation.\n\n\nThere are two ways you can register an attribute. If you are an LDAP\ngeek, you can just create an LDIF file with the correct information, and\nload it in the LDAP server that is storing your configuration. If you\nwant to quickly spool up new Gluu Servers, this is probably the quickest\nway to handle it.\n\n\ndn: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\nobjectClass: top\nobjectClass: gluuAttribute\ninum: @!1111!0005!2B29\ndescription: How a person would want their name to be presented in writing.\ndisplayName: Display Name\nurn: urn:mace:dir:attribute-def:displayName\ngluuAttributeName: displayName\ngluuAttributeOrigin: gluuPerson\ngluuAttributeType: string\ngluuAttributeEditType: user\ngluuAttributeEditType: admin\ngluuAttributeViewType: user\ngluuAttributeViewType: admin\ngluuStatus: active\n\n\n\nA few things to note: \n\n\n\n\nFor the \ninum\n, after \n0005!\n use a unique identifier--normally a four digit hex number.\n\n\nIf you are using SAML, you will need to make sure that each attribute has a unique \nurn\n.\n  If you don't like \nurn\n format, you can use a dns style name here. It supposed to be globally unique. \n\n\nMake sure \ngluuStatus\n is active\n\n\nSet the appropriate description and displayName if possible.\n\n\n\n\nOnce you have this ldif file, you should make sure you use \nldapmodify\n to load it after the during\nyour Gluu Server installation process. \n\n\nIf you also want to automate loading your custom OpenID scopes, just remember that these\nscopes reference the DN of the attributes. For example: \n\n\ndn: inum=@!1111!0009!341A,ou=scopes,o=@!1111,o=gluu\nobjectClass: oxAuthCustomScope\nobjectClass: top\ndefaultScope: false\ndescription: myScope\ndisplayName: myScope\ninum: @!43A9.4B45.403D.3B0A!0001!0D87.EAF2!0009!341A\noxAuthClaim: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\noxAuthClaim: inum=@!1111!0005!29DA,ou=attributes,o=@!1111,o=gluu\n\n\n\nSo you may want to also create an ldif file for each scope, and also load this at installation time.",
            "title": "Attribute Management"
        },
        {
            "location": "/admin-guide/attribute/#attribute-management",
            "text": "",
            "title": "Attribute Management"
        },
        {
            "location": "/admin-guide/attribute/#saml-attributes",
            "text": "LDAP attributes, SAML attributes, OpenID Connect user claims--whatever you call them--many organizations have business-specific information about people that needs to be shared with applications. For simplicity, this article will refer to them as \"attributes.\" Existing standard schemas like the LDAP  inetOrgPerson  standard, or the  OpenID Connect user claims  define attributes like first name, last name and email address. Where possible, we recommend you use standard attributes that are already defined in the Gluu Server. But what if there is an attribute that is just not in any standard schema? This article will explain what you need to do to configure the Gluu Server to\nsupport your new attributes, and give you some advice along the way with regard to best practices. We will use fictional Company Acme Inc., which has requirements for \"acmeCustNumber\" and \"acmeStateLicenseNumber\".  oxTrust Attribute Management #  Additional attributes can be added from the Gluu Server GUI, oxTrust, by\nclicking the  Add Attribute  button. Then, the following screen will\nappear:      Name:  This field defines the name of the custom attribute which must\n  be unique in the Gluu Server LDAP tree.    SAML1 URI:  This field contains the SAML1 uri for the custom attribute.    SAML2 URI:  This field contains the SAML2 uri for the custom attribute.    Display Name:  This display name can be anything that is human readable.    Type:  The attribute type should be selected from the drop-down menu.\n  There are four attribute types supported by Gluu:   Text  Numeric  Photo  Date     Edit Type:  This field controls which type of an user is allowed to edit\n  corresponding attribute at his/her \"Profile\" page of the web UI (when feature\n\"User can edit own profile\" is enabled).    View Type:  This field controls which type of an user is allowed to view\n  corresponding attribute at his/her \"Profile\" page of the web UI.    Privacy Level:  Please select the desired privacy level from the\n  drop-down menu. The privacy level has a specific range of 1 to 5.    Multivalued:  Please select multivalue in this field if the attribute\n  contains more than one value.    SCIM Attributes:  If the attribute is a part of SCIM architecture select true.    Description:  This contains a few words to describe the attribute.    Status:  The status, when selected active, will release and publish\n  the attribute in IdP.    Where are these attributes stored? During installation, the Gluu Server creates\na default objectclass specific for your organization. If you view /opt/opendj/config/schema/100-user.ldif , you'll see an objectclass called\nsomething like  ox-43A94B45403D3B0A00010D87EAF2  (where this number is your \norganization identifier.) Any objects you add through the UI will be added to this\nobjectclass. In the JSON configuration for oxTrust, you'll see two properties:  personObjectClassTypes  and  personCustomObjectClass  where this objectclass is\nreferenced. Also, you'll see the display name for this objectclass referenced in \nthe  personObjectClassDisplayNames  property (default value is \"custom\").",
            "title": "SAML Attributes"
        },
        {
            "location": "/admin-guide/attribute/#openid-scopes",
            "text": "The SAML counterpart to scopes is attributes which is released to service providers, or in this case Relying Party. \nOpenID Connect uses OAuth2 scopes to \"group\" attributes. For example, we\ncould have a scope called \"address\" that includes the street, city,\nstate, and country user claims.    Add Scope #  The Gluu Server administrator can easily add more scopes in the GUI.   Click  Add Scope  and you will be presented with the following screen:   The following fields are available for input.   Display Name  Description  Scope Type  Default Scope  Claims   Default Scope:  When a client uses dynamic\nclient registration, the OpenID Connect specification says that the openid  scope should always be released, which contains an identifier\nfor that person, normally the username. If you want to release another\nscope automatically, set the Default Scope to  true  for that scope. You\ncan always explicitly release a scope to a certain client later on, but\nthis will require some manual intervention by the domain administrator.  Claims:  The administrator can add claims in the scope by clicking on  Add Claim  button. The following screen shall appear on clicking the button.",
            "title": "OpenID Scopes"
        },
        {
            "location": "/admin-guide/attribute/#custom-nameid",
            "text": "Gluu Server comes with the  transientID  attribute which is the default  NameID .\nIf there are other  NameID  requirements, it is possible to create them as well.\nThe custom attribute must be created in oxTrust first before defining it as the  NameID .\nPlease see the  oxTrust custom attribute guide  to create the custom attribute in oxTrust.  Defining NameID #  The template file for  NameID  definitions are located in the  attribute-resolver.xml.vm  file under  /opt/tomcat/conf/shibboleth2/ .\nThe example below adds  testcustomattribute  as  NameID  based on UID attribute. The following are put into the  attribute-resolver.xml.vm  file.   Add declaration for the new attribute   if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('testcustomattribute') ) )   Add definition for the new attribute    <resolver:AttributeDefinition id=\"testcustomattribute\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"uid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition>    Restart tomcat service",
            "title": "Custom NameID"
        },
        {
            "location": "/admin-guide/attribute/#manual-schema-management",
            "text": "Let's say you have a lot of attributes to register. Or you want a more\nrepeatable process for adding schema to the Gluu Server. This next section\nwill document a slightly more geeky way to do automate the process.  First of all, you should create a custom schema file, which you will copy \nto  /opt/opendj/config/schema  each time you configure a new Gluu Server.\nUse your organization name, for example something like 102-acme.ldif. \nFor more information about creating custom schema in OpenDJ, see the \n[ForgeRock OpenDJ Admin Guide]\n(https://backstage.forgerock.com/#!/docs/opendj/2.6/admin-guide/chap-schema). \nYou should consider prefixing the name of your attributes and objectclasses\nwith your organization. For example, instead of using  spamId  use  acmeSpamId .\nRestart your LDAP server to make sure the schema is correct. If it's not, the\nOpenDJ server will not start.  Now you have the objectclass and attributes in OpenDJ, but the Gluu Server\nstill does not know about them. You're going to have to \"register\" these \nattributes. Each attribute that you want to make available must have a \ncorresponding LDAP entry under  ou=attributes,o=<org-inum>,o=gluu . If \nyou browse your LDAP server after performing a Gluu Server base installation, \nyou will see that many commonly used attributes are already there. When an \nLDAP entry exists for your attribute, it is considered to be \"registered\". \nNote in this example, we are using @!1111 as the organization id, which will\nbe much longer in a real installation.  There are two ways you can register an attribute. If you are an LDAP\ngeek, you can just create an LDIF file with the correct information, and\nload it in the LDAP server that is storing your configuration. If you\nwant to quickly spool up new Gluu Servers, this is probably the quickest\nway to handle it.  dn: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\nobjectClass: top\nobjectClass: gluuAttribute\ninum: @!1111!0005!2B29\ndescription: How a person would want their name to be presented in writing.\ndisplayName: Display Name\nurn: urn:mace:dir:attribute-def:displayName\ngluuAttributeName: displayName\ngluuAttributeOrigin: gluuPerson\ngluuAttributeType: string\ngluuAttributeEditType: user\ngluuAttributeEditType: admin\ngluuAttributeViewType: user\ngluuAttributeViewType: admin\ngluuStatus: active  A few things to note:    For the  inum , after  0005!  use a unique identifier--normally a four digit hex number.  If you are using SAML, you will need to make sure that each attribute has a unique  urn .\n  If you don't like  urn  format, you can use a dns style name here. It supposed to be globally unique.   Make sure  gluuStatus  is active  Set the appropriate description and displayName if possible.   Once you have this ldif file, you should make sure you use  ldapmodify  to load it after the during\nyour Gluu Server installation process.   If you also want to automate loading your custom OpenID scopes, just remember that these\nscopes reference the DN of the attributes. For example:   dn: inum=@!1111!0009!341A,ou=scopes,o=@!1111,o=gluu\nobjectClass: oxAuthCustomScope\nobjectClass: top\ndefaultScope: false\ndescription: myScope\ndisplayName: myScope\ninum: @!43A9.4B45.403D.3B0A!0001!0D87.EAF2!0009!341A\noxAuthClaim: inum=@!1111!0005!2B29,ou=attributes,o=@!1111,o=gluu\noxAuthClaim: inum=@!1111!0005!29DA,ou=attributes,o=@!1111,o=gluu  So you may want to also create an ldif file for each scope, and also load this at installation time.",
            "title": "Manual Schema Management"
        },
        {
            "location": "/admin-guide/scim-uma/",
            "text": "Overview\n\n\nInstallation\n\n\nConfiguration\n\n\nTesting SCIM UMA\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nOverview\n#\n\n\nGluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout \n\nInstallation Guide\n for installation instructions.\n\n\nInstallation\n#\n\n\n\n\nInstall Gluu Server CE following the \nInstallation Guide\n and \nremember to install \nAsimba\n while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand \nthis template\n \nis used. \n\n\n\n\nNote:\n The JWKS for RS and RP clients are put into the \n./output/scim.ldif\n file ready for SCIM configuration.\nThe \nsetup.properties.file\n contains the RS and RP JWKS in Base64 format.\n\n\n\n\n\n\nUse the following command to extract OpenID SCIM RS and RP Client ID\n\ncat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"\n\n\n\n\n\n\nThe UMA SCIM client requires JWKS, so the setup script extracts the JWKS from \nsetup.properties.last\n and puts it into the \n./output/scim-rp.jks\n file.\n\n\n\n\n\n\nNOTE:\n For versions before v2.4.4, the JWKS is put in the \n./output/scim-rp-openid-keys.json\n file instead.\n\n\nConfiguration\n#\n\n\n\n\nEnable SCIM from Organization Configuration\n\n\n\n\n\n\n\n\noxTrust SCIM UMA configuration is automatically updated while running the \nsetup.py\n and the correct values are setup \nin the \noxtrust-config.json\n file.\n\n\n\n\n  \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",\n\n\n\n\n\n\numaClientKeyId\n can be updated with the \nalias\n from \nscim-rp.jks\n file; if it is not updated, the first key from the file is used automatically.\n\n\n\n\nTesting SCIM UMA\n#\n\n\nThe following is a sample code that can be run to test the configured SCIM UMA Gluu CE. It uses \nSCIM-Client\n, a Java library also developed by Gluu intended for client applications.\n\n\n\n\nIf you are using Maven, below is how to add SCIM-Client to your project:\n\n\n\n\n<repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>\n\n\n\n\n\n\n\n\nStarting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.\n\n\n\n\n\n\nAdd your domain's SSL certificate to the JRE's \ncacerts\n certificate key store where your client application will run. There are lots of articles around the Web on how to do this.\n\n\n\n\n\n\nSupply the UMA parameters and run the code. \nNOTE:\n If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with \ntarget\n or \ntmp\n folders possibly cleared beforehand to avoid conflicts.\n\n\n\n\n\n\n\npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}\n\n\n\n\n\nSCIM 2.0 Test Mode (v2.4.4+)\n#\n\n\nStarting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.\n\n\nTo enable test mode, do the following:\n\n\n\n\nLogin to the oxTrust GUI and go to \"Configuration\" -> \"JSON Configuration\" -> \"OxTrust Configuration\", then locate the property \nscimTestMode\n.\n\n\n\n\n\n\n\n\nSet it to \ntrue\n, then click the \"Save Configuration\" button. The Gluu server will then create a long-lived OAuth2 access token with a validity period of one year. Doing this will also switch the authentication scheme from UMA to OAuth2 Access Token.\n\n\nClick again \"JSON Configuration\" -> \"OxTrust Configuration\" in the left navigation pane. This will retrieve the access token and be displayed in the \nscimTestModeAccessToken\n property.\n\n\n\n\n\n\n\n\nIf the access token has expired, just repeat the previous steps to create a new one.\n\n\n\n\nThe access token can then be used as the query string parameter \naccess_token\n in accessing the SCIM 2.0 endpoints, for example:\n\n\n\n\nYou can verify the current authentication scheme of the SCIM 2.0 endpoints by browsing its \nServiceProviderConfig\n:\n\n\n\n\nTo exit test mode, just set \nscimTestMode\n back to \nfalse\n then click the \"Save Configuration\" button. This will switch the authentication scheme from OAuth2 Access Token to UMA. If you try using your access token again, you will now get the \n403 Unauthorized\n error:\n\n\n\n\nNotes\n#\n\n\nUMA is protected with SCIM in Gluu Server Community Edition (CE). The usage of UMA requires HTTP GET and HTTP POST requests. Before testing, the Client making the requests must be added/registered in Gluu CE. The UMA configuration is available @ \nhttps://hostname/.well-known/uma-configuration\n. The request to authorization endpoint must accompanied with  application/json content type. \n\n\nThe example below shows the parameters used in a real-life use case  where the UMA RPT Token is authorized in oxAuth.\n\n\n    public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);\n\n\n\n\nIf the default openID SCIM Client is not used, the \ninum\n must be added to the UMA Authorization Policy Custom Script.",
            "title": "SCIM protected by UMA"
        },
        {
            "location": "/admin-guide/scim-uma/#overview",
            "text": "Gluu Server supports only UMA protection for SCIM endpoints from version 2.4.0 onwards. \nA machine based authorization method is used to obtain the access tokens. SCIM/UMA is built\ninto the Gluu Server CE and does not require any special package or installation. Please checkout  Installation Guide  for installation instructions.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/scim-uma/#installation",
            "text": "Install Gluu Server CE following the  Installation Guide  and \nremember to install  Asimba  while running the setup script.  The setup script prepares the \nconfiguration necessary for SCIM UMA RS endpoints and SCIM UMA RP client \nand  this template  \nis used.    Note:  The JWKS for RS and RP clients are put into the  ./output/scim.ldif  file ready for SCIM configuration.\nThe  setup.properties.file  contains the RS and RP JWKS in Base64 format.    Use the following command to extract OpenID SCIM RS and RP Client ID cat setup.properties.last | grep \"scim_rs_client_id\\|scim_rp_client_id\"    The UMA SCIM client requires JWKS, so the setup script extracts the JWKS from  setup.properties.last  and puts it into the  ./output/scim-rp.jks  file.    NOTE:  For versions before v2.4.4, the JWKS is put in the  ./output/scim-rp-openid-keys.json  file instead.",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/scim-uma/#configuration",
            "text": "Enable SCIM from Organization Configuration     oxTrust SCIM UMA configuration is automatically updated while running the  setup.py  and the correct values are setup \nin the  oxtrust-config.json  file.     \"umaIssuer\":\"https://%(hostname)s\",\n  \"umaClientId\":\"%(scim_rs_client_id)s\",\n  \"umaClientKeyId\":\"\",\n  \"umaResourceId\":\"1447184268430\",\n  \"umaScope\":\"https://%(hostname)s/oxauth/seam/resource/restv1/uma/scopes/scim_access\",\n  \"umaClientKeyStoreFile\":\"%(scim_rs_client_jks_fn)s\",\n  \"umaClientKeyStorePassword\":\"%(scim_rs_client_jks_pass_encoded)s\",   umaClientKeyId  can be updated with the  alias  from  scim-rp.jks  file; if it is not updated, the first key from the file is used automatically.",
            "title": "Configuration"
        },
        {
            "location": "/admin-guide/scim-uma/#testing-scim-uma",
            "text": "The following is a sample code that can be run to test the configured SCIM UMA Gluu CE. It uses  SCIM-Client , a Java library also developed by Gluu intended for client applications.   If you are using Maven, below is how to add SCIM-Client to your project:   <repositories>\n  <repository>\n    <id>gluu</id>\n    <name>Gluu repository</name>\n    <url>http://ox.gluu.org/maven</url>\n  </repository>\n</repositories>\n...\n<dependency>\n  <groupId>gluu.scim.client</groupId>\n  <artifactId>SCIM-Client</artifactId>\n  <version>${scim.client.version}</version>\n</dependency>    Starting with Release v2.4.2, an SCIM-Client must be used on a matching Gluu CE. For example, if you are running CE v2.4.4, you must also use SCIM-Client v2.4.4.    Add your domain's SSL certificate to the JRE's  cacerts  certificate key store where your client application will run. There are lots of articles around the Web on how to do this.    Supply the UMA parameters and run the code.  NOTE:  If you have re-installed Gluu CE, please note that the UMA parameters / JWKS files are also regenerated. You must then rebuild your client code with  target  or  tmp  folders possibly cleared beforehand to avoid conflicts.    \npackage gluu.scim.client.dev.local;\n\nimport gluu.scim.client.ScimClient;\nimport gluu.scim.client.ScimResponse;\nimport gluu.scim2.client.Scim2Client;\n\nimport java.io.IOException;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.xml.bind.JAXBException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.map.JsonMappingException;\n\npublic class TestScimClient {\n\n    private static void testScim1Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final ScimClient scimClient = ScimClient.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        ScimResponse response = scimClient.personSearch(\"uid\", \"admin\", MediaType.APPLICATION_JSON);\n        System.out.println(\"SCIM1 \" + response.getResponseBodyString());\n    }\n\n    private static void testScim2Uma(String domain, String umaMetaDataUrl, String umaAatClientId, String umaAatClientJksPath, String umaAatClientJksPassword, String umaAatClientKeyId) throws IOException, JsonGenerationException, JsonMappingException, JAXBException {\n\n        final Scim2Client scim2Client = Scim2Client.umaInstance(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n\n        String filter = \"userName eq \\\"admin\\\"\";\n        ScimResponse response = scim2Client.searchUsers(filter, 1, 1, \"\", \"\", null);\n        System.out.println(\"SCIM2: \" + response.getResponseBodyString());\n    }\n\n    public static void main(String[] args) throws IOException, JAXBException {\n\n        final String domain = \"https://c67.gluu.info/identity/seam/resource/restv1\";\n        final String umaMetaDataUrl = \"https://c67.gluu.info/.well-known/uma-configuration\";\n        final String umaAatClientId = \"@!A410.188A.95DD.EA5A!0001!3A1E.BAA5!0008!5870.A795\";\n\n        final String umaAatClientJksPath = \"D:\\\\Development\\\\test_data\\\\scim\\\\scim-rp.jks\";\n        final String umaAatClientJksPassword = \"secret\";\n        final String umaAatClientKeyId = \"\";\n\n        testScim1Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n        testScim2Uma(domain, umaMetaDataUrl, umaAatClientId, umaAatClientJksPath, umaAatClientJksPassword, umaAatClientKeyId);\n    }\n}",
            "title": "Testing SCIM UMA"
        },
        {
            "location": "/admin-guide/scim-uma/#scim-20-test-mode-v244",
            "text": "Starting with CE v2.4.4, the \"test mode\" configuration will help developers test the SCIM 2.0 endpoints easier. Instead of UMA + SCIM-Client, in test mode a long-lived OAuth2 access token issued by the Gluu server is used to authorize with the SCIM 2.0 endpoints.  To enable test mode, do the following:   Login to the oxTrust GUI and go to \"Configuration\" -> \"JSON Configuration\" -> \"OxTrust Configuration\", then locate the property  scimTestMode .     Set it to  true , then click the \"Save Configuration\" button. The Gluu server will then create a long-lived OAuth2 access token with a validity period of one year. Doing this will also switch the authentication scheme from UMA to OAuth2 Access Token.  Click again \"JSON Configuration\" -> \"OxTrust Configuration\" in the left navigation pane. This will retrieve the access token and be displayed in the  scimTestModeAccessToken  property.     If the access token has expired, just repeat the previous steps to create a new one.   The access token can then be used as the query string parameter  access_token  in accessing the SCIM 2.0 endpoints, for example:   You can verify the current authentication scheme of the SCIM 2.0 endpoints by browsing its  ServiceProviderConfig :   To exit test mode, just set  scimTestMode  back to  false  then click the \"Save Configuration\" button. This will switch the authentication scheme from OAuth2 Access Token to UMA. If you try using your access token again, you will now get the  403 Unauthorized  error:",
            "title": "SCIM 2.0 Test Mode (v2.4.4+)"
        },
        {
            "location": "/admin-guide/scim-uma/#notes",
            "text": "UMA is protected with SCIM in Gluu Server Community Edition (CE). The usage of UMA requires HTTP GET and HTTP POST requests. Before testing, the Client making the requests must be added/registered in Gluu CE. The UMA configuration is available @  https://hostname/.well-known/uma-configuration . The request to authorization endpoint must accompanied with  application/json content type.   The example below shows the parameters used in a real-life use case  where the UMA RPT Token is authorized in oxAuth.      public RptAuthorizationResponse requestRptPermissionAuthorization(@HeaderParam(\"Authorization\") String authorization,\n            @HeaderParam(\"Host\") String amHost, RptAuthorizationRequest rptAuthorizationRequest);  If the default openID SCIM Client is not used, the  inum  must be added to the UMA Authorization Policy Custom Script.",
            "title": "Notes"
        },
        {
            "location": "/admin-guide/api/",
            "text": "ID Generation API Document\n\n\nPath\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nOpenId Connect Authorization Grant\n\n\nPath\n\n\nrequestAuthorizationGet\n\n\nURL\n\n\nParameters\n\n\nResponse\n\n\nErrors\n\n\n\n\n\n\nrequestAuthorizationPost\n\n\nURL\n\n\nParameters\n\n\nResponse\n\n\nErrors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI for oxAuth Clientinfo\n\n\nPath\n\n\nOverview\n\n\nclientinfoGet\n\n\nclientinfoPost\n\n\n\n\n\n\nAPI Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/end_session\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\n\n\n\n\nAPI Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/register\n\n\nregisterPost\n\n\nURL\n\n\nParameters\n\n\nResponse\n\n\nErrors\n\n\n\n\n\n\nregisterPut\n\n\nURL\n\n\nParameters\n\n\nResponse\n\n\nErrors\n\n\n\n\n\n\nregisterGet\n\n\nURL\n\n\nParameters\n\n\nResponse\n\n\nErrors\n\n\n\n\n\n\n\n\n\n\nAPI Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/token\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nAPI Document\n\n\n/oxauth\n\n\nOverview\n\n\n/oxauth/userinfo\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nSCIM 1.1\n\n\nSCIM 1.1 Specifications\n\n\nSCIM 1.1 Endpoints\n\n\n\n\n\n\nUser Endpoint\n\n\n/seam/resource/restv1/Users\n\n\n\n\n\n\nGroup Endpoint\n\n\n/seam/resource/restv1/Groups\n\n\n\n\n\n\nBulk Operation Endpoint\n\n\n/seam/resource/restv1/scim/v1/Bulk\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nBulkOperation\n\n\nBulkRequest\n\n\nBulkResponse\n\n\nSCIM 2.0\n\n\nSCIM 2.0 Specifications\n\n\nSCIM 2.0 Endpoints\n\n\nSCIM 2.0 Definitions\n\n\n\n\n\n\nUser Endpoint\n\n\nURL\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\nURL\n\n\n\n\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\nPUT\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\nDELETE\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\nURL\n\n\n\n\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nGroup Endpoint\n\n\nURL\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\nURL\n\n\n\n\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\nPUT\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\nDELETE\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nBulk Operation Endpoint\n\n\nURL\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nAddress\n\n\nBulkOperation\n\n\nBulkRequest\n\n\nBulkResponse\n\n\nEmail\n\n\nEntitlement\n\n\nGroup\n\n\nGroupRef\n\n\nIm\n\n\nListResponse\n\n\nMemberRef\n\n\nMeta\n\n\nName\n\n\nPhoneNumber\n\n\nPhoto\n\n\nResource\n\n\nRole\n\n\nType\n\n\nUser\n\n\nX509Certificate\n\n\nScimPersonSearch\n\n\nAPI Document\n\n\n/requester/perm\n\n\nOverview\n\n\n/requester/perm\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nClaimTokenList\n\n\nRptAuthorizationRequest\n\n\nAPI Document\n\n\n/requester/rpt\n\n\nOverview\n\n\n/requester/rpt\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nAPI Document\n\n\n/.well-known/uma-configuration\n\n\nOverview\n\n\n/oxauth/uma-configuration\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nUmaConfiguration\n\n\nAPI Document\n\n\n/host/rsrc_pr\n\n\nOverview\n\n\n/host/rsrc_pr\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nRegisterPermissionRequest\n\n\nAPI Document\n\n\n/host/rsrc/resource_set\n\n\nOverview\n\n\n/host/rsrc/resource_set{rsid}\n\n\n/host/rsrc/resource_set\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\nResourceSet\n\n\nAPI Document\n\n\n/rpt/status\n\n\nOverview\n\n\n/rpt/status\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID Generation API Document\n#\n\n\nThis document outlines the API for ID Generation for Gluu Server.\n\n\nPath\n#\n\n\n/id\n\n\nOverview\n#\n\n\nThe API convention is set as \nid\n followed by \nprefix\n and \ntype\n or \n/id/{prefix}/{type}/\n.\nPlease se the following table to specify what type you are generating. The \nprefix\n is used in the \ninum to make it possible to know the type of object just by looking at the identifier.\n\n\n\n\n\n\n\n\nprefix\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n0000\n\n\npeople\n\n\nPerson object\n\n\n\n\n\n\n0001\n\n\norganization\n\n\nOrganization object\n\n\n\n\n\n\n0002\n\n\nappliance\n\n\nAppliance object\n\n\n\n\n\n\n0003\n\n\ngroup\n\n\nGroup object\n\n\n\n\n\n\n0004\n\n\nserver\n\n\nServer object\n\n\n\n\n\n\n0005\n\n\nattribute\n\n\nUser attribute (claim) object\n\n\n\n\n\n\n0006\n\n\ntRelationship\n\n\nSAML Trust Relationship object\n\n\n\n\n\n\n0008\n\n\nclient\n\n\nOAuth2 Client object\n\n\n\n\n\n\n0009\n\n\nscope\n\n\nOAuth2 Scope Object\n\n\n\n\n\n\n0010\n\n\numa-resource-set\n\n\nUMA Resource Set Object\n\n\n\n\n\n\n0011\n\n\ninterception-script\n\n\nGluu Server interception script object\n\n\n\n\n\n\n0012\n\n\nsector-identifier\n\n\nManaged Sector Identifier URI\n\n\n\n\n\n\n\n\ngenerateJsonInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nheader\n\n\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nString[Response]\n\n\ngenerateHtmlInum\n\nGET**\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n- header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nThe authorization sent as a String\n\n\nstring\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\ngenerateTextInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\nheader\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\ngenerateXmlInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n- header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n\n\n\n\n\ngenerateHtmlInum\n\n\nGET\n/id/{prefix}/{type}/\n\n\nGenerates ID for given prefix and type.\n\n\nURL\n\n    http://gluu.org/id/{prefix}/{type}/\n\nParameters\n\n- path\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\ntrue\n\n\nPrefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000\n\n\nstring\n\n\n\n\n\n\ntype\n\n\ntrue\n\n\nType of id\n\n\nstring\n\n\n\n\n\n\n- header\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\nString[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n\n\n\n\n\nOpenId Connect Authorization Grant\n#\n\n\nThis page provides an interface for request authorization through REST web services.\n\n\nPath\n#\n\n\n/oxauth/authorize\n\n\nrequestAuthorizationGet\n#\n\n\nGET\n/oxauth/authorize\n\n\nThe Authorization Endpoint performs Authentication of the end-user. This is done by sending the User Agent to the Authorization Server's Authorization Endpoint for Authentication and Authorization, using request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect.\n\n\nURL\n#\n\n\nhttp://<hostname of Gluu Server>/oxauth/authorize\n\n\nParameters\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\nscope\n\n\ntrue\n\n\nOpenID Connect requests MUST contain the openid scope value\n\n\nstring\n\n\n\n\n\n\nresponse_type\n\n\ntrue\n\n\nOAuth 2.0 Response Type value that determines the authorization processing flow to be used, \nincluding what parameters are returned from the endpoints used. When using the Authorization\n Code Flow, this value is code\n\n\nstring\n\n\n\n\n\n\nclient_id\n\n\ntrue\n\n\nOAuth 2.0 Client Identifier valid at the Authorization Server.\n\n\nstring\n\n\n\n\n\n\nredirect_uri\n\n\ntrue\n\n\nRedirection URI to which the response will be sent. This URI MUST exactly match one of the \nRedirection URI values for the Client pre-registered at the OpenID Provider\n\n\nstring\n\n\n\n\n\n\nstate\n\n\nfalse\n\n\nOpaque value used to maintain state between the request and the callback.\n Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding\n the value of this parameter with a browser cookie.\n\n\nstring\n\n\n\n\n\n\nresponse_mode\n\n\nfalse\n\n\nThis parameter informs the authorization server about the mechanism to be used to return \nparameters from the authorization endpoint. This is not recommended if the default for\n response_type is requested.\n\n\nstring\n\n\n\n\n\n\nnonce\n\n\nfalse\n\n\nString value used to associate a Client session with an ID Token, and to mitigate replay attacks.\n The value is passed through unmodified from the Authorization Request to the ID Token. \nSufficient entropy MUST be present in the nonce values used to prevent attackers from guessing \nvalues.\n\n\nstring\n\n\n\n\n\n\ndisplay\n\n\nfalse\n\n\nASCII string value that specifies how the Authorization Server displays the authentication\n and consent user\n interface pages to the end-user. The defined values are: page, popup, touch, wap\n\n\nstring\n\n\n\n\n\n\nprompt\n\n\nfalse\n\n\nSpace delimited, case sensitive list of ASCII string values that specifies whether the \nAuthorization Server prompts the end-user for re-authentication and consent. \nThe defined values are: none, login, consent, select_account\n\n\nstring\n\n\n\n\n\n\nmax_age\n\n\nfalse\n\n\nMaximum Authentication Age. Specifies the allowable elapsed time in seconds since the last \ntime the end-user was actively authenticated by the OP. If the elapsed \ntime is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. \n(The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] \nmax_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an \nauth_time Claim Value.\n\n\nint\n\n\n\n\n\n\nui_locales\n\n\nfalse\n\n\nend-user's preferred languages and scripts for the user interface, represented as a space-separated\n list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken\n in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested \nlocales are not supported by the OpenID Provider.\n\n\nstring\n\n\n\n\n\n\nid_token_hint\n\n\nfalse\n\n\nID Token previously issued by the Authorization Server being passed as a hint about the end-user's \ncurrent or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization \nServer returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none \nis used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. \nThe Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.\n\n\nstring\n\n\n\n\n\n\nlogin_hint\n\n\nfalse\n\n\nHint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). \nThis hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered \nauthorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the \nphone_number Claim. The use of this parameter is left to the OP's discretion.\n\n\nstring\n\n\n\n\n\n\nacr_values\n\n\nfalse\n\n\nRequested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the\n Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The\n Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a \nVoluntary Claim by this parameter.\n\n\nstring\n\n\n\n\n\n\namr_values\n\n\nfalse\n\n\nAMR Values\n\n\nstring\n\n\n\n\n\n\nrequest\n\n\nfalse\n\n\nThis parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally \nsigned and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the \nrequest parameters.\n\n\nstring\n\n\n\n\n\n\nrequest_uri\n\n\nfalse\n\n\nThis parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri \nvalue is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.\n\n\nstring\n\n\n\n\n\n\nrequest_session_state\n\n\nfalse\n\n\nRequest session state\n\n\nstring\n\n\n\n\n\n\nsessionState\n\n\nfalse\n\n\nThis is an optional parameter\n\n\nstring\n\n\n\n\n\n\naccessToken\n\n\nfalse\n\n\nThis parameter is optinal and carries the access token for the request.\n\n\nstring\n\n\n\n\n\n\norigin_headers\n\n\nfalse\n\n\nThis optional token is used in custom workflows.\n\n\nstring\n\n\n\n\n\n\ncodeChallange\n\n\nfalse\n\n\nThis parameter allows the code to be challanced using PKCE.\n\n\nstring\n\n\n\n\n\n\ncodeChallangeMethod\n\n\nfalse\n\n\nThis parameter allows the use of PKCE to challange code.\n\n\nstring\n\n\n\n\n\n\nhttpRequest\n\n\nfalse\n\n\nThis is an optional parameter\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nfalse\n\n\nThis is an injectable interface that provides access to security related information.\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nquery\n\n\n\n\n\n        \n\n            \nParameter|Required|Description|Data Type|\n|response_mode|false|Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.|string|\n        \n\n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n302|interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. |\n        \n\n        \n\n            \n302|login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. |\n        \n\n        \n\n            \n302|account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. |\n        \n\n        \n\n            \n302|consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. |\n        \n\n        \n\n            \n302|invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. |\n        \n\n        \n\n            \n302|invalid_request_object\n    The request parameter contains an invalid Request Object. |\n        \n\n        \n\n            \n302|request_not_supported\n    The OP does not support use of the request parameter|\n        \n\n        \n\n            \n302|request_uri_not_supported\n    The OP does not support use of the request_uri parameter|\n        \n\n        \n\n            \n302|registration_not_supported\n    The OP does not support use of the registration parameter|\n        \n\n        \n\n            \n400|The request parameters contain an invalid option, e.g. an unusual grant type.|\n        \n\n        \n\n            \n401|The request could not be authenticated using the client_id and client_secret.|\n        \n\n        \n\n            \n500|Either an internal server error occurred (e.g. opendj server is down), or the username and password \n                do not match any known user.\n            |\n        \n\n\n\n\nrequestAuthorizationPost\n#\n\n\nPOST\n/oxauth/authorize\n\n\nPerforms authorization.\nThe Authorization Endpoint performs Authentication of the end-user.\n\n\nURL\n#\n\n\nhttp://<hostname of Gluu Server>/oxauth/authorize\n\n\nParameters\n#\n\n\n\n        \n\n            \nParameter|Required|Description|Data Type|\n|scope|true|OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.|string|\n|response_type|true|OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.|string|\n|client_id|true|OAuth 2.0 Client Identifier valid at the Authorization Server.|string|\n|redirect_uri|true|Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider|string|\n|state|false|Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.|string|\n|response_mode|false|Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.|string|\n|nonce|false|String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.|string|\n|display|false|ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap|string|\n|prompt|false|Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account|string|\n|max_age|false|Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.|int|\n|ui_locales|false|end-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.|string|\n|id_token_hint|false|ID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.|string|\n|login_hint|false|Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion.|string|\n|acr_values|false|Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in section 2. The acr Claim is requested as a Voluntary Claim by this parameter.|string|\n|amr_values|false|AMR Values|string|\n|request|false|This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in section 6.1. It represents the request as a JWT whose Claims are the request parameters.|string|\n|request_uri|false|This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.|string|\n|request_session_state|false|Request session state|string|\n|session_state|false|Session state of this call|string|\n|access_token|false|Access token|string|\n|origin_headers|false|Origin headers. Used in custom workflows.|string|\n        \n\n    \n\n        \ncode_challange|\n        \nfalse|\n        \nPKCE Code challange|\n        \nstring|\n    \n\n    \n\n        \ncode_challange_method|\n        \nfalse|\n        \nPKCE code challange method|\n        \nstring|\n    \n\n\n\n\nResponse\n#\n\n\nJSON[Response]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n302|interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. |\n        \n\n        \n\n            \n302|login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. |\n        \n\n        \n\n            \n302|account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. |\n        \n\n        \n\n            \n302|consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. |\n        \n\n        \n\n            \n302|invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. |\n        \n\n        \n\n            \n302|invalid_request_object\n    The request parameter contains an invalid Request Object. |\n        \n\n        \n\n            \n302|request_not_supported\n    The OP does not support use of the request parameter|\n        \n\n        \n\n            \n302|request_uri_not_supported\n    The OP does not support use of the request_uri parameter|\n        \n\n        \n\n            \n302|registration_not_supported\n    The OP does not support use of the registration parameter|\n        \n\n\n\n\n\n\nAPI for oxAuth Clientinfo\n#\n\n\nThis document provides interface for Client Info REST web services.\n\n\nPath\n#\n\n\n/oxauth/clientinfo\n\n\nOverview\n#\n\n\nThe ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.\n\n\nclientinfoGet\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\naccess_token\n\n\nThe access token for oxAuth\n\n\nstring\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\ncontext\n\n\n\n\n\n\n\n\nclientinfoPost\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\naccess_token\n\n\nThe access token for oxAuth\n\n\nstring\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\nstring\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\ncontext\n\n\n\n\n\n\n\n\nAPI Document\n#\n\n\n/oxauth\n#\n\n\nOverview\n#\n\n\n/oxauth/end_session\n#\n\n\nrequestEndSession\n\nGET**\n/oxauth/end_session\n\n\nEnd current Connect session.\nEnd current Connect session.\n\n\nURL\n\n    http://gluu.org/oxauth/end_session\n\nParameters\n\n- query\n\n\n\n\n\n\n\n\nParameter\n\n\nRequired\n\n\nDescription\n\n\nData Type\n\n\n\n\n\n\n\n\n\n\npost_logout_redirect_uri\n\n\nfalse\n\n\nURL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.\n\n\nstring\n\n\n\n\n\n\nstate\n\n\nfalse\n\n\nOpaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.\n\n\nstring\n\n\n\n\n\n\nsession_id\n\n\nfalse\n\n\nSession ID\n\n\nstring\n\n\n\n\n\n\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n        \n\n        \n\n            \n400|invalid_grant\nThe provided access token is invalid, or was issued to another client.|\n        \n\n\n\n\n\n\nData Types\n#\n\n\nAPI Document\n#\n\n\n/oxauth\n#\n\n\nOverview\n#\n\n\nAny OpenID Client needs to register with the OpenID Provider to utilize OpenID Services, in this case register a user, and acquire a client ID and a shared secret.\n\n\n/oxauth/register\n#\n\n\nregisterPost\n#\n\n\nPOST\n/oxauth/register\n\n\nRegisters new dynamic client in oxAuth.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n#\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nredirect_uris\n\n\nRedirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request\n\n\n\n\n\n\nresponse_types\n\n\nA list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token\n\n\n\n\n\n\ngrant_types\n\n\nA list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are:\nauthorization_code\nThe Authorization Code Grant Type\nimplicit\nThe Implicit Grant Type\nrefresh_token\nThe Refresh Token Grant Type\nThe following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list:\ncode: authorization_code\nid_token: implicit\ntoken id_token: implicit\ncode id_token: authorization_code, implicit\ncode token: authorization_code, implicit\ncode token id_token: authorization_code, implicit\n\n\n\n\n\n\napplication_type\n\n\nKind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the https scheme as redirect_uris; they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname.\n\n\n\n\n\n\ncontacts\n\n\ne-mail addresses of people responsible for this Client.\n\n\n\n\n\n\nclient_name\n\n\nName of the Client to be presented to the End-User.\n\n\n\n\n\n\nlogo_uri\n\n\nURL that references a logo for the Client application. If present, the server displays this image to the End-User during approval. The value of this field must point to a valid image file.\n\n\n\n\n\n\nclient_uri\n\n\nURL of the home page of the Client. The value of this field must point to a valid Web page. If present, the server displays this URL to the End-User in a followable fashion.\n\n\n\n\n\n\npolicy_uri\n\n\nURL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.\n\n\n\n\n\n\ntos_uri\n\n\nURL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.\n\n\n\n\n\n\njwks_uri\n\n\nURL for the Client's JSON Web Key Set (JWK) document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is not recommended, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values must still be present and must match those in the certificate.\n\n\n\n\n\n\njwks\n\n\nClient's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does). The jwks_uri and jwks parameters must not be used together.\n\n\n\n\n\n\nsector_identifier_uri\n\n\nURL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Providers that use pairwise sub (subject) values utilizes the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.\n\n\n\n\n\n\nsubject_type\n\n\nsubject_type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.\n\n\n\n\n\n\nid_token_signed_response_alg\n\n\nJWS alg algorithm (JWA) required for signing the ID Token issued to this Client. The value none must not be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow). The default, if omitted, is RS256. The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery.\n\n\n\n\n\n\nid_token_encrypted_response_alg\n\n\nJWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.\n\n\n\n\n\n\nid_token_encrypted_response_enc\n\n\nJWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg must also be provided.\n\n\n\n\n\n\nuserinfo_signed_response_alg\n\n\nJWS alg algorithm (JWA) required for signing UserInfo Responses. If this is specified, the response will be JWT serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.\n\n\n\n\n\n\nuserinfo_encrypted_response_alg\n\n\nJWE alg algorithm (JWA) required for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.\n\n\n\n\n\n\nuserinfo_encrypted_response_enc\n\n\nJWE enc algorithm (JWA) required for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg must also be provided.\n\n\n\n\n\n\nrequest_object_signing_alg\n\n\nJWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP. All Request Objects from this Client are rejected, if not signed with this algorithm. This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none may be used. The default, if omitted, is that any algorithm supported by the OP and the RP may be used.\n\n\n\n\n\n\nrequest_object_encryption_alg\n\n\nJWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter should be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP may still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\n\n\n\n\n\nrequest_object_encryption_enc\n\n\nJWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg must also be provided.\n\n\n\n\n\n\ntoken_endpoint_auth_method\n\n\nRequested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.\n\n\n\n\n\n\ntoken_endpoint_auth_signing_alg\n\n\nJWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client are rejected, if the JWT is not signed with this algorithm. The value none must not be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.\n\n\n\n\n\n\ndefault_max_age\n\n\nDefault Maximum Authentication Age. Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.\n\n\n\n\n\n\nrequire_auth_time\n\n\nBoolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter) If omitted, the default value is false.\n\n\n\n\n\n\ndefault_acr_values\n\n\nDefault requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being requested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter. The acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values request parameter or an individual acr Claim request override these default values.\n\n\n\n\n\n\ninitiate_login_uri\n\n\nURI using the https scheme that a third party can use to initiate a login by the RP. The URI must accept requests via both GET and POST. The Client must understand the login_hint and iss parameters and should support the target_link_uri parameter.\n\n\n\n\n\n\nrequest_uris\n\n\nrequest_uri values that are pre-registered by the RP for use at the OP. The Servers cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. If the contents of the request file could ever change, these URI values should include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.\n\n\n\n\n\n\n\n\nResponse\n#\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n            \n400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n        \n\n        \n\n            \n401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n        \n\n        \n\n            \n403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n        \n\n    \n\n        \n302|\n        \naccess_denies The request is denied by the authorization server.|\n    \n\n\n\n\n\nregisterPut\n#\n\n\nPUT\n/oxauth/register\n\n\nThis operation updates the Client Metadata for a registered client.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n#\n\n\nThe request is sent as an \nHTTP POST\n to the client registration endpoint as JSON with the parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientId\n\n\nThe unique client identifier usually INUM\n\n\n\n\n\n\nauthorization\n\n\nThe authorization for the client\n\n\n\n\n\n\nhttpRequest\n\n\nThe HTTP Request object\n\n\n\n\n\n\nsecurityContext\n\n\nInjectable interface providing access to security info\n\n\n\n\n\n\n\n\nResponse\n#\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n        \n\n        \n\n            \n401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n        \n\n        \n\n            \n403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n        \n\n        \n\n            \n302|access_denies The request is denied by the authorization server.|\n        \n\n\n\n\n\nregisterGet\n#\n\n\nGET\n/oxauth/register\n\n\nThis operation retrieves the Client Metadata for a previously registered client.\n\n\nURL\n#\n\n\nhttp://gluu.org/oxauth/register\n\n\n\nParameters\n#\n\n\nThe request is sent as an \nHTTP POST\n to the client registration endpoint as JSON with the parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclientId\n\n\nThe unique client identifier usually INUM\n\n\n\n\n\n\nsecurityContext\n\n\ninjectable interface that provides access to security related info.\n\n\n\n\n\n\n\n\nResponse\n#\n\n\nClient Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]\n\n\nErrors\n#\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n        \n\n        \n\n            \n401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n        \n\n        \n\n            \n403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n        \n\n        \n\n            \n302|access_denies The request is denied by the authorization server.|\n        \n\n\n\n\nAPI Document\n#\n\n\n/oxauth\n#\n\n\nOverview\n#\n\n\n/oxauth/token\n#\n\n\nrequestAccessToken\n\nPOST**\n/oxauth/token\n\n\nTo obtain an Access Token, an ID Token, and optionally a Refresh Token,\nthe RP (Client) sends a Token Request to the Token Endpoint to obtain a\nToken Response.\n\n\nURL\n\n    http://gluu.org/oxauth/token\n\nParameters\n\n- form\n\n\n|Parameter|Required|Description|Data Type|\n|grant_type|true|Grant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749].|string|\n|code|false|Code which is returned by authorization endpoint (For\ngrant_type=authorization_code).|string|\n|redirect_uri|false|Redirection uri to which the response will be sent. This\nuri MUST exactly match one of the redirection uri values for the client\npre-registered at the OpenID Provider.|string|\n|username|false|End-User username.|string|\n|password|false|End-User password.|string|\n|scope|false|OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.|string|\n|assertion|false|Assertion.|string|\n|refresh_token|false|Refresh token.|string|\n|oxauth_exchange_token|false|oxauth_exchange_token.|string|\n|client_id|false|OAuth 2.0 Client Identifier valid at the Authorization Server.|string|\n|client_secret|false|The client secret. The client MAY omit the parameter if the client secret is an empty string.|string|\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n400|invalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed.|\n        \n\n        \n\n            \n400|invalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\"\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.|\n        \n\n        \n\n            \n400|invalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection uri used in the authorization request, or was issued to another client.|\n        \n\n        \n\n            \n400|unauthorized_client\nThe authenticated client is not authorized to use this authorization grant type.|\n        \n\n        \n\n            \n400|unsupported_grant_type\nThe authorization grant type is not supported by the authorization server.|\n        \n\n        \n\n            \n400| invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.|\n        \n\n\n\n\n\n\nData Types\n#\n\n\nAPI Document\n#\n\n\n/oxauth\n#\n\n\nOverview\n#\n\n\n/oxauth/userinfo\n#\n\n\nrequestUserInfoPost\n\nPOST**\n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n    http://gluu.org/oxauth/userinfo\n\nParameters\n\n- form\n\n\n|Parameter|Required|Description|Data Type|\n|access_token|true|OAuth 2.0 Access Token.|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n        \n\n        \n\n            \n401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n        \n\n        \n\n            \n403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n        \n\n\n\n\n\n\nrequestUserInfoGet\n\nGET**\n/oxauth/userinfo\n\n\nReturns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.\n\n\nURL\n\n    http://gluu.org/oxauth/userinfo\n\nParameters\n\n- query\n\n\n|Parameter|Required|Description|Data Type|\n|access_token|true|OAuth 2.0 Access Token.|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nJSON[Response]\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n        \n\n        \n\n            \n401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request.|\n        \n\n        \n\n            \n403|insufficient_scope\nThe request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n        \n\n\n\n\n\n\nData Types\n#\n\n\nSCIM 1.1\n#\n\n\nSCIM 1.1 Specifications\n#\n\n\nYou can see the detailed SCIM 1.1 specification documents\n\nhere\n.\n\n\nSCIM 1.1 Endpoints\n#\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nUser Endpoint\n#\n\n\n/seam/resource/restv1/Users\n#\n\n\n\n\ngetUser\n\nGET**\n/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\nReturns a user on the basis of provided id as path parameter. The\nresource MUST be already registered with the mentioned id.\n\n\nURL\n\n    http://gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\nRequest\n\nParameters**\n\n- Following are the details about parameters:\n|Parameter|Location|\n        \nRequired|Description|Data Type|\n|rsid|\n        \npath|\n        \nTRUE|Resource set description ID|string|\n        \n\n    \n\n            \nAuthorization|\n        \nheader|\n        \nFALSE||string|\n\n\nResponse\n\n\nContent Type:\n application/json, application/xml\n\n\n**Success\n-   \n\n        \n\n            \nStatus Code|\n            \nReason|\n            \nDescription|\n        \n\n        \n\n            \n200|\n            \nSuccessful Operation|\n            \nResource returned successfully|\n        \n\n    \n\n\nErrors\n\n-   \n\n        \n\n            \nStatus Code|\n            \nReason|\n            \nDescription|\n        \n\n        \n\n            \n400|\n            \nBAD REQUEST|\n            \nRequest cannot be parsed, is syntactically incorrect, or violates schema.|\n        \n\n        \n\n            \n401|\n            \nUNAUTHORIZED|\n            \nAuthorization header is invalid or missing.|\n        \n\n        \n\n            \n403|\n            \nFORBIDDEN|\n            \nOperation is not permitted based on the supplied\nauthorization.|\n        \n\n        \n\n            \n404|\n            \nNOT FOUND|\n            \nSpecified user does not exist.|\n        \n\n    \n\n\n\n\nGroup Endpoint\n#\n\n\n/seam/resource/restv1/Groups\n#\n\n\n\n\ngetGroup\n\nGET**\n/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\nReturns a group on the basis of the provided id as a path parameter. The\ngroup MUST be already registered with the mentioned id.\n\n\nURL\n\n    http://gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\nRequest\n\nParameters**\n\n- Following are the details about parameters:\n|Parameter|Location|\n        \nRequired|Description|Data Type|\n|rsid|\n        \npath|\n        \nTRUE|Resource set description ID.|string|\n        \n\n    \n\n            \nAuthorization|\n        \nheader|\n        \nFALSE||string|\n\n\nResponse\n\n\nContent Type:\n application/json, application/xml\n\n\n**Success\n-   \n\n        \n\n            \nStatus Code|\n            \nReason|\n            \nDescription|\n        \n\n        \n\n            \n200|\n            \nSuccessful Operation|\n            \nGroup returned successfully.|\n        \n\n    \n\n\nErrors\n\n-   \n\n        \n\n            \nStatus Code|\n            \nReason|\n            \nDescription|\n        \n\n        \n\n            \n400|\n            \nBad Request|\n            \nRequest cannot be parsed, is syntactically incorrect, or violates schema.|\n        \n\n        \n\n            \n401|\n            \nUnauthorized|\n            \nAuthorization header is invalid or missing.|\n        \n\n        \n\n            \n403|\n            \nForbidden|\n            \nOperation is not permitted based on the supplied authorization.|\n        \n\n        \n\n            \n404|\n            \nNot Found|\n            \nSpecified user does not exist.|\n        \n\n    \n\n\n\n\nBulk Operation Endpoint\n#\n\n\n/seam/resource/restv1/scim/v1/Bulk\n#\n\n\n\n\nBulk Operation\n\n\nSCIM Bulk Operation enables consumers to work with a potentially large\ncollection (bulk) of Resource operations in a single request. A body of\na bulk operation may contain a set of HTTP Resource operations using one\nof the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.\n(see http://www.simplecloud.info/specs/draft-scim-api-01.html#bulk-resources\nfor more details.)\n\n\nSecurity\n#\n\n\n\n\nAuthorization\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/json, application/xml\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nno|\n        \n|\n        \n - |\n        \nstring |\n    \n\n    \n\n        \nbody|\nbody|\n        \nno|\n        \nBulkRequest|\n        \n - |\n        \nBulkRequest\n|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type: \napplication/json, application/xml\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n#\n\n\nBulkOperation\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n\n        \n\n            \nbulkId|string|optional|-||\n        \n\n\n        \n\n            \nversion|string|optional|-||\n        \n\n\n        \n\n            \nmethod|string|optional|-||\n        \n\n\n        \n\n            \npath|string|optional|-||\n        \n\n\n        \n\n            \nlocation|string|optional|-||\n        \n\n\n        \n\n            \ndata|object|optional|-||\n        \n\n\n        \n\n            \nstatus|string|optional|-||\n        \n\n\n        \n\n            \nresponse|object|optional|-||\n        \n\n\n\n\n\nBulkRequest\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n\n        \n\n            \nschemes|array[string]|optional|-||\n        \n\n\n        \n\n            \nfailOnErrors|integer (int32)|optional|-||\n        \n\n\n        \n\n            \noperations|array[\nBulkOperation\n]|optional|-||\n        \n\n\n\n\n\nBulkResponse\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n\n        \n\n            \nschemes|array[string]|optional|-||\n        \n\n\n        \n\n            \noperations|array[\nBulkOperation\n]|optional|-||\n        \n\n\n\n\n\nSCIM 2.0\n#\n\n\nSCIM 2.0 Specifications\n#\n\n\nYou can see the detailed SCIM 2.0 specification documents here:\n\n\nSystem for Cross-domain Identity Management: Core Schema\n\n\nSystem for Cross-domain Identity Management: Protocol\n\n\nSCIM 2.0 Endpoints\n#\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nSCIM 2.0 Definitions\n#\n\n\n\n\nDefinitions\n\n\n\n\n\n\nUser Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users\n\n\n\nGET\n#\n\n\nSearch Users\n - searches users based on filter criteria\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nfilter|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nstartIndex|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \ncount|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nsortBy|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nsortOrder|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n#\n\n\nCreate User\n - creates a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nbody|\nbody|\n        \nyes|\n        \nUser|\n        \n - |\n        \nUser\n|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}\n\n\n\nGET\n#\n\n\nFind User By ID\n - returns a user by id as path parameter\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nid|\npath|\n        \nyes|\n        \nLDAP 'inum' of user|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/scim\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nPUT\n#\n\n\nUpdate User\n - updates a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nid|\npath|\n        \nyes|\n        \nLDAP 'inum' of user|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nbody|\nbody|\n        \nyes|\n        \nUser|\n        \n - |\n        \nUser\n|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nDELETE\n#\n\n\nDelete User\n - deletes a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nid|\npath|\n        \nyes|\n        \nLDAP 'inum' of user|\n        \n - |\n        \nstring|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/Search\n\n\n\nPOST\n#\n\n\nSearch Users\n (\nDeprecated\n)\n - searches users by HTTP POST\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nbody|\nbody|\n        \nyes|\n        \n|\n        \n - |\n        \nScimPersonSearch|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\n\n\nGroup Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups\n\n\n\nGET\n#\n\n\nSearch Groups\n - searches groups based on filter criteria\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nfilter|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nstartIndex|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \ncount|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nsortBy|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nsortOrder|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n#\n\n\nCreate Group\n - creates a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nbody|\nbody|\n        \nyes|\n        \nGroup|\n        \n - |\n        \nGroup\n|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}\n\n\n\nGET\n#\n\n\nFind Group By ID\n - returns a group by id as path parameter\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nid|\npath|\n        \nyes|\n        \nLDAP 'inum' of group|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nPUT\n#\n\n\nUpdate Group\n - updates a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nid|\npath|\n        \nyes|\n        \nLDAP 'inum' of group|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nbody|\nbody|\n        \nyes|\n        \nGroup|\n        \n - |\n        \nGroup\n|\n    \n\n    \n\n        \nattributes|\nquery|\n        \nno|\n        \n|\n        \n - |\n        \nstring array|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nDELETE\n#\n\n\nDelete Group\n - deletes a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nid|\npath|\n        \nyes|\n        \nLDAP 'inum' of the group|\n        \n - |\n        \nstring |\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\n\n\nBulk Operation Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Bulk\n\n\n\nPOST\n#\n\n\nBulk Operations\n - bulk operations\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\nParameters\n\n\n\n    \n\n        \nName|\nLocated in|\nRequired|\nDescription|\nDefault|\nSchema|\n    \n\n    \n\n        \nAuthorization|\nheader|\n        \nyes (default)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \naccess_token|\nquery|\n        \nyes (if \"Test Mode\" is enabled)|\n        \n|\n        \n - |\n        \nstring|\n    \n\n    \n\n        \nbody|\nbody|\n        \nyes|\n        \nBulkRequest|\n        \n - |\n        \nBulkRequest\n|\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\nDefinitions\n#\n\n\nAddress\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \nboolean|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nformatted|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nstreetAddress|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nlocality|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nregion|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \npostalCode|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ncountry|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \nType\n|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nBulkOperation\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nbulkId|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nversion|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nmethod|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \npath|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nlocation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndata|\n        \n object |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nstatus|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nresponse|\n        \n object |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nBulkRequest\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nschemas|\n        \n array[string] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nfailOnErrors|\n        \n integer (int32) |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \noperations|\n        \n array[\nBulkOperation\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nBulkResponse\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nschemas|\n        \n array[string] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \noperations|\n        \n array[\nBulkOperation\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nEmail\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nEntitlement\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n   \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nGroup\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nid|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nexternalId|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nmeta|\n        \n \nMeta\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nschemas|\n        \n array[string] |\n        \nrequired|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplayName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nmembers|\n        \n array[\nMemberRef\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nGroupRef\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nIm\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nListResponse\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \ntotalResults|\n        \ninteger (int32)|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nstartIndex|\n        \ninteger (int32)|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nitemsPerPage|\n        \ninteger (int32)|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nschemas|\n        \narray[string]|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nresources|\n        \narray[\nResource\n]|\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nMemberRef\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nMeta\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \ncreated|\n        \n string (date-time) |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nlastModified|\n        \n string (date-time) |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nlocation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nversion|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nattributes|\n        \n array[string] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nresourceType|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nName\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nformatted|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nfamilyName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ngivenName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nmiddleName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nhonorificPrefix|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nhonorificSuffix|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nPhoneNumber\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nPhoto\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nResource\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nid|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nexternalId|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nmeta|\n        \nMeta\n|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nschemas|\n        \narray[string]|\n        \nrequired|\n        \n-|\n        \n|\n    \n\n\n\n\n\nRole\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \n \nType\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nType\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n\n\n\n\nUser\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nid|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nexternalId|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nmeta|\n        \n \nMeta\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nschemas|\n        \n array[string] |\n        \nrequired|\n        \n-|\n        \n|\n    \n\n    \n\n        \nuserName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nname|\n        \n \nName\n |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplayName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nnickName|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprofileUrl|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntitle|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nuserType|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \npreferredLanguage|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nlocale|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntimezone|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nactive|\n        \n boolean |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \npassword|\n        \n string |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nemails|\n        \n array[\nEmail\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nphoneNumbers|\n        \n array[\nPhoneNumber\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nims|\n        \n array[\nIm\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nphotos|\n        \n array[\nPhoto\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \naddresses|\n        \n array[\nAddress\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ngroups|\n        \n array[\nGroupRef\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nentitlements|\n        \n array[\nEntitlement\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nroles|\n        \n array[\nRole\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nx509Certificates|\n        \n array[\nX509Certificate\n] |\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nX509Certificate\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \noperation|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nvalue|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ndisplay|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \nprimary|\n        \nboolean|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \ntype|\n        \nType\n|\n        \noptional|\n        \n-|\n        \n|\n    \n\n    \n\n        \n$ref|\n        \nstring|\n        \noptional|\n        \n-|\n        \n|\n    \n\n\n\n\n\nScimPersonSearch\n#\n\n\n\n    \n\n        \nname|\ntype|\nrequired|\ndescription|\nexample|\n    \n\n    \n\n        \nattribute|\n        \n string |\n        \nrequired|\n        \nUser Attribute Name|\n        \nUsername|\n    \n\n    \n\n        \nvalue|\n        \n string |\n        \nrequired|\n        \nUser Attribute Value|\n        \nMike|\n    \n\n\n\n\n\nAPI Document\n#\n\n\n/requester/perm\n#\n\n\nOverview\n#\n\n\n/requester/perm\n#\n\n\nrequestRptPermissionAuthorization\n\nPOST**\n/requester/perm\n\n\nClient Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this\nauthorization server, the client asks the authorization server to give\nit authorization data corresponding to that permission ticket. It\nperforms a POST on the RPT endpoint, supplying its own AAT in the header\nand a JSON object in the body with a \"ticket\" property containing the\nticket as its value.\n\n\nIf the client had included an RPT in its failed access attempt, It MAY\nalso provide that RPT in an \"rpt\" property in its request to the\nauthorization server.\n\n\nIn circumstances where the client needs to provide requesting party\nclaims to the authorization server, it MAY also include a \"claim_tokens\"\nproperty in its request; see Section 3.4.1.2.1 for more information. The\nauthorization server uses the ticket to look up the details of the\npreviously registered requested permission, maps the requested\npermission to operative resource owner policies based on the resource\nset identifier and scopes associated with it, potentially requests\nadditional information, and ultimately responds positively or negatively\nto the request for authorization data.\n\n\nThe authorization server bases the issuing of authorization data on\nresource owner policies. These policies thus amount to an asynchronous\nOAuth authorization grant. The authorization server is also free to\nenable the resource owner to set policies that require the owner to\ninteract with the server in near-real time to provide consent subsequent\nto an access attempt. All such processes are outside the scope of this\nspecification.\n\n\nURL\n\n    http://gluu.org/requester/perm\n\n\nParameters\n\n- body\n\n\n|Parameter|Required|Description|Data Type|\n|body|false||\nRptAuthorizationRequest\n|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n|Host|false||string|\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n403|Forbidden. Example of a \"need_info\" response with a full set of \"error_details\" hints:\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n\n{\n \"error\": \"need_info\",\n \"error_details\": {\n   \"authentication_context\": {\n     \"required_acr\": [\"https://example.com/acrs/LOA3.14159\"]\n   },\n   \"requesting_party_claims\": {\n     \"required_claims\": [\n       {\n         \"name\": \"email23423453ou453\",\n         \"friendly_name\": \"email\",\n         \"claim_type\": \"urn:oid:0.9.2342.19200300.100.1.3\",\n         \"claim_token_format\": \n[\"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\"],\n         \"issuer\": [\"https://example.com/idp\"]\n       }\n     ],\n     \"redirect_user\": true,\n     \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n   }\n }\n}\n|\n        \n\n        \n\n            \n401|Unauthorized|\n        \n\n        \n\n            \n400|Bad request|\n        \n\n\n\n\n\n\nData Types\n#\n\n\nClaimTokenList\n#\n\n\n\n    \n\n        \ntype|\nrequired|\naccess|\ndescription|\nnotes|\n    \n\n    \n\n        \nboolean|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nint|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n\n\n\n\nRptAuthorizationRequest\n#\n\n\n\n    \n\n        \ntype|\nrequired|\naccess|\ndescription|\nnotes|\n    \n\n    \n\n        \nClaimTokenList\n|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n\n\n\n\nAPI Document\n#\n\n\n/requester/rpt\n#\n\n\nOverview\n#\n\n\n/requester/rpt\n#\n\n\ngetRequesterPermissionToken\n\nPOST**\n/requester/rpt\n\n\nThe endpoint at which the requester asks the AM to issue an RPT.\n\n\nURL\n\n    http://gluu.org/requester/rpt\n\n\nParameters\n\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n|Host|false||string|\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n401|Unauthorized|\n        \n\n\n\n\n\n\nData Types\n#\n\n\nAPI Document\n#\n\n\n/.well-known/uma-configuration\n#\n\n\nOverview\n#\n\n\n/oxauth/uma-configuration\n#\n\n\ngetConfiguration\n\nGET**\n/oxauth/uma-configuration\n\n\nProvides configuration data as JSON document. It contains options and\nendpoints supported by the authorization server.\n\n\nURL\n\n    http://gluu.org/oxauth/uma-configuration\n\n\nParameters\n\n\nResponse\n\n\nUmaConfiguration\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n500|\n        \nFailed to build UMA configuration JSON object.|\n    \n\n\n\n\n\n\nData Types\n#\n\n\nUmaConfiguration\n#\n\n\n\n    \n\n        \ntype|\nrequired|\naccess|\ndescription|\nnotes|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \nrequired|\n        \n-|\n        \nAn uri indicating the party operating the authorization server.|\n        \nAn uri indicating the party operating the authorization server.|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \nrequired|\n        \n-|\n        \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".|\n        \nThe version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".|\n    \n\n\n\n\n\nAPI Document\n#\n\n\n/host/rsrc_pr\n#\n\n\nOverview\n#\n\n\n/host/rsrc_pr\n#\n\n\nregisterResourceSetPermission\n\nPOST**\n/host/rsrc_pr\n\n\nRegisters permission using the POST method.\nThe resource server uses the POST method at the endpoint. The body of\nthe HTTP request message contains a JSON object providing the requested\npermission, using a format derived from the scope description format\nspecified in [OAuth-resource-reg], as follows. The object has the\nfollowing properties:\n\n\nURL\n\n    http://gluu.org/host/rsrc_pr\n\n\nParameters\n\n- body\n\n\n|Parameter|Required|Description|Data Type|\n|body|true|The identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered.|\nRegisterPermissionRequest\n|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n|Host|false||string|\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n401|Unauthorized|\n        \n\n        \n\n            \n400|Bad Request|\n        \n\n\n\n\n\n\nData Types\n#\n\n\nRegisterPermissionRequest\n#\n\n\n\n    \n\n        \ntype|\nrequired|\naccess|\ndescription|\nnotes|\n    \n\n    \n\n        \nDate|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nDate|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nDate|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n\n\n\n\nAPI Document\n#\n\n\n/host/rsrc/resource_set\n#\n\n\nOverview\n#\n\n\n/host/rsrc/resource_set{rsid}\n#\n\n\ndeleteResourceSet\n\nDELETE**\n/host/rsrc/resource_set{rsid}\n\n\nDeletes a previously registered resource set description using the\nDELETE method, thereby removing it from the authorization server's\nprotection regime.\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set{rsid}\n\n\nParameters\n\n- path\n\n\n|Parameter|Required|Description|Data Type|\n|rsid|true|Resource set description ID|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n401|\n        \nUnauthorized|\n    \n\n\n\n\n\n\ngetResourceSet\n\nGET**\n/host/rsrc/resource_set{rsid}\n\n\nReads a previously registered resource set description using the GET\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes a body containing the\nreferenced resource set description, along with an \"_id\" property.\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set{rsid}\n\n\nParameters\n\n- path\n\n\n|Parameter|Required|Description|Data Type|\n|rsid|true|Resource set description object ID|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n401|\n        \nUnauthorized|\n    \n\n\n\n\n\n\nupdateResourceSet\n\nPUT**\n/host/rsrc/resource_set{rsid}\n\n\nUpdates a previously registered resource set description using the PUT\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes an \"_id\" property.\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set{rsid}\n\n\nParameters\n\n- body\n\n\n|Parameter|Required|Description|Data Type|\n|body|true|Resource set description JSON object|\nResourceSet\n|\n- path\n\n\n|Parameter|Required|Description|Data Type|\n|rsid|true|Resource set description ID|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n401|\n        \nUnauthorized|\n    \n\n\n\n\n\n\n/host/rsrc/resource_set\n#\n\n\ngetResourceSetList\n\nGET**\n/host/rsrc/resource_set\n\n\nLists all previously registered resource set identifiers for this user\nusing the GET method. The authorization server MUST return the list in\nthe form of a JSON array of {rsid} string values.\n\n\nThe resource server uses this method as a first step in checking whether\nits understanding of protected resources is in full synchronization with\nthe authorization server's understanding.\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set\n\n\nParameters\n\n- query\n\n\n|Parameter|Required|Description|Data Type|\n|scope|false|Scope uri|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\nResourceSet\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n401|\n        \nUnauthorized|\n    \n\n\n\n\n\n\ncreateResourceSet\n\nPOST**\n/host/rsrc/resource_set\n\n\nAdds a new resource set description using the POST method. If the\nrequest is successful, the authorization server MUST respond with a\nstatus message that includes an _id property.\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set\n\n\nParameters\n\n- body\n\n\n|Parameter|Required|Description|Data Type|\n|body|true|Resource set description|\nResourceSet\n|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n        \n\n            \n401|Unauthorized|\n        \n\n\n\n\n\n\nunsupportedHeadMethod\n\nHEAD**\n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set\n\n\nParameters\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n\n\n\n\n\nunsupportedOptionsMethod\n\nOPTIONS**\n/host/rsrc/resource_set\n\n\nNot allowed\n\n\nURL\n\n    http://gluu.org/host/rsrc/resource_set\n\n\nParameters\n\n\nResponse\n\n\n\n\nErrors\n\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n\n\n\n\n\nData Types\n#\n\n\nResourceSet\n#\n\n\n\n    \n\n        \ntype|\nrequired|\naccess|\ndescription|\nnotes|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nArray[string]|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n    \n\n        \nstring|\n        \noptional|\n        \n-|\n        \n-|\n        \n-|\n    \n\n\n\n\n\nAPI Document\n#\n\n\n/rpt/status\n#\n\n\nOverview\n#\n\n\n/rpt/status\n#\n\n\nrequestRptStatusGet\n\nGET**\n/rpt/status\n\n\nNot allowed\n\n\nURL\n\n    http://gluu.org/rpt/status\n\n\nParameters\n\n- form\n\n\n|Parameter|Required|Description|Data Type|\n|token|false||string|\n|token_type_hint|false||string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nErrors\n**\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n405|\n        \nIntrospection of RPT is not allowed by GET HTTP method.|\n    \n\n\n\n\n\n\nrequestRptStatus\n\nPOST**\n/rpt/status\n\n\nThe resource server MUST determine a received RPT's status, including\nboth whether it is active and, if so, its associated authorization data,\nbefore giving or refusing access to the client. An RPT is associated\nwith a set of authorization data that governs whether the client is\nauthorized for access. \n\n\nThe token's nature and format are dictated by its profile. The profile\nmight allow it to be self-contained, such that the resource server is\nable to determine its status locally, or might require or allow the\nresource server to make a run-time introspection request of the\nauthorization server that issued the token.\n\n\nThe endpoint MAY allow other parameters to provide further context to\nthe query. For instance, an authorization service may need to know the\nIP address of the client accessing the protected resource in order to\ndetermine the appropriateness of the token being presented.\n\n\nTo prevent unauthorized token scanning attacks, the endpoint MUST also\nrequire some form of authorization to access this endpoint, such as\nclient authentication as described in OAuth 2.0 [RFC6749] or a separate\nOAuth 2.0 access token such as the bearer token described in OAuth 2.0\nBearer Token Usage [RFC6750]. The methods of managing and validating\nthese authentication credentials are out of scope of this specification.\n\n\nURL\n\n    http://gluu.org/rpt/status\n\n\nParameters\n\n- form\n\n\n|Parameter|Required|Description|Data Type|\n|token|true|The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint as defined\nin OAuth 2.0 [RFC6749] section 5.1. For refresh tokens, this is the\n\"refresh_token\" value returned from the token endpoint as defined in\nOAuth 2.0 [RFC6749] section 5.1. Other token types are outside the scope\nof this specification.|string|\n|token_type_hint|false|A hint about the type of the token submitted for\nintrospection. The protected resource MAY pass this parameter in order\nto help the authorization server to optimize the token lookup. If the\nserver is unable to locate the token using the given hint, it MUST\nextend its search across all of its supported token types. An\nauthorization server MAY ignore this parameter, particularly if it is\nable to detect the token type automatically. Values for this field are\ndefined in OAuth Token Revocation [RFC7009].|string|\n- header\n\n\n|Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n\n\nErrors\n**\n\n\n    \n\n        \nStatus Code|\nReason|\n    \n\n    \n\n        \n401|\n        \nUnauthorized|",
            "title": "Gluu Server APIs"
        },
        {
            "location": "/admin-guide/api/#id-generation-api-document",
            "text": "This document outlines the API for ID Generation for Gluu Server.",
            "title": "ID Generation API Document"
        },
        {
            "location": "/admin-guide/api/#path",
            "text": "/id  Overview #  The API convention is set as  id  followed by  prefix  and  type  or  /id/{prefix}/{type}/ .\nPlease se the following table to specify what type you are generating. The  prefix  is used in the \ninum to make it possible to know the type of object just by looking at the identifier.     prefix  type  description      0000  people  Person object    0001  organization  Organization object    0002  appliance  Appliance object    0003  group  Group object    0004  server  Server object    0005  attribute  User attribute (claim) object    0006  tRelationship  SAML Trust Relationship object    0008  client  OAuth2 Client object    0009  scope  OAuth2 Scope Object    0010  uma-resource-set  UMA Resource Set Object    0011  interception-script  Gluu Server interception script object    0012  sector-identifier  Managed Sector Identifier URI     generateJsonInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/  Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string      header   |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  String[Response]  generateHtmlInum GET** /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string    - header           Parameter  Required  Description  Data Type      Authorization  false  The authorization sent as a String  string     Response  String[Response]  Errors  generateTextInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  string     type  true  string       header      Parameter  Required  Description  Data Type      Authorization  false  string      Response  String[Response]  Errors  generateXmlInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string    - header           Parameter  Required  Description  Data Type      Authorization  false  string      Response  String[Response]  Errors  \n     \n         Status Code| Reason|\n        generateHtmlInum  GET /id/{prefix}/{type}/  Generates ID for given prefix and type.  URL \n    http://gluu.org/id/{prefix}/{type}/ Parameters \n- path     Parameter  Required  Description  Data Type      prefix  true  Prefix for id. E.g. if prefix is @!1111 and server will generate id: !0000 then ID returned by service would be: @!1111!0000  string    type  true  Type of id  string    - header           Parameter  Required  Description  Data Type      Authorization  false  string      Response  String[Response]  Errors  \n     \n         Status Code| Reason|",
            "title": "Path"
        },
        {
            "location": "/admin-guide/api/#openid-connect-authorization-grant",
            "text": "This page provides an interface for request authorization through REST web services.",
            "title": "OpenId Connect Authorization Grant"
        },
        {
            "location": "/admin-guide/api/#path_1",
            "text": "/oxauth/authorize  requestAuthorizationGet #  GET /oxauth/authorize  The Authorization Endpoint performs Authentication of the end-user. This is done by sending the User Agent to the Authorization Server's Authorization Endpoint for Authentication and Authorization, using request parameters defined by OAuth 2.0 and additional parameters and parameter values defined by OpenID Connect.  URL #  http://<hostname of Gluu Server>/oxauth/authorize  Parameters #     Parameter  Required  Description  Data Type      scope  true  OpenID Connect requests MUST contain the openid scope value  string    response_type  true  OAuth 2.0 Response Type value that determines the authorization processing flow to be used,  including what parameters are returned from the endpoints used. When using the Authorization  Code Flow, this value is code  string    client_id  true  OAuth 2.0 Client Identifier valid at the Authorization Server.  string    redirect_uri  true  Redirection URI to which the response will be sent. This URI MUST exactly match one of the  Redirection URI values for the Client pre-registered at the OpenID Provider  string    state  false  Opaque value used to maintain state between the request and the callback.  Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding  the value of this parameter with a browser cookie.  string    response_mode  false  This parameter informs the authorization server about the mechanism to be used to return  parameters from the authorization endpoint. This is not recommended if the default for  response_type is requested.  string    nonce  false  String value used to associate a Client session with an ID Token, and to mitigate replay attacks.  The value is passed through unmodified from the Authorization Request to the ID Token.  Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing  values.  string    display  false  ASCII string value that specifies how the Authorization Server displays the authentication  and consent user  interface pages to the end-user. The defined values are: page, popup, touch, wap  string    prompt  false  Space delimited, case sensitive list of ASCII string values that specifies whether the  Authorization Server prompts the end-user for re-authentication and consent.  The defined values are: none, login, consent, select_account  string    max_age  false  Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last  time the end-user was actively authenticated by the OP. If the elapsed  time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user.  (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE]  max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an  auth_time Claim Value.  int    ui_locales  false  end-user's preferred languages and scripts for the user interface, represented as a space-separated  list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken  in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested  locales are not supported by the OpenID Provider.  string    id_token_hint  false  ID Token previously issued by the Authorization Server being passed as a hint about the end-user's  current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization  Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none  is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present.  The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.  string    login_hint  false  Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary).  This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered  authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the  phone_number Claim. The use of this parameter is left to the OP's discretion.  string    acr_values  false  Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the  Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The  Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a  Voluntary Claim by this parameter.  string    amr_values  false  AMR Values  string    request  false  This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally  signed and/or encrypted. The parameter value is a Request Object value, as specified in Section 6.1. It represents the request as a JWT whose Claims are the  request parameters.  string    request_uri  false  This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri  value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.  string    request_session_state  false  Request session state  string    sessionState  false  This is an optional parameter  string    accessToken  false  This parameter is optinal and carries the access token for the request.  string    origin_headers  false  This optional token is used in custom workflows.  string    codeChallange  false  This parameter allows the code to be challanced using PKCE.  string    codeChallangeMethod  false  This parameter allows the use of PKCE to challange code.  string    httpRequest  false  This is an optional parameter  string    securityContext  false  This is an injectable interface that provides access to security related information.  string      query   \n         \n             Parameter|Required|Description|Data Type|\n|response_mode|false|Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.|string|\n           Response #  JSON[Response]  Errors #  \n     \n         Status Code| Reason|\n     \n         \n             302|interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. |\n         \n         \n             302|login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. |\n         \n         \n             302|account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. |\n         \n         \n             302|consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. |\n         \n         \n             302|invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. |\n         \n         \n             302|invalid_request_object\n    The request parameter contains an invalid Request Object. |\n         \n         \n             302|request_not_supported\n    The OP does not support use of the request parameter|\n         \n         \n             302|request_uri_not_supported\n    The OP does not support use of the request_uri parameter|\n         \n         \n             302|registration_not_supported\n    The OP does not support use of the registration parameter|\n         \n         \n             400|The request parameters contain an invalid option, e.g. an unusual grant type.|\n         \n         \n             401|The request could not be authenticated using the client_id and client_secret.|\n         \n         \n             500|Either an internal server error occurred (e.g. opendj server is down), or the username and password \n                do not match any known user.\n            |\n           requestAuthorizationPost #  POST /oxauth/authorize  Performs authorization.\nThe Authorization Endpoint performs Authentication of the end-user.  URL #  http://<hostname of Gluu Server>/oxauth/authorize  Parameters #  \n         \n             Parameter|Required|Description|Data Type|\n|scope|true|OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.|string|\n|response_type|true|OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used. When using the Authorization Code Flow, this value is code.|string|\n|client_id|true|OAuth 2.0 Client Identifier valid at the Authorization Server.|string|\n|redirect_uri|true|Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider|string|\n|state|false|Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.|string|\n|response_mode|false|Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint. This use of this parameter is NOT RECOMMENDED when the Response Mode that would be requested is the default mode specified for the Response Type.|string|\n|nonce|false|String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authorization Request to the ID Token. Sufficient entropy MUST be present in the nonce values used to prevent attackers from guessing values.|string|\n|display|false|ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end-user. The defined values are: page, popup, touch, wap|string|\n|prompt|false|Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the end-user for re-authentication and consent. The defined values are: none, login, consent, select_account|string|\n|max_age|false|Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated by the OP. If the elapsed time is greater than this value, the OP MUST attempt to actively re-authenticate the end-user. (The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used, the ID Token returned MUST include an auth_time Claim Value.|int|\n|ui_locales|false|end-user's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.|string|\n|id_token_hint|false|ID Token previously issued by the Authorization Server being passed as a hint about the end-user's current or past authenticated session with the Client. If the end-user identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response; otherwise, it SHOULD return an error, such as login_required. When possible, an id_token_hint SHOULD be present when prompt=none is used and an invalid_request error MAY be returned if it is not; however, the server SHOULD respond successfully when possible, even if it is not present. The Authorization Server need not be listed as an audience of the ID Token when it is used as an id_token_hint value.|string|\n|login_hint|false|Hint to the Authorization Server about the login identifier the end-user might use to log in (if necessary). This hint can be used by an RP if it first asks the end-user for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. It is RECOMMENDED that the hint value match the value used for discovery. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is left to the OP's discretion.|string|\n|acr_values|false|Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in section 2. The acr Claim is requested as a Voluntary Claim by this parameter.|string|\n|amr_values|false|AMR Values|string|\n|request|false|This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value, as specified in section 6.1. It represents the request as a JWT whose Claims are the request parameters.|string|\n|request_uri|false|This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.|string|\n|request_session_state|false|Request session state|string|\n|session_state|false|Session state of this call|string|\n|access_token|false|Access token|string|\n|origin_headers|false|Origin headers. Used in custom workflows.|string|\n         \n     \n         code_challange|\n         false|\n         PKCE Code challange|\n         string|\n     \n     \n         code_challange_method|\n         false|\n         PKCE code challange method|\n         string|\n       Response #  JSON[Response]  Errors #  \n     \n         Status Code| Reason|\n     \n         \n             302|interaction_required\n    The Authorization Server requires end-user interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user interaction. |\n         \n         \n             302|login_required\n    The Authorization Server requires end-user authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user authentication. |\n         \n         \n             302|account_selection_required\n    The end-user is REQUIRED to select a session at the Authorization Server. The end-user MAY be authenticated at the Authorization Server with different associated accounts, but the end-user did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use. |\n         \n         \n             302|consent_required\n    The Authorization Server requires end-user consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for end-user consent. |\n         \n         \n             302|invalid_request_uri\n    The request_uri in the Authorization Request returns an error or contains invalid data. |\n         \n         \n             302|invalid_request_object\n    The request parameter contains an invalid Request Object. |\n         \n         \n             302|request_not_supported\n    The OP does not support use of the request parameter|\n         \n         \n             302|request_uri_not_supported\n    The OP does not support use of the request_uri parameter|\n         \n         \n             302|registration_not_supported\n    The OP does not support use of the registration parameter|",
            "title": "Path"
        },
        {
            "location": "/admin-guide/api/#api-for-oxauth-clientinfo",
            "text": "This document provides interface for Client Info REST web services.",
            "title": "API for oxAuth Clientinfo"
        },
        {
            "location": "/admin-guide/api/#path_2",
            "text": "/oxauth/clientinfo",
            "title": "Path"
        },
        {
            "location": "/admin-guide/api/#overview_1",
            "text": "The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the registered client.  clientinfoGet #     Parameter  Description  Data Type      access_token  The access token for oxAuth  string    authorization  The authorization for the client  string    securityContext  Injectable interface providing access to security info  context     clientinfoPost #     Parameter  Description  Data Type      access_token  The access token for oxAuth  string    authorization  The authorization for the client  string    securityContext  Injectable interface providing access to security info  context",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/api/#api-document",
            "text": "/oxauth #  Overview #  /oxauth/end_session #  requestEndSession GET** /oxauth/end_session  End current Connect session.\nEnd current Connect session.  URL \n    http://gluu.org/oxauth/end_session Parameters \n- query     Parameter  Required  Description  Data Type      post_logout_redirect_uri  false  URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.  string    state  false  Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.  string    session_id  false  Session ID  string     Response  JSON[Response]  Errors  \n     \n         Status Code| Reason|\n     \n         \n             400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n         \n         \n             400|invalid_grant\nThe provided access token is invalid, or was issued to another client.|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#api-document_1",
            "text": "",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#oxauth_1",
            "text": "",
            "title": "/oxauth"
        },
        {
            "location": "/admin-guide/api/#overview_3",
            "text": "Any OpenID Client needs to register with the OpenID Provider to utilize OpenID Services, in this case register a user, and acquire a client ID and a shared secret.",
            "title": "Overview"
        },
        {
            "location": "/admin-guide/api/#oxauthregister",
            "text": "registerPost #  POST /oxauth/register  Registers new dynamic client in oxAuth.  URL #  http://gluu.org/oxauth/register  Parameters #     Parameter  Description      redirect_uris  Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request    response_types  A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token    grant_types  A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are: authorization_code The Authorization Code Grant Type implicit The Implicit Grant Type refresh_token The Refresh Token Grant Type The following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list: code: authorization_code id_token: implicit token id_token: implicit code id_token: authorization_code, implicit code token: authorization_code, implicit code token id_token: authorization_code, implicit    application_type  Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type must only register URLs using the https scheme as redirect_uris; they must not use localhost as the hostname. Native Clients must only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname.    contacts  e-mail addresses of people responsible for this Client.    client_name  Name of the Client to be presented to the End-User.    logo_uri  URL that references a logo for the Client application. If present, the server displays this image to the End-User during approval. The value of this field must point to a valid image file.    client_uri  URL of the home page of the Client. The value of this field must point to a valid Web page. If present, the server displays this URL to the End-User in a followable fashion.    policy_uri  URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.    tos_uri  URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service. The value of this field must point to a valid web page. The OpenID Provider displays this URL to the End-User if it is given.    jwks_uri  URL for the Client's JSON Web Key Set (JWK) document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set may also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is not recommended, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values must still be present and must match those in the certificate.    jwks  Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does). The jwks_uri and jwks parameters must not be used together.    sector_identifier_uri  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. Providers that use pairwise sub (subject) values utilizes the sector_identifier_uri value provided in the Subject Identifier calculation for pairwise identifiers.    subject_type  subject_type requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include pairwise and public.    id_token_signed_response_alg  JWS alg algorithm (JWA) required for signing the ID Token issued to this Client. The value none must not be used as the ID Token alg value unless the Client uses only Response Types that return no ID Token from the Authorization Endpoint (such as when only using the Authorization Code Flow). The default, if omitted, is RS256. The public key for validating the signature is provided by retrieving the JWK Set referenced by the jwks_uri element from OpenID Connect Discovery.    id_token_encrypted_response_alg  JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client. If this is requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.    id_token_encrypted_response_enc  JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client. If id_token_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc is included, id_token_encrypted_response_alg must also be provided.    userinfo_signed_response_alg  JWS alg algorithm (JWA) required for signing UserInfo Responses. If this is specified, the response will be JWT serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.    userinfo_encrypted_response_alg  JWE alg algorithm (JWA) required for encrypting UserInfo Responses. If both signing and encryption are requested, the response will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that no encryption is performed.    userinfo_encrypted_response_enc  JWE enc algorithm (JWA) required for encrypting UserInfo Responses. If userinfo_encrypted_response_alg is specified, the default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc is included, userinfo_encrypted_response_alg must also be provided.    request_object_signing_alg  JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP. All Request Objects from this Client are rejected, if not signed with this algorithm. This algorithm is used both when the Request Object is passed by value (using the request parameter) and when it is passed by reference (using the request_uri parameter). The value none may be used. The default, if omitted, is that any algorithm supported by the OP and the RP may be used.    request_object_encryption_alg  JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. This parameter should be included when symmetric encryption will be used, since this signals to the OP that a client_secret value needs to be returned from which the symmetric key will be derived, that might not otherwise be returned. The RP may still use other supported encryption algorithms or send unencrypted Request Objects, even when this parameter is present. If both signing and encryption are requested, the Request Object will be signed then encrypted, with the result being a Nested JWT. The default, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.    request_object_encryption_enc  JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP. If request_object_encryption_alg is specified, the default for this value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg must also be provided.    token_endpoint_auth_method  Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, client_secret_jwt, private_key_jwt, and none. If omitted, the default is client_secret_basic, the HTTP Basic Authentication Scheme.    token_endpoint_auth_signing_alg  JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods. All Token Requests using these authentication methods from this Client are rejected, if the JWT is not signed with this algorithm. The value none must not be used. The default, if omitted, is that any algorithm supported by the OP and the RP MAY be used.    default_max_age  Default Maximum Authentication Age. Specifies that the End-User must be actively authenticated if the End-User was authenticated longer ago than the specified number of seconds. The max_age request parameter overrides this default value. If omitted, no default Maximum Authentication Age is specified.    require_auth_time  Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true. (If this is false, the auth_time Claim can still be dynamically requested as an individual Claim for the ID Token using the claims request parameter) If omitted, the default value is false.    default_acr_values  Default requested Authentication Context Class Reference values. Array of strings that specifies the default acr values that the OP is being requested to use for processing requests from this Client, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value in the issued ID Token. The acr Claim is requested as a Voluntary Claim by this parameter. The acr_values_supported discovery element contains a list of the supported acr values supported by this server. Values specified in the acr_values request parameter or an individual acr Claim request override these default values.    initiate_login_uri  URI using the https scheme that a third party can use to initiate a login by the RP. The URI must accept requests via both GET and POST. The Client must understand the login_hint and iss parameters and should support the target_link_uri parameter.    request_uris  request_uri values that are pre-registered by the RP for use at the OP. The Servers cache the contents of the files referenced by these URIs and not retrieve them at the time they are used in a request. OPs can require that request_uri values used be pre-registered with the require_request_uri_registration discovery parameter. If the contents of the request file could ever change, these URI values should include the base64url encoded SHA-256 hash value of the file contents referenced by the URI as the value of the URI fragment. If the fragment value used for a URI changes, that signals the server that its cached value for that URI with the old fragment value is no longer valid.     Response #  Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]  Errors #  \n     \n         Status Code| Reason|\n     \n     \n             400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n         \n         \n             401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n         \n         \n             403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n         \n     \n         302|\n         access_denies The request is denied by the authorization server.|\n       registerPut #  PUT /oxauth/register  This operation updates the Client Metadata for a registered client.  URL #  http://gluu.org/oxauth/register  Parameters #  The request is sent as an  HTTP POST  to the client registration endpoint as JSON with the parameters.     Parameter  Description      clientId  The unique client identifier usually INUM    authorization  The authorization for the client    httpRequest  The HTTP Request object    securityContext  Injectable interface providing access to security info     Response #  Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]  Errors #  \n     \n         Status Code| Reason|\n     \n         \n             400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n         \n         \n             401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n         \n         \n             403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n         \n         \n             302|access_denies The request is denied by the authorization server.|\n           registerGet #  GET /oxauth/register  This operation retrieves the Client Metadata for a previously registered client.  URL #  http://gluu.org/oxauth/register  Parameters #  The request is sent as an  HTTP POST  to the client registration endpoint as JSON with the parameters.     Parameter  Description      clientId  The unique client identifier usually INUM    securityContext  injectable interface that provides access to security related info.     Response #  Client Identificator or INUM, a client shared secret and the account expiration date in a [JSON[Response]]  Errors #  \n     \n         Status Code| Reason|\n     \n         \n             400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n         \n         \n             401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n         \n         \n             403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n         \n         \n             302|access_denies The request is denied by the authorization server.|",
            "title": "/oxauth/register"
        },
        {
            "location": "/admin-guide/api/#api-document_2",
            "text": "/oxauth #  Overview #  /oxauth/token #  requestAccessToken POST** /oxauth/token  To obtain an Access Token, an ID Token, and optionally a Refresh Token,\nthe RP (Client) sends a Token Request to the Token Endpoint to obtain a\nToken Response.  URL \n    http://gluu.org/oxauth/token Parameters \n- form  |Parameter|Required|Description|Data Type|\n|grant_type|true|Grant type value, one of these: authorization_code, implicit, password, client_credentials, refresh_token as described in OAuth 2.0 [RFC6749].|string|\n|code|false|Code which is returned by authorization endpoint (For\ngrant_type=authorization_code).|string|\n|redirect_uri|false|Redirection uri to which the response will be sent. This\nuri MUST exactly match one of the redirection uri values for the client\npre-registered at the OpenID Provider.|string|\n|username|false|End-User username.|string|\n|password|false|End-User password.|string|\n|scope|false|OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present. Scope values used that are not understood by an implementation SHOULD be ignored.|string|\n|assertion|false|Assertion.|string|\n|refresh_token|false|Refresh token.|string|\n|oxauth_exchange_token|false|oxauth_exchange_token.|string|\n|client_id|false|OAuth 2.0 Client Identifier valid at the Authorization Server.|string|\n|client_secret|false|The client secret. The client MAY omit the parameter if the client secret is an empty string.|string|  Response  JSON[Response]  Errors  \n     \n         Status Code| Reason|\n     \n         \n             400|invalid_request\n The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials,\n utilizes more than one mechanism for authenticating the client, or is otherwise malformed.|\n         \n         \n             400|invalid_client\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate\nwhich HTTP authentication schemes are supported. If the client attempted to authenticate via the \"Authorization\"\nrequest header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and\ninclude the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.|\n         \n         \n             400|invalid_grant\n The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is\n invalid, expired, revoked, does not match the redirection uri used in the authorization request, or was issued to another client.|\n         \n         \n             400|unauthorized_client\nThe authenticated client is not authorized to use this authorization grant type.|\n         \n         \n             400|unsupported_grant_type\nThe authorization grant type is not supported by the authorization server.|\n         \n         \n             400| invalid_scope\nThe requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_1",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#api-document_3",
            "text": "/oxauth #  Overview #  /oxauth/userinfo #  requestUserInfoPost POST** /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL \n    http://gluu.org/oxauth/userinfo Parameters \n- form  |Parameter|Required|Description|Data Type|\n|access_token|true|OAuth 2.0 Access Token.|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  JSON[Response]  Errors  \n     \n         Status Code| Reason|\n     \n         \n             400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed.  The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n         \n         \n             401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons.  The resource SHOULD respond with the HTTP 401 (Unauthorized) status code.  The client MAY request a new access token and retry the protected resource request.|\n         \n         \n             403|insufficient_scope\nThe request requires higher privileges than provided by the access token.  The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|\n            requestUserInfoGet GET** /oxauth/userinfo  Returns Claims about the authenticated End-User.\nThe Access Token obtained from an OpenID Connect Authentication Request is sent as a Bearer Token.  URL \n    http://gluu.org/oxauth/userinfo Parameters \n- query  |Parameter|Required|Description|Data Type|\n|access_token|true|OAuth 2.0 Access Token.|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  JSON[Response]  Errors  \n     \n         Status Code| Reason|\n     \n         \n             400|invalid_request\nThe request is missing a required parameter, includes an unsupported parameter or parameter value, repeats the same parameter, uses more than one method for including an access token, or is otherwise malformed. The resource server SHOULD respond with the HTTP 400 (Bad Request) status code.|\n         \n         \n             401|invalid_token\nThe access token provided is expired, revoked, malformed, or invalid for other reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status code. The client MAY request a new access token and retry the protected resource request.|\n         \n         \n             403|insufficient_scope\nThe request requires higher privileges than provided by the access token. The resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY include the \"scope\"\n attribute with the scope necessary to access the protected resource.|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_2",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#scim-11",
            "text": "SCIM 1.1 Specifications #  You can see the detailed SCIM 1.1 specification documents here .  SCIM 1.1 Endpoints #   User Endpoint  Group Endpoint  Bulk Operation Endpoint",
            "title": "SCIM 1.1"
        },
        {
            "location": "/admin-guide/api/#user-endpoint",
            "text": "/seam/resource/restv1/Users #   getUser GET** /host/seam/resource/restv1/scim/v1/Users{rsid}  Returns a user on the basis of provided id as path parameter. The\nresource MUST be already registered with the mentioned id.  URL \n    http://gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}  Request Parameters** \n- Following are the details about parameters:\n|Parameter|Location|\n         Required|Description|Data Type|\n|rsid|\n         path|\n         TRUE|Resource set description ID|string|\n         \n     \n             Authorization|\n         header|\n         FALSE||string|  Response  Content Type:  application/json, application/xml  **Success\n-    \n         \n             Status Code|\n             Reason|\n             Description|\n         \n         \n             200|\n             Successful Operation|\n             Resource returned successfully|\n         \n      Errors \n-    \n         \n             Status Code|\n             Reason|\n             Description|\n         \n         \n             400|\n             BAD REQUEST|\n             Request cannot be parsed, is syntactically incorrect, or violates schema.|\n         \n         \n             401|\n             UNAUTHORIZED|\n             Authorization header is invalid or missing.|\n         \n         \n             403|\n             FORBIDDEN|\n             Operation is not permitted based on the supplied\nauthorization.|\n         \n         \n             404|\n             NOT FOUND|\n             Specified user does not exist.|",
            "title": "User Endpoint"
        },
        {
            "location": "/admin-guide/api/#group-endpoint",
            "text": "/seam/resource/restv1/Groups #   getGroup GET** /host/seam/resource/restv1/scim/v1/Groups{rsid}  Returns a group on the basis of the provided id as a path parameter. The\ngroup MUST be already registered with the mentioned id.  URL \n    http://gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}  Request Parameters** \n- Following are the details about parameters:\n|Parameter|Location|\n         Required|Description|Data Type|\n|rsid|\n         path|\n         TRUE|Resource set description ID.|string|\n         \n     \n             Authorization|\n         header|\n         FALSE||string|  Response  Content Type:  application/json, application/xml  **Success\n-    \n         \n             Status Code|\n             Reason|\n             Description|\n         \n         \n             200|\n             Successful Operation|\n             Group returned successfully.|\n         \n      Errors \n-    \n         \n             Status Code|\n             Reason|\n             Description|\n         \n         \n             400|\n             Bad Request|\n             Request cannot be parsed, is syntactically incorrect, or violates schema.|\n         \n         \n             401|\n             Unauthorized|\n             Authorization header is invalid or missing.|\n         \n         \n             403|\n             Forbidden|\n             Operation is not permitted based on the supplied authorization.|\n         \n         \n             404|\n             Not Found|\n             Specified user does not exist.|",
            "title": "Group Endpoint"
        },
        {
            "location": "/admin-guide/api/#bulk-operation-endpoint",
            "text": "/seam/resource/restv1/scim/v1/Bulk #   Bulk Operation  SCIM Bulk Operation enables consumers to work with a potentially large\ncollection (bulk) of Resource operations in a single request. A body of\na bulk operation may contain a set of HTTP Resource operations using one\nof the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE.\n(see http://www.simplecloud.info/specs/draft-scim-api-01.html#bulk-resources\nfor more details.)  Security #   Authorization   Request #  Content-Type: application/json, application/xml  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         no|\n         |\n          - |\n         string |\n     \n     \n         body| body|\n         no|\n         BulkRequest|\n          - |\n         BulkRequest |\n       Response #  Content-Type:  application/json, application/xml     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/admin-guide/api/#definitions",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/admin-guide/api/#bulkoperation",
            "text": "name| type| required| description| example|\n     \n\n         \n             bulkId|string|optional|-||\n         \n\n         \n             version|string|optional|-||\n         \n\n         \n             method|string|optional|-||\n         \n\n         \n             path|string|optional|-||\n         \n\n         \n             location|string|optional|-||\n         \n\n         \n             data|object|optional|-||\n         \n\n         \n             status|string|optional|-||\n         \n\n         \n             response|object|optional|-||",
            "title": "BulkOperation"
        },
        {
            "location": "/admin-guide/api/#bulkrequest",
            "text": "name| type| required| description| example|\n     \n\n         \n             schemes|array[string]|optional|-||\n         \n\n         \n             failOnErrors|integer (int32)|optional|-||\n         \n\n         \n             operations|array[ BulkOperation ]|optional|-||",
            "title": "BulkRequest"
        },
        {
            "location": "/admin-guide/api/#bulkresponse",
            "text": "name| type| required| description| example|\n     \n\n         \n             schemes|array[string]|optional|-||\n         \n\n         \n             operations|array[ BulkOperation ]|optional|-||",
            "title": "BulkResponse"
        },
        {
            "location": "/admin-guide/api/#scim-20",
            "text": "SCIM 2.0 Specifications #  You can see the detailed SCIM 2.0 specification documents here:  System for Cross-domain Identity Management: Core Schema  System for Cross-domain Identity Management: Protocol  SCIM 2.0 Endpoints #   User Endpoint  Group Endpoint  Bulk Operation Endpoint   SCIM 2.0 Definitions #   Definitions",
            "title": "SCIM 2.0"
        },
        {
            "location": "/admin-guide/api/#user-endpoint_1",
            "text": "URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Users  GET #  Search Users  - searches users based on filter criteria  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         filter| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         startIndex| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         count| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         sortBy| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         sortOrder| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST #  Create User  - creates a user  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         body| body|\n         yes|\n         User|\n          - |\n         User |\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  User     URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}  GET #  Find User By ID  - returns a user by id as path parameter  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         id| path|\n         yes|\n         LDAP 'inum' of user|\n          - |\n         string|\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/scim     Status Code  Reason  Response Model      200  successful operation  User     PUT #  Update User  - updates a user  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         id| path|\n         yes|\n         LDAP 'inum' of user|\n          - |\n         string|\n     \n     \n         body| body|\n         yes|\n         User|\n          - |\n         User |\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  User     DELETE #  Delete User  - deletes a user  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         id| path|\n         yes|\n         LDAP 'inum' of user|\n          - |\n         string|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -     URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Users/Search  POST #  Search Users  ( Deprecated )  - searches users by HTTP POST  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         body| body|\n         yes|\n         |\n          - |\n         ScimPersonSearch|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse",
            "title": "User Endpoint"
        },
        {
            "location": "/admin-guide/api/#group-endpoint_1",
            "text": "URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Groups  GET #  Search Groups  - searches groups based on filter criteria  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         filter| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         startIndex| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         count| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         sortBy| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         sortOrder| query|\n         no|\n         |\n          - |\n         string|\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST #  Create Group  - creates a group  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         body| body|\n         yes|\n         Group|\n          - |\n         Group |\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  Group     URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}  GET #  Find Group By ID  - returns a group by id as path parameter  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         id| path|\n         yes|\n         LDAP 'inum' of group|\n          - |\n         string|\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     PUT #  Update Group  - updates a group  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         id| path|\n         yes|\n         LDAP 'inum' of group|\n          - |\n         string|\n     \n     \n         body| body|\n         yes|\n         Group|\n          - |\n         Group |\n     \n     \n         attributes| query|\n         no|\n         |\n          - |\n         string array|\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     DELETE #  Delete Group  - deletes a group  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         id| path|\n         yes|\n         LDAP 'inum' of the group|\n          - |\n         string |\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -",
            "title": "Group Endpoint"
        },
        {
            "location": "/admin-guide/api/#bulk-operation-endpoint_1",
            "text": "URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Bulk  POST #  Bulk Operations  - bulk operations  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type: application/scim+json ,  application/json  Parameters  \n     \n         Name| Located in| Required| Description| Default| Schema|\n     \n     \n         Authorization| header|\n         yes (default)|\n         |\n          - |\n         string|\n     \n     \n         access_token| query|\n         yes (if \"Test Mode\" is enabled)|\n         |\n          - |\n         string|\n     \n     \n         body| body|\n         yes|\n         BulkRequest|\n          - |\n         BulkRequest |\n       Response #  Content-Type: application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "Bulk Operation Endpoint"
        },
        {
            "location": "/admin-guide/api/#definitions_1",
            "text": "",
            "title": "Definitions"
        },
        {
            "location": "/admin-guide/api/#address",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         primary|\n         boolean|\n         optional|\n         -|\n         |\n     \n     \n         formatted|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         streetAddress|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         locality|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         region|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         postalCode|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         country|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         type|\n         Type |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n         string|\n         optional|\n         -|\n         |",
            "title": "Address"
        },
        {
            "location": "/admin-guide/api/#bulkoperation_1",
            "text": "name| type| required| description| example|\n     \n     \n         bulkId|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         version|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         method|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         path|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         location|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         data|\n          object |\n         optional|\n         -|\n         |\n     \n     \n         status|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         response|\n          object |\n         optional|\n         -|\n         |",
            "title": "BulkOperation"
        },
        {
            "location": "/admin-guide/api/#bulkrequest_1",
            "text": "name| type| required| description| example|\n     \n     \n         schemas|\n          array[string] |\n         optional|\n         -|\n         |\n     \n     \n         failOnErrors|\n          integer (int32) |\n         optional|\n         -|\n         |\n     \n     \n         operations|\n          array[ BulkOperation ] |\n         optional|\n         -|\n         |",
            "title": "BulkRequest"
        },
        {
            "location": "/admin-guide/api/#bulkresponse_1",
            "text": "name| type| required| description| example|\n     \n     \n         schemas|\n          array[string] |\n         optional|\n         -|\n         |\n     \n     \n         operations|\n          array[ BulkOperation ] |\n         optional|\n         -|\n         |",
            "title": "BulkResponse"
        },
        {
            "location": "/admin-guide/api/#email",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         primary|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "Email"
        },
        {
            "location": "/admin-guide/api/#entitlement",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n    \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         primary|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "Entitlement"
        },
        {
            "location": "/admin-guide/api/#group",
            "text": "name| type| required| description| example|\n     \n     \n         id|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         externalId|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         meta|\n           Meta  |\n         optional|\n         -|\n         |\n     \n     \n         schemas|\n          array[string] |\n         required|\n         -|\n         |\n     \n     \n         displayName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         members|\n          array[ MemberRef ] |\n         optional|\n         -|\n         |",
            "title": "Group"
        },
        {
            "location": "/admin-guide/api/#groupref",
            "text": "name| type| required| description| example|\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "GroupRef"
        },
        {
            "location": "/admin-guide/api/#im",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         primary|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "Im"
        },
        {
            "location": "/admin-guide/api/#listresponse",
            "text": "name| type| required| description| example|\n     \n     \n         totalResults|\n         integer (int32)|\n         optional|\n         -|\n         |\n     \n     \n         startIndex|\n         integer (int32)|\n         optional|\n         -|\n         |\n     \n     \n         itemsPerPage|\n         integer (int32)|\n         optional|\n         -|\n         |\n     \n     \n         schemas|\n         array[string]|\n         optional|\n         -|\n         |\n     \n     \n         resources|\n         array[ Resource ]|\n         optional|\n         -|\n         |",
            "title": "ListResponse"
        },
        {
            "location": "/admin-guide/api/#memberref",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "MemberRef"
        },
        {
            "location": "/admin-guide/api/#meta",
            "text": "name| type| required| description| example|\n     \n     \n         created|\n          string (date-time) |\n         optional|\n         -|\n         |\n     \n     \n         lastModified|\n          string (date-time) |\n         optional|\n         -|\n         |\n     \n     \n         location|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         version|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         attributes|\n          array[string] |\n         optional|\n         -|\n         |\n     \n     \n         resourceType|\n          string |\n         optional|\n         -|\n         |",
            "title": "Meta"
        },
        {
            "location": "/admin-guide/api/#name",
            "text": "name| type| required| description| example|\n     \n     \n         formatted|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         familyName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         givenName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         middleName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         honorificPrefix|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         honorificSuffix|\n          string |\n         optional|\n         -|\n         |",
            "title": "Name"
        },
        {
            "location": "/admin-guide/api/#phonenumber",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         primary|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "PhoneNumber"
        },
        {
            "location": "/admin-guide/api/#photo",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         primary|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "Photo"
        },
        {
            "location": "/admin-guide/api/#resource",
            "text": "name| type| required| description| example|\n     \n     \n         id|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         externalId|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         meta|\n         Meta |\n         optional|\n         -|\n         |\n     \n     \n         schemas|\n         array[string]|\n         required|\n         -|\n         |",
            "title": "Resource"
        },
        {
            "location": "/admin-guide/api/#role",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         value|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         display|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         primary|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         type|\n           Type  |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n          string |\n         optional|\n         -|\n         |",
            "title": "Role"
        },
        {
            "location": "/admin-guide/api/#type",
            "text": "name| type| required| description| example|",
            "title": "Type"
        },
        {
            "location": "/admin-guide/api/#user",
            "text": "name| type| required| description| example|\n     \n     \n         id|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         externalId|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         meta|\n           Meta  |\n         optional|\n         -|\n         |\n     \n     \n         schemas|\n          array[string] |\n         required|\n         -|\n         |\n     \n     \n         userName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         name|\n           Name  |\n         optional|\n         -|\n         |\n     \n     \n         displayName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         nickName|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         profileUrl|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         title|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         userType|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         preferredLanguage|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         locale|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         timezone|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         active|\n          boolean |\n         optional|\n         -|\n         |\n     \n     \n         password|\n          string |\n         optional|\n         -|\n         |\n     \n     \n         emails|\n          array[ Email ] |\n         optional|\n         -|\n         |\n     \n     \n         phoneNumbers|\n          array[ PhoneNumber ] |\n         optional|\n         -|\n         |\n     \n     \n         ims|\n          array[ Im ] |\n         optional|\n         -|\n         |\n     \n     \n         photos|\n          array[ Photo ] |\n         optional|\n         -|\n         |\n     \n     \n         addresses|\n          array[ Address ] |\n         optional|\n         -|\n         |\n     \n     \n         groups|\n          array[ GroupRef ] |\n         optional|\n         -|\n         |\n     \n     \n         entitlements|\n          array[ Entitlement ] |\n         optional|\n         -|\n         |\n     \n     \n         roles|\n          array[ Role ] |\n         optional|\n         -|\n         |\n     \n     \n         x509Certificates|\n          array[ X509Certificate ] |\n         optional|\n         -|\n         |",
            "title": "User"
        },
        {
            "location": "/admin-guide/api/#x509certificate",
            "text": "name| type| required| description| example|\n     \n     \n         operation|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         value|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         display|\n         string|\n         optional|\n         -|\n         |\n     \n     \n         primary|\n         boolean|\n         optional|\n         -|\n         |\n     \n     \n         type|\n         Type |\n         optional|\n         -|\n         |\n     \n     \n         $ref|\n         string|\n         optional|\n         -|\n         |",
            "title": "X509Certificate"
        },
        {
            "location": "/admin-guide/api/#scimpersonsearch",
            "text": "name| type| required| description| example|\n     \n     \n         attribute|\n          string |\n         required|\n         User Attribute Name|\n         Username|\n     \n     \n         value|\n          string |\n         required|\n         User Attribute Value|\n         Mike|",
            "title": "ScimPersonSearch"
        },
        {
            "location": "/admin-guide/api/#api-document_4",
            "text": "/requester/perm #  Overview #  /requester/perm #  requestRptPermissionAuthorization POST** /requester/perm  Client Requests Authorization Data\nOnce in possession of a permission ticket and an AAT for this\nauthorization server, the client asks the authorization server to give\nit authorization data corresponding to that permission ticket. It\nperforms a POST on the RPT endpoint, supplying its own AAT in the header\nand a JSON object in the body with a \"ticket\" property containing the\nticket as its value.  If the client had included an RPT in its failed access attempt, It MAY\nalso provide that RPT in an \"rpt\" property in its request to the\nauthorization server.  In circumstances where the client needs to provide requesting party\nclaims to the authorization server, it MAY also include a \"claim_tokens\"\nproperty in its request; see Section 3.4.1.2.1 for more information. The\nauthorization server uses the ticket to look up the details of the\npreviously registered requested permission, maps the requested\npermission to operative resource owner policies based on the resource\nset identifier and scopes associated with it, potentially requests\nadditional information, and ultimately responds positively or negatively\nto the request for authorization data.  The authorization server bases the issuing of authorization data on\nresource owner policies. These policies thus amount to an asynchronous\nOAuth authorization grant. The authorization server is also free to\nenable the resource owner to set policies that require the owner to\ninteract with the server in near-real time to provide consent subsequent\nto an access attempt. All such processes are outside the scope of this\nspecification.  URL \n    http://gluu.org/requester/perm  Parameters \n- body  |Parameter|Required|Description|Data Type|\n|body|false|| RptAuthorizationRequest |\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n|Host|false||string|  Response   Errors  \n     \n         Status Code| Reason|\n     \n         \n             403|Forbidden. Example of a \"need_info\" response with a full set of \"error_details\" hints:\n\nHTTP/1.1 403 Forbidden\nContent-Type: application/json\nCache-Control: no-store\n...\n\n{\n \"error\": \"need_info\",\n \"error_details\": {\n   \"authentication_context\": {\n     \"required_acr\": [\"https://example.com/acrs/LOA3.14159\"]\n   },\n   \"requesting_party_claims\": {\n     \"required_claims\": [\n       {\n         \"name\": \"email23423453ou453\",\n         \"friendly_name\": \"email\",\n         \"claim_type\": \"urn:oid:0.9.2342.19200300.100.1.3\",\n         \"claim_token_format\": \n[\"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken\"],\n         \"issuer\": [\"https://example.com/idp\"]\n       }\n     ],\n     \"redirect_user\": true,\n     \"ticket\": \"016f84e8-f9b9-11e0-bd6f-0021cc6004de\"\n   }\n }\n}\n|\n         \n         \n             401|Unauthorized|\n         \n         \n             400|Bad request|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_3",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#claimtokenlist",
            "text": "type| required| access| description| notes|\n     \n     \n         boolean|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         int|\n         optional|\n         -|\n         -|\n         -|",
            "title": "ClaimTokenList"
        },
        {
            "location": "/admin-guide/api/#rptauthorizationrequest",
            "text": "type| required| access| description| notes|\n     \n     \n         ClaimTokenList |\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|",
            "title": "RptAuthorizationRequest"
        },
        {
            "location": "/admin-guide/api/#api-document_5",
            "text": "/requester/rpt #  Overview #  /requester/rpt #  getRequesterPermissionToken POST** /requester/rpt  The endpoint at which the requester asks the AM to issue an RPT.  URL \n    http://gluu.org/requester/rpt  Parameters \n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n|Host|false||string|  Response   Errors  \n     \n         Status Code| Reason|\n     \n         \n             401|Unauthorized|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_4",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#api-document_6",
            "text": "/.well-known/uma-configuration #  Overview #  /oxauth/uma-configuration #  getConfiguration GET** /oxauth/uma-configuration  Provides configuration data as JSON document. It contains options and\nendpoints supported by the authorization server.  URL \n    http://gluu.org/oxauth/uma-configuration  Parameters  Response  UmaConfiguration  Errors  \n     \n         Status Code| Reason|\n     \n     \n         500|\n         Failed to build UMA configuration JSON object.|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_5",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#umaconfiguration",
            "text": "type| required| access| description| notes|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         required|\n         -|\n         An uri indicating the party operating the authorization server.|\n         An uri indicating the party operating the authorization server.|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         required|\n         -|\n         The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".|\n         The version of the UMA core protocol to which this authorization server conforms. The value MUST be the string \"1.0\".|",
            "title": "UmaConfiguration"
        },
        {
            "location": "/admin-guide/api/#api-document_7",
            "text": "/host/rsrc_pr #  Overview #  /host/rsrc_pr #  registerResourceSetPermission POST** /host/rsrc_pr  Registers permission using the POST method.\nThe resource server uses the POST method at the endpoint. The body of\nthe HTTP request message contains a JSON object providing the requested\npermission, using a format derived from the scope description format\nspecified in [OAuth-resource-reg], as follows. The object has the\nfollowing properties:  URL \n    http://gluu.org/host/rsrc_pr  Parameters \n- body  |Parameter|Required|Description|Data Type|\n|body|true|The identifier for a resource set to which this client is seeking access. The identifier MUST correspond to a resource set that was previously registered.| RegisterPermissionRequest |\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|\n|Host|false||string|  Response   Errors  \n     \n         Status Code| Reason|\n     \n         \n             401|Unauthorized|\n         \n         \n             400|Bad Request|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_6",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#registerpermissionrequest",
            "text": "type| required| access| description| notes|\n     \n     \n         Date|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Date|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Date|\n         optional|\n         -|\n         -|\n         -|",
            "title": "RegisterPermissionRequest"
        },
        {
            "location": "/admin-guide/api/#api-document_8",
            "text": "/host/rsrc/resource_set #  Overview #  /host/rsrc/resource_set{rsid} #  deleteResourceSet DELETE** /host/rsrc/resource_set{rsid}  Deletes a previously registered resource set description using the\nDELETE method, thereby removing it from the authorization server's\nprotection regime.  URL \n    http://gluu.org/host/rsrc/resource_set{rsid}  Parameters \n- path  |Parameter|Required|Description|Data Type|\n|rsid|true|Resource set description ID|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  ResourceSet  Errors  \n     \n         Status Code| Reason|\n     \n     \n         401|\n         Unauthorized|\n        getResourceSet GET** /host/rsrc/resource_set{rsid}  Reads a previously registered resource set description using the GET\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes a body containing the\nreferenced resource set description, along with an \"_id\" property.  URL \n    http://gluu.org/host/rsrc/resource_set{rsid}  Parameters \n- path  |Parameter|Required|Description|Data Type|\n|rsid|true|Resource set description object ID|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  ResourceSet  Errors  \n     \n         Status Code| Reason|\n     \n     \n         401|\n         Unauthorized|\n        updateResourceSet PUT** /host/rsrc/resource_set{rsid}  Updates a previously registered resource set description using the PUT\nmethod. If the request is successful, the authorization server MUST\nrespond with a status message that includes an \"_id\" property.  URL \n    http://gluu.org/host/rsrc/resource_set{rsid}  Parameters \n- body  |Parameter|Required|Description|Data Type|\n|body|true|Resource set description JSON object| ResourceSet |\n- path  |Parameter|Required|Description|Data Type|\n|rsid|true|Resource set description ID|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response   Errors  \n     \n         Status Code| Reason|\n     \n     \n         401|\n         Unauthorized|\n        /host/rsrc/resource_set #  getResourceSetList GET** /host/rsrc/resource_set  Lists all previously registered resource set identifiers for this user\nusing the GET method. The authorization server MUST return the list in\nthe form of a JSON array of {rsid} string values.  The resource server uses this method as a first step in checking whether\nits understanding of protected resources is in full synchronization with\nthe authorization server's understanding.  URL \n    http://gluu.org/host/rsrc/resource_set  Parameters \n- query  |Parameter|Required|Description|Data Type|\n|scope|false|Scope uri|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response  ResourceSet  Errors  \n     \n         Status Code| Reason|\n     \n     \n         401|\n         Unauthorized|\n        createResourceSet POST** /host/rsrc/resource_set  Adds a new resource set description using the POST method. If the\nrequest is successful, the authorization server MUST respond with a\nstatus message that includes an _id property.  URL \n    http://gluu.org/host/rsrc/resource_set  Parameters \n- body  |Parameter|Required|Description|Data Type|\n|body|true|Resource set description| ResourceSet |\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Response   Errors  \n     \n         Status Code| Reason|\n     \n         \n             401|Unauthorized|\n            unsupportedHeadMethod HEAD** /host/rsrc/resource_set  Not allowed  URL \n    http://gluu.org/host/rsrc/resource_set  Parameters  Response   Errors  \n     \n         Status Code| Reason|\n        unsupportedOptionsMethod OPTIONS** /host/rsrc/resource_set  Not allowed  URL \n    http://gluu.org/host/rsrc/resource_set  Parameters  Response   Errors  \n     \n         Status Code| Reason|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/api/#data-types_7",
            "text": "",
            "title": "Data Types"
        },
        {
            "location": "/admin-guide/api/#resourceset",
            "text": "type| required| access| description| notes|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         Array[string]|\n         optional|\n         -|\n         -|\n         -|\n     \n     \n         string|\n         optional|\n         -|\n         -|\n         -|",
            "title": "ResourceSet"
        },
        {
            "location": "/admin-guide/api/#api-document_9",
            "text": "/rpt/status #  Overview #  /rpt/status #  requestRptStatusGet GET** /rpt/status  Not allowed  URL \n    http://gluu.org/rpt/status  Parameters \n- form  |Parameter|Required|Description|Data Type|\n|token|false||string|\n|token_type_hint|false||string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Errors ** \n     \n         Status Code| Reason|\n     \n     \n         405|\n         Introspection of RPT is not allowed by GET HTTP method.|\n        requestRptStatus POST** /rpt/status  The resource server MUST determine a received RPT's status, including\nboth whether it is active and, if so, its associated authorization data,\nbefore giving or refusing access to the client. An RPT is associated\nwith a set of authorization data that governs whether the client is\nauthorized for access.   The token's nature and format are dictated by its profile. The profile\nmight allow it to be self-contained, such that the resource server is\nable to determine its status locally, or might require or allow the\nresource server to make a run-time introspection request of the\nauthorization server that issued the token.  The endpoint MAY allow other parameters to provide further context to\nthe query. For instance, an authorization service may need to know the\nIP address of the client accessing the protected resource in order to\ndetermine the appropriateness of the token being presented.  To prevent unauthorized token scanning attacks, the endpoint MUST also\nrequire some form of authorization to access this endpoint, such as\nclient authentication as described in OAuth 2.0 [RFC6749] or a separate\nOAuth 2.0 access token such as the bearer token described in OAuth 2.0\nBearer Token Usage [RFC6750]. The methods of managing and validating\nthese authentication credentials are out of scope of this specification.  URL \n    http://gluu.org/rpt/status  Parameters \n- form  |Parameter|Required|Description|Data Type|\n|token|true|The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint as defined\nin OAuth 2.0 [RFC6749] section 5.1. For refresh tokens, this is the\n\"refresh_token\" value returned from the token endpoint as defined in\nOAuth 2.0 [RFC6749] section 5.1. Other token types are outside the scope\nof this specification.|string|\n|token_type_hint|false|A hint about the type of the token submitted for\nintrospection. The protected resource MAY pass this parameter in order\nto help the authorization server to optimize the token lookup. If the\nserver is unable to locate the token using the given hint, it MUST\nextend its search across all of its supported token types. An\nauthorization server MAY ignore this parameter, particularly if it is\nable to detect the token type automatically. Values for this field are\ndefined in OAuth Token Revocation [RFC7009].|string|\n- header  |Parameter|Required|Description|Data Type|\n|Authorization|false||string|  Errors ** \n     \n         Status Code| Reason|\n     \n     \n         401|\n         Unauthorized|",
            "title": "API Document"
        },
        {
            "location": "/admin-guide/scim/",
            "text": "SCIM Endpoints\n\n\nSCIM 1.1\n\n\nEndpoint: User & Group\n\n\nExample\n\n\n\n\n\n\nEndpoint: Bulk\n\n\nDefinitions\n\n\nResponse Codes\n\n\n\n\n\n\n\n\n\n\nSCIM 2.0\n\n\nSCIM 2.0 Endpoints\n\n\nDefinitions\n\n\nAddress\n\n\nBulkOperation\n\n\nBulkRequest\n\n\nBulkResponse\n\n\nEmail\n\n\nEntitlement\n\n\nGroup\n\n\nGroupRef\n\n\nIm\n\n\nListResponse\n\n\nMemberRef\n\n\nMeta\n\n\nName\n\n\nPhoneNumber\n\n\nPhoto\n\n\nResource\n\n\nRole\n\n\nType\n\n\nUser\n\n\nX509Certificate\n\n\nScimPersonSearch\n\n\n\n\n\n\nUser Endpoint\n\n\nURL\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nURL\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nPUT\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nDELETE\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nURL\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\n\n\n\n\nGroup Endpoint\n\n\nURL\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nURL\n\n\nGET\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nPUT\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\nDELETE\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\nResponse\n\n\n\n\n\n\nBulk Operation Endpoint\n\n\nURL\n\n\nPOST\n\n\nSecurity\n\n\nRequest\n\n\nParameters\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGluu Server Community Edition supports System for Cross-domain Identity Management (SCIM) Version 1.0 and 2.0 out of the box, operated using HTTP \nGET\n and \nPOST\n commands. SCIM uses a REST API for operations which are disabled by default. The support for SCIM must be enabled from the oxTrust admin interface. \nSCIM is enabled from the Organization Configuration in the oxTrust administration interface. Please navigate to \nOrganization Configuration\n --> \nSystem Configuration\n.\n\n\n\n\nPlease navigate down the page to find \nSCIM Support\n in the \nSYstem Configuration\n page and select \nEnabled\n.\n\n\n\n\nSCIM Endpoints\n#\n\n\nSCIM uses REST API for the operations which are covered in short in this section. There are two versions of the SCIM API each with its own specification. This usage of SCIM requires advanced level knowledge of HTTP GET and POST commands and not recommended for entry level users.\n\n\nThe SCIM 1.1 is governed by the \nSCIM:Protocol 1.1\n document and SCIM 2.0 is governed by the \nSCIM:Core Schema\n & \nSCIM:Protocol\n. As it is mentioned before, the specifications define an API, the operations are performed through endpoints. There are three endpoints that are available in Gluu Server SCIM:\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nThe supported operations are given later in this document.\n\n\nSCIM 1.1\n#\n\n\nThe endpoints URLS are incomplete withour the hostname. Please use the hostname of Gluu Server Community Edition before the give URLS to make any requrest using SCIM.\n\n\n\n\n\n\n\n\nResource\n\n\nEndpoint\n\n\nOperations\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nUser\n\n\n/seam/resource/restv1/Users\n\n\nGET, POST\n\n\nRetrieve/Add/Modify Users\n\n\n\n\n\n\nGroup\n\n\n/seam/resource/restv1/Groups\n\n\nGET, POST\n\n\nRetrieve/Add/Modify Groups\n\n\n\n\n\n\nBulk\n\n\n/seam/resource/restv1/scim/v1/Bulk\n\n\nGET, POST\n\n\nBulk modify Resources\n\n\n\n\n\n\n\n\nThe endpoints are described in detail in the follwing sections. Please remember to go through the specifications before using SCIM.\n\n\nEndpoint: User & Group\n#\n\n\nThe userinfo endpoint is given above in \nSection SCIM 1.1\n. The example below shows the userinfo endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}\n\n\n\n\nThe groups endpoint is given in \nSection SCIM 1.1\n. The example below shown the groupinfo endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}\n\n\n\n\nThe following table details the request parameters to the endpoints:\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nLocation\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrsid\n\n\nstring\n\n\npath\n\n\nTRUE\n\n\nResource set description ID\n\n\n\n\n\n\nAuthorization\n\n\nstring\n\n\nheader\n\n\nFALSE\n\n\n\n\n\n\n\n\n\n\nThe response contains either JSON/XML application with a status code \n200\n if the request is successful.\n\n\nPlease see the \nResponse Code Section\n for more details.\n\n\nExample\n#\n\n\nThe following is an example to add a new user with SCIM 1.1 in \nidp.gluu.org\n using a JSON Request.\n\n\nPOST https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=\n\n\n\n\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}\n\n\n\n\nThe response is in JSON as well. The following is the expected response\n\n\n201 CREATED\nServer:  Apache-Coyote/1.1\nLocation:  https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type:  application/json\n\n\n\n\n{\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"id\":\"@!1111!0000!D4E7\",\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"Hiden for Privacy Reasons\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}\n\n\n\n\nEndpoint: Bulk\n#\n\n\nBulk endpoint allows the administrator to work with a large collection of Resources with a single request.A body of a bulk operation may contain a set of HTTP Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE. Please see the \nSCIM Specs\n for more details. \n\n\nThe example below shows the bulk operaiton endpoint for a Gluu Server with hostname \nidp.gluu.org\n:\n\n\nhttps://idp.gluu.org/seam/resource/restv1/scim/v1/Bulk\n\n\n\n\nThe following table details the request parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nLocation\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\nstring\n\n\nheader\n\n\n\n\n\n\nbody\n\n\nBulkRequest\n\n\nbody\n\n\n\n\n\n\n\n\nDefinitions\n#\n\n\nThe definitions for the bulk operation is covered in the tables below. The parametes below are all optional.\n\n\n\n\n\n\n\n\nBulkOperation\n\n\n\n\nBulkRequest\n\n\n\n\nBulkResponse\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nParameter\n\n\nData Type\n\n\nParameter\n\n\nData Type\n\n\n\n\n\n\nbulkid\n\n\nstring\n\n\nschemes\n\n\narray[string]\n\n\nschemes\n\n\narray[string]\n\n\n\n\n\n\nversion\n\n\nstring\n\n\noperations\n\n\narray[BulkOperation]\n\n\noperations\n\n\narray[BulkOperation]\n\n\n\n\n\n\nmethod\n\n\nstring\n\n\nfailOnErrors\n\n\nintegar(int32)\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocation\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresponse\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponse Codes\n#\n\n\nThis sections defines the response codes for the requests sent to the SCIM endpoints.\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nSuccessful Operation\n\n\n\n\n\n\n201\n\n\nCreated\n\n\nSuccessfully created resource\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n400\n\n\nBad Request\n\n\nRequest cannot be parsed, is syntactically incorrect, or violates schema\n\n\n\n\n\n\n401\n\n\nUnauthorized\n\n\nAuthorization header is invalid or missing\n\n\n\n\n\n\n403\n\n\nForbidden\n\n\nOperation is not permitted based on the supplied authorization\n\n\n\n\n\n\n404\n\n\nNot Found\n\n\nSpecified resource does not exist\n\n\n\n\n\n\n\n\nSCIM 2.0\n#\n\n\nThe detailed SCIM 2.0 Specifications are available at:\n\n\n\n\nSystem for Cross-domain Identity Management: Core Schema\n\n\nSystem for Cross-domain Identity Management: Protocol\n\n\n\n\nSCIM 2.0 Endpoints\n#\n\n\n\n\nUser Endpoint\n\n\nGroup Endpoint\n\n\nBulk Operation Endpoint\n\n\n\n\nDefinitions\n#\n\n\nAddress\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nformatted\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstreetAddress\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocality\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nregion\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npostalCode\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ncountry\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkOperation\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nbulkId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmethod\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npath\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndata\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstatus\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresponse\n\n        \n object \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkRequest\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfailOnErrors\n\n        \n integer (int32) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nBulkResponse\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \noperations\n\n        \n array[\nBulkOperation\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEmail\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nEntitlement\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n   \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroup\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmembers\n\n        \n array[\nMemberRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nGroupRef\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nIm\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nListResponse\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ntotalResults\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nstartIndex\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nitemsPerPage\n\n        \ninteger (int32)\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresources\n\n        \narray[\nResource\n]\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMemberRef\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nMeta\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \ncreated\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlastModified\n\n        \n string (date-time) \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nversion\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nattributes\n\n        \n array[string] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nresourceType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nName\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nformatted\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nfamilyName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngivenName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmiddleName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificPrefix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nhonorificSuffix\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoneNumber\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nPhoto\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nResource\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \nMeta\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \narray[string]\n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nRole\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \n \nType\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nType\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n\n\n\n\nUser\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nid\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nexternalId\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nmeta\n\n        \n \nMeta\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nschemas\n\n        \n array[string] \n\n        \nrequired\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nname\n\n        \n \nName\n \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplayName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nnickName\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprofileUrl\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntitle\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nuserType\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npreferredLanguage\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nlocale\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntimezone\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nactive\n\n        \n boolean \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \npassword\n\n        \n string \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nemails\n\n        \n array[\nEmail\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphoneNumbers\n\n        \n array[\nPhoneNumber\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nims\n\n        \n array[\nIm\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nphotos\n\n        \n array[\nPhoto\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \naddresses\n\n        \n array[\nAddress\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ngroups\n\n        \n array[\nGroupRef\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nentitlements\n\n        \n array[\nEntitlement\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nroles\n\n        \n array[\nRole\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nx509Certificates\n\n        \n array[\nX509Certificate\n] \n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nX509Certificate\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \noperation\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nvalue\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ndisplay\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \nprimary\n\n        \nboolean\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \ntype\n\n        \nType\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n    \n\n        \n$ref\n\n        \nstring\n\n        \noptional\n\n        \n-\n\n        \n\n    \n\n\n\n\n\nScimPersonSearch\n#\n\n\n\n    \n\n        \nname\n\n        \ntype\n\n        \nrequired\n\n        \ndescription\n\n        \nexample\n\n    \n\n    \n\n        \nattribute\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Name\n\n        \nUsername\n\n    \n\n    \n\n        \nvalue\n\n        \n string \n\n        \nrequired\n\n        \nUser Attribute Value\n\n        \nMike\n\n    \n\n\n\n\n\n\n\nUser Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users\n\n\n\nGET\n#\n\n\nSearch Users\n - searches users based on filter criteria\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n#\n\n\nCreate User\n - creates a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}\n\n\n\nGET\n#\n\n\nFind User By ID\n - returns a user by id as path parameter\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/scim\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nPUT\n#\n\n\nUpdate User\n - updates a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nUser\n\n        \n - \n\n        \nUser\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nUser\n\n\n\n\n\n\n\n\nDELETE\n#\n\n\nDelete User\n - deletes a user\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of user\n\n        \n - \n\n        \nstring\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Users/Search\n\n\n\nPOST\n#\n\n\nSearch Users\n (\nDeprecated\n)\n - searches users by HTTP POST\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \n\n        \n - \n\n        \nScimPersonSearch\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\n\n\nGroup Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups\n\n\n\nGET\n#\n\n\nSearch Groups\n - searches groups based on filter criteria\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nfilter\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nstartIndex\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \ncount\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortBy\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nsortOrder\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nListResponse\n\n\n\n\n\n\n\n\nPOST\n#\n\n\nCreate Group\n - creates a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n201\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}\n\n\n\nGET\n#\n\n\nFind Group By ID\n - returns a group by id as path parameter\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nPUT\n#\n\n\nUpdate Group\n - updates a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of group\n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nGroup\n\n        \n - \n\n        \nGroup\n\n    \n\n    \n\n        \nattributes\n\n        \nquery\n\n        \nno\n\n        \n\n        \n - \n\n        \nstring array\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nGroup\n\n\n\n\n\n\n\n\nDELETE\n#\n\n\nDelete Group\n - deletes a group\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nid\n\n        \npath\n\n        \nyes\n\n        \nLDAP 'inum' of the group\n\n        \n - \n\n        \nstring \n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\ndefault\n\n\nsuccessful operation\n\n\n-\n\n\n\n\n\n\n\n\n\n\nBulk Operation Endpoint\n#\n\n\nURL\n#\n\n\n<domain root>/identity/seam/resource/restv1/scim/v2/Bulk\n\n\n\nPOST\n#\n\n\nBulk Operations\n - bulk operations\n\n\nSecurity\n#\n\n\n\n\nUMA (default)\n\n\nOAuth2 Access Token (Test Mode)\n\n\n\n\nRequest\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\nParameters\n#\n\n\n\n    \n\n        \nName\n\n        \nLocated in\n\n        \nRequired\n\n        \nDescription\n\n        \nDefault\n\n        \nSchema\n\n    \n\n    \n\n        \nAuthorization\n\n        \nheader\n\n        \nyes (default)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \naccess_token\n\n        \nquery\n\n        \nyes (if \"Test Mode\" is enabled)\n\n        \n\n        \n - \n\n        \nstring\n\n    \n\n    \n\n        \nbody\n\n        \nbody\n\n        \nyes\n\n        \nBulkRequest\n\n        \n - \n\n        \nBulkRequest\n\n    \n\n\n\n\n\nResponse\n#\n\n\nContent-Type:\n \napplication/scim+json\n, \napplication/json\n\n\n\n\n\n\n\n\nStatus Code\n\n\nReason\n\n\nResponse Model\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\nBulkResponse",
            "title": "SCIM API Configuration"
        },
        {
            "location": "/admin-guide/scim/#scim-endpoints",
            "text": "SCIM uses REST API for the operations which are covered in short in this section. There are two versions of the SCIM API each with its own specification. This usage of SCIM requires advanced level knowledge of HTTP GET and POST commands and not recommended for entry level users.  The SCIM 1.1 is governed by the  SCIM:Protocol 1.1  document and SCIM 2.0 is governed by the  SCIM:Core Schema  &  SCIM:Protocol . As it is mentioned before, the specifications define an API, the operations are performed through endpoints. There are three endpoints that are available in Gluu Server SCIM:   User Endpoint  Group Endpoint  Bulk Operation Endpoint   The supported operations are given later in this document.",
            "title": "SCIM Endpoints"
        },
        {
            "location": "/admin-guide/scim/#scim-11",
            "text": "The endpoints URLS are incomplete withour the hostname. Please use the hostname of Gluu Server Community Edition before the give URLS to make any requrest using SCIM.     Resource  Endpoint  Operations  Description      User  /seam/resource/restv1/Users  GET, POST  Retrieve/Add/Modify Users    Group  /seam/resource/restv1/Groups  GET, POST  Retrieve/Add/Modify Groups    Bulk  /seam/resource/restv1/scim/v1/Bulk  GET, POST  Bulk modify Resources     The endpoints are described in detail in the follwing sections. Please remember to go through the specifications before using SCIM.  Endpoint: User & Group #  The userinfo endpoint is given above in  Section SCIM 1.1 . The example below shows the userinfo endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/host/seam/resource/restv1/scim/v1/Users{rsid}  The groups endpoint is given in  Section SCIM 1.1 . The example below shown the groupinfo endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/host/seam/resource/restv1/scim/v1/Groups{rsid}  The following table details the request parameters to the endpoints:     Parameter  Data Type  Location  Required  Description      rsid  string  path  TRUE  Resource set description ID    Authorization  string  header  FALSE      The response contains either JSON/XML application with a status code  200  if the request is successful.  Please see the  Response Code Section  for more details.  Example #  The following is an example to add a new user with SCIM 1.1 in  idp.gluu.org  using a JSON Request.  POST https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/ \nAccept: application/json \nAuthorization: Basic bWlrZTpzZWNyZXQ=  {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"secret\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}  The response is in JSON as well. The following is the expected response  201 CREATED\nServer:  Apache-Coyote/1.1\nLocation:  https://idp.gluu.org/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\nContent-Type:  application/json  {\"schemas\":[\"urn:scim:schemas:core:1.0\"],\"id\":\"@!1111!0000!D4E7\",\"externalId\":\"mike\",\"userName\":\"mike\",\"name\":{\"givenName\":\"Michael\",\"familyName\":\"Schwartz\",\"middleName\":\"N/A\",\"honorificPrefix\":\"N/A\",\"honorificSuffix\":\"N/A\"},\"displayName\":\"Micheal Schwartz\",\"nickName\":\"Sensei\",\"profileUrl\":\"http://www.gluu.org/\",\"emails\":[{\"value\":\"mike@gluu.org\",\"type\":\"work\",\"primary\":\"true\"},{\"value\":\"mike2@gluu.org\",\"type\":\"home\",\"primary\":\"false\"}],\"addresses\":[{\"type\":\"work\",\"streetAddress\":\"621 East 6th Street Suite 200\",\"locality\":\"Austin\",\"region\":\"TX\",\"postalCode\":\"78701\",\"country\":\"US\",\"formatted\":\"621 East 6th Street Suite 200  Austin , TX 78701 US\",\"primary\":\"true\"}],\"phoneNumbers\":[{\"value\":\"646-345-2346\",\"type\":\"work\"}],\"ims\":[{\"value\":\"nynymike\",\"type\":\"Skype\"}],\"photos\":[{\"value\":\"http://www.gluu.org/wp-content/themes/SaaS-II/images/logo.png\",\"type\":\"gluu photo\"}],\"userType\":\"CEO\",\"title\":\"CEO\",\"preferredLanguage\":\"en-us\",\"locale\":\"en_US\",\"timezone\":\"America/Chicago\",\"active\":\"true\",\"password\":\"Hiden for Privacy Reasons\",\"groups\":[{\"display\":\"Gluu Manager Group\",\"value\":\"@!1111!0003!B2C6\"},{\"display\":\"Gluu Owner Group\",\"value\":\"@!1111!0003!D9B4\"}],\"roles\":[{\"value\":\"Owner\"}],\"entitlements\":[{\"value\":\"full access\"}],\"x509Certificates\":[{\"value\":\"MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFa MH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo=\"}],\"meta\":{\"created\":\"2010-01-23T04:56:22Z\",\"lastModified\":\"2011-05-13T04:42:34Z\",\"version\":\"W\\\\\\\"b431af54f0671a2\\\"\",\"location\":\"http://localhost:8080/oxTrust/seam/resource/restv1/Users/@!1111!0000!D4E7\"}}  Endpoint: Bulk #  Bulk endpoint allows the administrator to work with a large collection of Resources with a single request.A body of a bulk operation may contain a set of HTTP Resource operations using one of the API supported HTTP methods; i.e., POST, PUT, PATCH or DELETE. Please see the  SCIM Specs  for more details.   The example below shows the bulk operaiton endpoint for a Gluu Server with hostname  idp.gluu.org :  https://idp.gluu.org/seam/resource/restv1/scim/v1/Bulk  The following table details the request parameters:     Parameter  Data Type  Location      Authorization  string  header    body  BulkRequest  body     Definitions #  The definitions for the bulk operation is covered in the tables below. The parametes below are all optional.     BulkOperation   BulkRequest   BulkResponse       Parameter  Data Type  Parameter  Data Type  Parameter  Data Type    bulkid  string  schemes  array[string]  schemes  array[string]    version  string  operations  array[BulkOperation]  operations  array[BulkOperation]    method  string  failOnErrors  integar(int32)      path  string        location  string        status  string        data  object        response  object         Response Codes #  This sections defines the response codes for the requests sent to the SCIM endpoints.     Status Code  Reason  Description      200  OK  Successful Operation    201  Created  Successfully created resource        Status Code  Reason  Description      400  Bad Request  Request cannot be parsed, is syntactically incorrect, or violates schema    401  Unauthorized  Authorization header is invalid or missing    403  Forbidden  Operation is not permitted based on the supplied authorization    404  Not Found  Specified resource does not exist",
            "title": "SCIM 1.1"
        },
        {
            "location": "/admin-guide/scim/#scim-20",
            "text": "The detailed SCIM 2.0 Specifications are available at:   System for Cross-domain Identity Management: Core Schema  System for Cross-domain Identity Management: Protocol   SCIM 2.0 Endpoints #   User Endpoint  Group Endpoint  Bulk Operation Endpoint   Definitions #  Address #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         formatted \n         string \n         optional \n         - \n         \n     \n     \n         streetAddress \n         string \n         optional \n         - \n         \n     \n     \n         locality \n         string \n         optional \n         - \n         \n     \n     \n         region \n         string \n         optional \n         - \n         \n     \n     \n         postalCode \n         string \n         optional \n         - \n         \n     \n     \n         country \n         string \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         - \n         \n       BulkOperation #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         bulkId \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         method \n          string  \n         optional \n         - \n         \n     \n     \n         path \n          string  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         data \n          object  \n         optional \n         - \n         \n     \n     \n         status \n          string  \n         optional \n         - \n         \n     \n     \n         response \n          object  \n         optional \n         - \n         \n       BulkRequest #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         failOnErrors \n          integer (int32)  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         - \n         \n       BulkResponse #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         schemas \n          array[string]  \n         optional \n         - \n         \n     \n     \n         operations \n          array[ BulkOperation ]  \n         optional \n         - \n         \n       Email #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Entitlement #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n    \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Group #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         members \n          array[ MemberRef ]  \n         optional \n         - \n         \n       GroupRef #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Im #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       ListResponse #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         totalResults \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         startIndex \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         itemsPerPage \n         integer (int32) \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         optional \n         - \n         \n     \n     \n         resources \n         array[ Resource ] \n         optional \n         - \n         \n       MemberRef #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Meta #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         created \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         lastModified \n          string (date-time)  \n         optional \n         - \n         \n     \n     \n         location \n          string  \n         optional \n         - \n         \n     \n     \n         version \n          string  \n         optional \n         - \n         \n     \n     \n         attributes \n          array[string]  \n         optional \n         - \n         \n     \n     \n         resourceType \n          string  \n         optional \n         - \n         \n       Name #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         formatted \n          string  \n         optional \n         - \n         \n     \n     \n         familyName \n          string  \n         optional \n         - \n         \n     \n     \n         givenName \n          string  \n         optional \n         - \n         \n     \n     \n         middleName \n          string  \n         optional \n         - \n         \n     \n     \n         honorificPrefix \n          string  \n         optional \n         - \n         \n     \n     \n         honorificSuffix \n          string  \n         optional \n         - \n         \n       PhoneNumber #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Photo #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Resource #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         id \n         string \n         optional \n         - \n         \n     \n     \n         externalId \n         string \n         optional \n         - \n         \n     \n     \n         meta \n         Meta \n         optional \n         - \n         \n     \n     \n         schemas \n         array[string] \n         required \n         - \n         \n       Role #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n          string  \n         optional \n         - \n         \n     \n     \n         value \n          string  \n         optional \n         - \n         \n     \n     \n         display \n          string  \n         optional \n         - \n         \n     \n     \n         primary \n          boolean  \n         optional \n         - \n         \n     \n     \n         type \n           Type   \n         optional \n         - \n         \n     \n     \n         $ref \n          string  \n         optional \n         - \n         \n       Type #  \n     \n         name \n         type \n         required \n         description \n         example \n       User #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         id \n          string  \n         optional \n         - \n         \n     \n     \n         externalId \n          string  \n         optional \n         - \n         \n     \n     \n         meta \n           Meta   \n         optional \n         - \n         \n     \n     \n         schemas \n          array[string]  \n         required \n         - \n         \n     \n     \n         userName \n          string  \n         optional \n         - \n         \n     \n     \n         name \n           Name   \n         optional \n         - \n         \n     \n     \n         displayName \n          string  \n         optional \n         - \n         \n     \n     \n         nickName \n          string  \n         optional \n         - \n         \n     \n     \n         profileUrl \n          string  \n         optional \n         - \n         \n     \n     \n         title \n          string  \n         optional \n         - \n         \n     \n     \n         userType \n          string  \n         optional \n         - \n         \n     \n     \n         preferredLanguage \n          string  \n         optional \n         - \n         \n     \n     \n         locale \n          string  \n         optional \n         - \n         \n     \n     \n         timezone \n          string  \n         optional \n         - \n         \n     \n     \n         active \n          boolean  \n         optional \n         - \n         \n     \n     \n         password \n          string  \n         optional \n         - \n         \n     \n     \n         emails \n          array[ Email ]  \n         optional \n         - \n         \n     \n     \n         phoneNumbers \n          array[ PhoneNumber ]  \n         optional \n         - \n         \n     \n     \n         ims \n          array[ Im ]  \n         optional \n         - \n         \n     \n     \n         photos \n          array[ Photo ]  \n         optional \n         - \n         \n     \n     \n         addresses \n          array[ Address ]  \n         optional \n         - \n         \n     \n     \n         groups \n          array[ GroupRef ]  \n         optional \n         - \n         \n     \n     \n         entitlements \n          array[ Entitlement ]  \n         optional \n         - \n         \n     \n     \n         roles \n          array[ Role ]  \n         optional \n         - \n         \n     \n     \n         x509Certificates \n          array[ X509Certificate ]  \n         optional \n         - \n         \n       X509Certificate #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         operation \n         string \n         optional \n         - \n         \n     \n     \n         value \n         string \n         optional \n         - \n         \n     \n     \n         display \n         string \n         optional \n         - \n         \n     \n     \n         primary \n         boolean \n         optional \n         - \n         \n     \n     \n         type \n         Type \n         optional \n         - \n         \n     \n     \n         $ref \n         string \n         optional \n         - \n         \n       ScimPersonSearch #  \n     \n         name \n         type \n         required \n         description \n         example \n     \n     \n         attribute \n          string  \n         required \n         User Attribute Name \n         Username \n     \n     \n         value \n          string  \n         required \n         User Attribute Value \n         Mike \n        User Endpoint #  URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Users  GET #  Search Users  - searches users based on filter criteria  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST #  Create User  - creates a user  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  User     URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Users/{id}  GET #  Find User By ID  - returns a user by id as path parameter  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/scim     Status Code  Reason  Response Model      200  successful operation  User     PUT #  Update User  - updates a user  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         User \n          -  \n         User \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  User     DELETE #  Delete User  - deletes a user  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of user \n          -  \n         string \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -     URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Users/Search  POST #  Search Users  ( Deprecated )  - searches users by HTTP POST  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         \n          -  \n         ScimPersonSearch \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse      Group Endpoint #  URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Groups  GET #  Search Groups  - searches groups based on filter criteria  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         filter \n         query \n         no \n         \n          -  \n         string \n     \n     \n         startIndex \n         query \n         no \n         \n          -  \n         string \n     \n     \n         count \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortBy \n         query \n         no \n         \n          -  \n         string \n     \n     \n         sortOrder \n         query \n         no \n         \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  ListResponse     POST #  Create Group  - creates a group  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      201  successful operation  Group     URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Groups/{id}  GET #  Find Group By ID  - returns a group by id as path parameter  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     PUT #  Update Group  - updates a group  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of group \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         Group \n          -  \n         Group \n     \n     \n         attributes \n         query \n         no \n         \n          -  \n         string array \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  Group     DELETE #  Delete Group  - deletes a group  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         id \n         path \n         yes \n         LDAP 'inum' of the group \n          -  \n         string  \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      default  successful operation  -      Bulk Operation Endpoint #  URL #  <domain root>/identity/seam/resource/restv1/scim/v2/Bulk  POST #  Bulk Operations  - bulk operations  Security #   UMA (default)  OAuth2 Access Token (Test Mode)   Request #  Content-Type:   application/scim+json ,  application/json  Parameters #  \n     \n         Name \n         Located in \n         Required \n         Description \n         Default \n         Schema \n     \n     \n         Authorization \n         header \n         yes (default) \n         \n          -  \n         string \n     \n     \n         access_token \n         query \n         yes (if \"Test Mode\" is enabled) \n         \n          -  \n         string \n     \n     \n         body \n         body \n         yes \n         BulkRequest \n          -  \n         BulkRequest \n       Response #  Content-Type:   application/scim+json ,  application/json     Status Code  Reason  Response Model      200  successful operation  BulkResponse",
            "title": "SCIM 2.0"
        },
        {
            "location": "/admin-guide/integrate/",
            "text": "Integration Guide\n#\n\n\nDropbox SSO with Gluu Server\n#\n\n\nThis document is a step-by-step guide to setting up Dropbox SSO in Gluu Server.\nThis SSO requires setting a custom \nnameid\n called \nemailnid\n.\n\n\nCustom NameID\n#\n\n\nPlease see \nthis doc\n on how to create custom attributes.\n\n\nThe new attribute screen should look like the screenshot below\n\n\n\nThe custom \nnameid\n needs to be defined in the \nattribute-resolver\n template file.\n\n\n\n\n\n\nPlease edit the \nattribute-resolver.xml.vm\n file  under the \n/opt/tomcat/conf/shibboleth2/idp\n folder\n\n\n\n\n\n\nAdd the \n$attribute.name.equals('emailnid')\n with the existing \n#if( ! ($attribute.name.equals('transientId')\n to look like the snippet below\n\n\n\n\n\n\n#if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('emailnid') ) ) \n\n\n\n\n\n\nAdd \nnameid\n definition \n\n\n\n\n <resolver:AttributeDefinition id=\"emailnid\"\n                                xsi:type=\"Simple\"\n                                xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                sourceAttributeID=\"mail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />\n</resolver:AttributeDefinition> \n\n\n\n\n\n\nAdd \nemailAddress\n in Principal Connector\n\n\n\n\n <resolver:PrincipalConnector xsi:type=\"pc:Transient\" id=\"saml2Transient\" nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" /> \n\n\n\n\n\n\nRestart Tomcat service\n\n\n\n\nTrust Relationship\n#\n\n\nPlease see \nthis doc\n to create trust relationship and fill up the form with the following info\n\n\nThe metadata for Dropbox is necessary to create trust relationship. Please use the following snippet so create the \ndropbox_metadata.xml\n.\n\n\n <EntityDescriptor entityID=\"Dropbox\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n        <AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://www.dropbox.com/saml_login\" />\n    </SPSSODescriptor>\n</EntityDescriptor> \n\n\n\n\n\n\nDisplay Name: Dropbox\n\n\nDescription: External SP / File method\n\n\nMetadata Type: File\n\n\nSP Metadata File: Upload the 'dropbox_metadata.xml' which you just created\n\n\nConfigure Specific RelyiningParty: Yes\n\n\n\n\nsignResponses: conditional\nsignAssertions: never\nsignRequests: conditional\nencryptAssertions: never\nencryptNameIds: never\n\n\n\n\n\n\n\n\nReleased attribute: emailnid\n\n\n\n\n\nConfigure Gluu Server as IdP in Dropbox\n#\n\n\n\n\nLog into Dropbox\n\n\nClick on \nAdmin Console\n\n\nClick \nAuthentication\n\n\nClick on the checkbox labeled \nEnable single-sign-on\n\n\n\n\nOptional/Required according to necessity\n\n\n\n\n\n\nSign in URL\n\nhttps://<hostname_of_Gluu_server>/idp/profile/SAML2/Redirect/SSO\n\n\n\n\n\n\nX.509 certificate \n\n\n\n\n\n\n\n\n\n\n    Get `shibIDP.crt` from Gluu Server `chroot` environment under `/etc/certs/` folder and upload it\n\n\n\n\n\n\n\n\nSave configuration\n\n\n\n\nTest SSO\n#\n\n\n\n\n\n\nPlease go to https://www.dropbox.com and click on the \nSign In\n button\n\n\n\n\n\n\nIf the account is configured for SSO, then a screen similar to the screenshot below will appear after entering the email address.\n\n\n\n\n\n\n\nClick \nContinue\n and the website will redirect to Gluu Server for authentication.\n\n\n\n\n\n\nSAML SSO With Google Apps\n#\n\n\nGoogle Apps will work as a Service Provider (SP) and we need to\n\"introduce\" Gluu Server with Google Apps as Gluu Server so that it can\nwork as an Identity Provider (IDP).\n\n\nNOTE: It is highly recommended to use Google staging apps setup before\nGoogle production migration. If you have any question or confusion,\nplease feel free to let us know.\n\n\nWe need to configure Google Apps and Gluu Server so that both parties\ncan talk to each other.\n\n\nConfiguring Google Apps With Google Dashboard:\n#\n\n\n\n\nLogin to dashboard.\n\n\n\n\n\n\n\n\n\n\nFrom the list of options choose the \"Security\" tab.\n\n\n\n\n\n\nA new page will open. Select \nSet up single sign-on(SSO)\n from the\noptions.\n\n\n\n\n\n\n\n\n\n\nFinally, the Single Sign-On setting page will appear. \n\n\n\n\n\n\nThis page contains a number of selection, and entry fields.\n\n\n\n\n\n\nSetup SSO with third party Identity Provider\n: This\n     refers to your Gluu Server instance. Enable this box.\n\n\n\n\n\n\nSign-in Page URL\n: Enter the uri of the sign-in page, for\n     example \nhttps://idp_hostname/idp/profile/SAML2/Redirect/SSO\n.\n\n\n\n\n\n\nSign-out Page URL\n: Enter the uri of the logout page, for\n     example \nhttps://idp_hostname/idp/logout.jsp\n.\n\n\n\n\n\n\nChange Password URL\n: The uri an user is redirected if he wants\n     to change his password. It is recommended that an organization \n     provides such a link for its end users.\n\n\n\n\n\n\nVerification certificate\n: Upload the SAML certificate of your\n     Gluu Server. The SAML certificates are available in the \n/etc/certs\n folder inside the Gluu Server \nchroot\n environment.\n\n\n\n\n\n\nUse a domain specific issuer\n: Enable this box to use a\n     domain-specific issuer.\n\n\n\n\n\n\nSave your data using the \nSave changes\n button on the lower right\n     of the page.\n\n\n\n\n\n\nIf you want to know more about Google SSO,\n\nthis\n helps you.\n\n\nConfiguration In Gluu Server:\n#\n\n\nNow we need to create a Trust Relationship in Gluu Server. Trust\nRelationships are created so that the IdP can authorize/authenticate the\nuser to the service provider (SP). In this specific case, the SP is\nGoogle Apps, and the protocol used is SAML.\n\n\nIn order to create a Trust Relationship, we need to grab the metadata of\nGoogle Apps. This metadata can be collected from Google. It's generally\nspecific to an organization account. The following is a template of the Google metadata.\n\n\n<EntityDescriptor entityID=\"google.com/a/domain.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n<SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n<AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\nLocation=\"https://www.google.com/a/domain.com/acs\" ></AssertionConsumerService>\n</SPSSODescriptor>\n</EntityDescriptor>\n\n\n\n\nGot the metadata? Great, we are ready to move forward. \n\n\n\n\n\n\nCreate Trust Relationship for Google Apps: \n\n\n\n\n\n\nHow to create a trust relationship can be found \nhere\n. We need to follow the \"File\" method for Google Apps trust relationship.\n\n\n\n\nRequired attributes: Generally a nameID attributes is required. \n\n\nRelying Party Configuration: Yes, SAML2SSO should be configured. \n\n\nincludeAttributeStatement: check\n\n\nassertionLifetime: default \n\n\nassertionProxyCount: default\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never \n\n\n\n\n\n\n\n\n\n\n\n\nSAML SSO with Hobsons Education Solutions Co\n#\n\n\nThis guide has been prepared to connect the Hobsons Service Provider\n(SP) with the Gluu Server for SP-initiated SSO. The connection is\nestablished through the creation of a Trust Relationship using the Gluu\nServer UI, oxTrust.\n\n\nCreating Trust Relationship\n#\n\n\n\n\n\n\nLog in to your Gluu Server using your admin credentials.\n\n\n\n\n\n\nNext, click on the SAML tab, and select the option Trust\nRelationships. Then, click on the \nAdd Relationship\n button.\n\n\n\n\n\n\n\n\n\n\nThe button \nAdd Relationship\n will open the following page, the trust\nrelationship can be created easily using the following form.\n\n\n\n\n\n\n1. __Display Name__: This field contains the display name of the \nTrust Relationship. In the example below we use \u201cTest Hobsons-Radius TR\u201d.\n\n2. __Description__: A small description of Hobsons can be input here.\n\n3. __Metadata Type__: Please select the uri from the dropdown menu.\n\n4. __SP Metadata URL__: The metadata uri provided by Hobsons goes here.\n\n5. __SP Logout URL__: This uri is meant to be supplied by the\nHobsons staff. If you did not receiv any logout uri yet, leave it blank.\n\n6. __Released__: The two necessary attributes--`Transientid` and the\n`eduPersonPrincipalName`--were selected from the attribute list.\n\n\n\n\n\n7. Finally, click \"Add\" to finish creating the Trust Relationship.\n\n\n\nConfiguring Trust Relationship\n#\n\n\nPlease ensure that the new Trust Relationship status is \"active\".\nOtherwise click on the Trust Relationship, and activate it before\nconfiguring it.\n\n\n\n\nThe configuration screen opens by clicking on the Hobsons Trust Relationship.\n\n\n\n\n\n\nConfigure Metadata Filters\n: Do not make any changes.\n\n\n\n\n\n\nConfigure specific Relying Party\n: Check this option and a link \"Configure Relying Party\" will appear.\n\n\n\n\n\n\nConfigure Relying Party\n: Click on the link, and a new window opens:\n\n\n\n\n\n\nSelect SAML2SSO from the list and click on the \"Add\" button.\n\n\n\n\n\n\nSet \"signResponses\", \"signAssertions\", \"signRequests\" and\n\"encryptAssertions\" to \nConditional\n from the drop-down menu.\n\n\n\n\n\n\nSet \"encryptNameIds\" to \nNever\n from the drop-down menu, and click\n\"Save\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick \"Update\" to finish the configuration of the Trust Relationship.\n\n\n\n\nOpenID Connect from JavaScript\n#\n\n\nSee \nOpenID Connect plugin for Passport\n for further details.\n\n\nOffice 365 Integration with Gluu Server\n#\n\n\nThis guide is created to use Microsoft Office 365 Single-Sign-On with Gluu Server.\nIt is assumed that an Office 365 subscription is available/registered.\n\n\nNote:\n The attributes \nObjectGUID\n and \nIDPEmail\n are mandatory for O365 SSO. The domain of \nIDPEmail\n must match the registered domain as well.\n\n\nOffice 365 Configuration\n#\n\n\n\n\n\n\nPlease create a test user from Office365 Admin Panel\n\n   Alternatively, use \nthis doc\n to connect backend Azure Active Directory (AD) \n\n\n\n\n\n\nRegister the domain from the Office365 (O365) Admin Panel from \nSettings --> Domains\n\n\n\n\nVerify\n the domain\n\n\n\n\n\n\n\n\nRegister Gluu Server in O365\n\n\n\n\n\n\nInstall/Use Windows Server 2012 R2\n\n\n\n\n\n\nInstall and Configure\n Windows Powershell \ncmdlets\n\n\n\n\n\n\nCreate a script named \ngluu1.ps1\n with the following template changing domain, hostname of Gluu Server and Certificate\n\n\n\n\n\n\n\n\n\n\n Connect-MsolService\n\n$dom = \"company.org\"\n$url = \"https://test.gluu.org/idp/profile/SAML2/POST/SSO\"\n$uri = \"https://test.gluu.org/idp/shibboleth\"\n$logouturl = \"https://test.gluu.org/idp/logout.jsp\"\n$cert = \"Mx....SAML_cert_of_your_Gluu_Server...Tdsg9R0XO3AnBeHRtGmAA=\"\n\nSet-MsolDomainAuthentication -DomainName $dom -FederationBrandName $dom -Authentication Federated  -PassiveLogOnUri $url -SigningCertificate $cert -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol SAMLP \n\n\n\n\n\n\nRun the \ngluu.ps1\n script from Windows Server 2012 R2\n\n\n\n\nGluu Server Configuration\n#\n\n\nCustom Attributes\n#\n\n\nThe configuration begins by creating a few custom attributes named \nIDPEmail\n, \nImmutableID\n and \nobjectguid\n.\nPlease see \nthis doc\n to create custom attributes.\n\n\n\n\n\n\nIDPEmail\n Custom Attribute\n\n\n\n\n\n\n\nImmutableID\n Custom Attribute\n\n\n\n\n\n\n\nobjectguid\n Custom Attribute\n\n\n\n\n\n\n\nOpenDJ Configuration\n#\n\n\n\n\n\n\nEdit the \n100-user.ldif\n file under \n/opt/opendj/config/schema\n folder.\n\n\n\n\n\n\nRemove the \nobhectGUID\n entry from the file\n\n\n\n\n\n\nAdd the following new entry\n\n\n\n\n\n\n\n\n\n\nattributeTypes: ( 1454676848732 NAME 'objectGUID' SYNTAX 1.3.6.1.4.1.1466.115.121.1.5 USAGE userApplications X-ORIGIN 'gluu' ) \n\n\n\n\n* Restart OpenDJ\n\n\n\n\n\n\n\nEdit the \nattribute-resolver.xml.vm\n file under \n/opt/tomcat/conf/shibboleth2/idp\n folder\n\n\n\n\nAdd \n$attribute.name.equals('ImmutableID')\n with the existing \n($attribute.name.equals('transientId')\n to look like the snippet below\n\n\n\n\n\n\n\n\n#if(!($attribute.name.equals('transientId')or$attribute.name.equals('ImmutableID'))) \n\n\n\n\n* Add `IDPEmail` attribute definition\n\n\n\n <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"UserId\" sourceAttributeID=\"IDPEmail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" name=\"IDPEmail\" friendlyName=\"UserId\" />\n        </resolver:AttributeDefinition> \n\n\n\n\n* Add `ImmutableID` attribute definition\n\n\n\n <resolver:AttributeDefinition id=\"ImmutableID\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"objectguid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition> \n\n\n\n\nIdentity Mapping\n#\n\n\nThe cache refresh mechanism is used to populate the Gluu Server LDAP with data from a backend LDAP/AD. The \nobjectGUID\n attribute must be pulled from the backend data source to Gluu Server.\n\n\n\n\nEdit the \nox-ldap.properties\n, \noxauth-ldap.properties\n and \noxidp-ldap.properties\n files to add the following\n\n\n\n\nbinaryAttributes=objectGUID,objectguid \n\n\n\n\nNote:\n'objectGUID' (the first one) is the attribute which contains binary values in the backend AD and 'objectguid' (the second one) is the Gluu Server binary attribute name which will pull value from 'objectGUID' attribute\n\n\n\n\nRestart Tomcat\n\n\n\n\nCreate Trust Relationship\n#\n\n\nPlease see \nthis doc\n to create trust relationships.\n\n\n\n\nConfigure Relaying Party like the following screenshot\n\n\n\n\n\nLogin with LifeRay\n#\n\n\n\n\n\n\nServer Bootup\n\n\n\n\nOnce the LifeRay server is restarted, open your browser and\n  navigate to the uri \nhttp://localhost:8080\n.\n\n\n\n\n\n\n\n\nLogin uri\n\n\n\n\nOnce the LifeRay page successfully loaded navigate to the OpenID\n  connect page at \nhttp://localhost:8080/openidconnect/login\n.\n\n\n\n\n\n\n\n\nNote: you can edit the theme code, and link to the login uri as\n\nhttp://localhost:8080/openidconnect/login\n. In result the user will\nalways redirect to the OAuth server for authentication.\n\n\n\n\nOAuth authentication\n\n\nThe LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:\n\n\n\n\n\n\n\n\n\n\n\n\nRequest for permission\n\n\nThis screen can be configured depending upon your OAuth Server\n  implementation.\n\n\n\n\n\n\n\n\n\n\n\n\nOAuth callback (user auto-login to LifeRay)\n\n\nAfter a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:\n\n\n\n\n\n\n\n\nhttp://localhost:8080/openidconnect/callback?code=xxx`\n\n\n\n\nThis will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.\n\n\n\n\nSAML SSO with Salesforce.com\n#\n\n\nBy default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little bit complex as it\nrequires a big hostname which includes IDP's SSO link as well as SP's\nlogin uri. So we prefer SP-initiated SSO and here in this documentation\nwe are presenting a very simple SP-initiated SSO steps with Salesforce\nand Gluu Server. Still, you can go for IDP-initiated SSO if you prefer.\nFurther documentation is available at the Salesforce.com site.\n\n\nPrepare Salesforce.com\n#\n\n\n\n\nLog into Salesforce.com with your administrative account.\n\n\nClick on \nSetup\n in the right upper corner of the page.\n\n\nYou need to add a custom domain name for your Salesforce.com site if\n  you do not have any yet.\n\n\nGo to \nDomain Management\n \u2013> \nMy Domain\n\n\nAdd your custom domain\n\n\nWait for some time. Salesforce.com will register this domain name\n  for you. As an example we use \ntestgluu-dev-ed.my.salesforce.com\n here.\n\n\n\n\n\n\n\n\nRegister your Gluu Server information in Salesforce.com\n\n\nGo to \nSecurity Controls\n \u2013> \nSingle Sign On Settings\n\n\nClick \nNew\n\n\n\n\n\n\n\n\n\n\nNow you need to add the information of your Gluu Server here\n\n\n\n\nName\n: Anything, whichever is easier for you to recognize this\n   setup, i.e. \nGluu Server\n\n\nAPI Name\n: Gluu Server.\n\n\nIssuer\n: EntityID of your Gluu Server, i.e. \nhttps://test.gluu.org/idp/shibboleth\n\n\nEntityID\n: Your Salesforce.com custom domain name as chosen\n   above, i.e. \nhttps://testgluu-dev-ed.my.salesforce.com\n\n\nIdentity Provider Certificate\n: Grab your Gluu Server's SAML\n   certificate. SAML certificate can be grabbed from your Gluu Sever's\n   metadata. Save the certificate and upload it.\n\n\nRequest Signing Certificate\n: Default certificate\n\n\nRequest Signature Method\n: RSA-SHA1\n\n\nAssertion Decryption Certificate\n: Assertion not encrypted.\n\n\nSAML Identity Type\n: Assertion contains user's Salesforce.com username\n\n\nSAML Identity Location\n: Identity is in an Attribute element\n\n\nAttribute Name\n: Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available \nhere\n.\n\n\nNameID Format\n: Leave this field empty.\n\n\nIdentity Provider Login URL\n: \nhttps://test.gluu.org/idp/profile/SAML2/Redirect/SSO\n\n\nService Provider Initiated Request Binding\n: HTTP-Redirect\n\n\nHere is how our example setup looks like:\n\n\n\n\n\n\n\n\n\n\nPrepare Gluu Server\n#\n\n\n\n\nHow to create SAML trust relationship is available \nhere\n. \n\n\nGrab Salesforce.com metadata from the Salesforce.com website. There is\n  an option named 'Download Metadata':\n\n\nModify Salesforce.com metadata a bit:\n\n\nRemove \nAuthnRequestsSigned=\u201ctrue\u201d\n from metadata.\n\n\nSave metadata\n\n\n\n\n\n\nCreate Trust Relationship:\n\n\nDisplay Name\n: Anything, whichever is easier for you to recognize this trust relationship.\n\n\nDescription\n: Anything, whichever is easier for you to recognize this trust relationship\n\n\nMetadata Type\n: 'File'\n\n\nUpload salesforce's metadata (your modified one)\n\n\nReleases attributes: TransientID and Email\n\n\n'Add' this trust\n\n\nConfigure Specific Relying: It can be done from Gluu Server's GUI (named: oxTrust)\n\n\nSelect 'SAML2SSO'\n\n\nincludeAttributeStatement: Enabled\n\n\nassertionLifetime: keep the default one\n\n\nassertionProxyCount: keep the default one\n\n\nsignResponses: conditional\n\n\nsignAssertions: never\n\n\nsignRequests: conditional\n\n\nencryptAssertions: never\n\n\nencryptNameIds: never\n\n\nSave it\n\n\n\n\n\n\n\n\n\n\n'Update' the trust relationship\n\n\nHere is how it looks like in our example setup:\n\n\n\n\n\n\nTest SSO\n#\n\n\n\n\nGo back to Salesforce.com setup\n\n\nSecurity Controls \u2013> Single Sign On Settings\n\n\nEnable 'Federated Single Sign-On Using SAML'\n\n\nGo to 'Domain Management'\n\n\nConfigure 'Authentication Configuration'\n\n\nSelect 'Gluu Server'\n\n\nSave it\n\n\nHere is how the 'Authentication Configuration' looks like:\n\n\n\n\n\n\n\n\n\n\nThis is SP-initiate SSO. So hit your Salesforce.com website link to\ninitiate the SSO.\n\n\n\n\n\n\nHere\n\nis a video link of this SSO.\n\n\n\n\n\n\nCisco WebEx SSO\n#\n\n\nAttribute creation with oxTrust\n#\n\n\n\n\n'WebexNameID'\n\n\nName: webexnameid\n\n\nSAML1 URI: urn:gluu:dir:attribute-def:webexnameid\n\n\nSAML2 URI: urn:oid:webexnameid\n\n\nDisplayName: WebexNameID\n\n\nType: Text\n\n\nEdit Type: admin\n\n\nView Type: admin + user\n\n\nUsage Type: Not definte\n\n\nMultivalue: False\n\n\nSCIM Attribute: False\n\n\nDescription: Custom nameID for WebEx, takes value from uid (through Shibboleth's config files)\n\n\n\n\n'wxemail'\n\n\nName: email_webex\n\n\nSAML1 URI: email\n\n\nSAML2 URI: email\n\n\nDisplayName: wxemail\n\n\nType: Text\n\n\nEdit type: admin\n\n\nView type: admin + user\n\n\nUsage type: Not defined\n\n\nMultivalue: False\n\n\nSCIM Attribute: False\n\n\nDescription: Custom attribute for WebEX SSO. Pulling email from backend. \n\n\n\n\n'wxfirstname'\n\n\nName: firstname_webex\n\n\nSAML1 URI: firstname\n\n\nSAML2 URI: firstname\n\n\nDisplay Name: wxfirstname\n\n\nType: Text\n\n\nEdit Type: admin\n\n\nView Type: admin + user\n\n\nUsage Type: Not defined\n\n\nMultivalued: False\n\n\nSCIM Attribute: False\n\n\nDescription: Custom attribute for WebEX SSO, pulling 'givenname' from backend. \n\n\n\n\n'wxlastname'\n\n\nName: lastname_webex\n\n\nSAML1 URI: lastname\n\n\nSAML2 URI: lastname\n\n\nDisplay Name: wxlastname\n\n\nType: Text\n\n\nEdit Type: admin\n\n\nView Type: admin + user\n\n\nUsage Type: Not defined\n\n\nMultivalued: False\n\n\nSCIM Attribute: False\n\n\nDescription: Custom attribute for WebEX SSO, pulling 'sn' from backend. \n\n\n\n\n'wxuid'\n\n\nName: uid_webex\n\n\nSAML1 URI: uid\n\n\nSAML2 URI: uid\n\n\nDisplay Name: wxuid\n\n\nType: Text\n\n\nEdit Type: admin\n\n\nView Type: admin + user\n\n\nUsage Type: Not defined\n\n\nMultivalue: False\n\n\nSCIM Attribute: False\n\n\nDescription: Custom attribute for WebEX SSO, pulling 'uid' from backend. \n\n\n\n\n\n\nConfiguring attribute resolver\n#\n\n\nAdd below snippets in 'attribute-resolver.xml.vm' ( location: /opt/tomcat/conf/shibboleth2/idp )\n\n\n\n\nAttribute definition: \n\n\n\n\n#if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('webexnameid') or $attribute.name.equals('webexnameidmail') or $attribute.name.equals('firstname_webex') or $attribute.name.equals('uid_webex') or $attribute.name.equals('lastname_webex') or $attribute.name.equals('email_webex')  ) )\n\n\n\n\n\n\nAttribute declaration: \n\n\n\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"firstname_webex\" sourceAttributeID=\"firstname_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"firstname\" />\n    </resolver:AttributeDefinition>\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"uid_webex\" sourceAttributeID=\"uid_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"uid\" />\n    </resolver:AttributeDefinition>\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"lastname_webex\" sourceAttributeID=\"lastname_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"lastname\" />\n    </resolver:AttributeDefinition>\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"email_webex\" sourceAttributeID=\"email_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"email\" />\n    </resolver:AttributeDefinition>\n\n    <resolver:AttributeDefinition id=\"webexnameid\"\n                                      xsi:type=\"Simple\"\n                                      xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                      sourceAttributeID=\"uid\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                   xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                   nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"/>\n    </resolver:AttributeDefinition>\n\n\n\n\n\n\nRestart tomcat",
            "title": "Service Integration in Gluu CE"
        },
        {
            "location": "/admin-guide/integrate/#integration-guide",
            "text": "",
            "title": "Integration Guide"
        },
        {
            "location": "/admin-guide/integrate/#dropbox-sso-with-gluu-server",
            "text": "This document is a step-by-step guide to setting up Dropbox SSO in Gluu Server.\nThis SSO requires setting a custom  nameid  called  emailnid .  Custom NameID #  Please see  this doc  on how to create custom attributes.  The new attribute screen should look like the screenshot below  The custom  nameid  needs to be defined in the  attribute-resolver  template file.    Please edit the  attribute-resolver.xml.vm  file  under the  /opt/tomcat/conf/shibboleth2/idp  folder    Add the  $attribute.name.equals('emailnid')  with the existing  #if( ! ($attribute.name.equals('transientId')  to look like the snippet below    #if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('emailnid') ) )    Add  nameid  definition     <resolver:AttributeDefinition id=\"emailnid\"\n                                xsi:type=\"Simple\"\n                                xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                sourceAttributeID=\"mail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />\n</resolver:AttributeDefinition>    Add  emailAddress  in Principal Connector    <resolver:PrincipalConnector xsi:type=\"pc:Transient\" id=\"saml2Transient\" nameIDFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" />    Restart Tomcat service   Trust Relationship #  Please see  this doc  to create trust relationship and fill up the form with the following info  The metadata for Dropbox is necessary to create trust relationship. Please use the following snippet so create the  dropbox_metadata.xml .   <EntityDescriptor entityID=\"Dropbox\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n    <SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>\n        <AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"https://www.dropbox.com/saml_login\" />\n    </SPSSODescriptor>\n</EntityDescriptor>    Display Name: Dropbox  Description: External SP / File method  Metadata Type: File  SP Metadata File: Upload the 'dropbox_metadata.xml' which you just created  Configure Specific RelyiningParty: Yes   signResponses: conditional\nsignAssertions: never\nsignRequests: conditional\nencryptAssertions: never\nencryptNameIds: never    Released attribute: emailnid   Configure Gluu Server as IdP in Dropbox #   Log into Dropbox  Click on  Admin Console  Click  Authentication  Click on the checkbox labeled  Enable single-sign-on   Optional/Required according to necessity    Sign in URL https://<hostname_of_Gluu_server>/idp/profile/SAML2/Redirect/SSO    X.509 certificate           Get `shibIDP.crt` from Gluu Server `chroot` environment under `/etc/certs/` folder and upload it    Save configuration   Test SSO #    Please go to https://www.dropbox.com and click on the  Sign In  button    If the account is configured for SSO, then a screen similar to the screenshot below will appear after entering the email address.    Click  Continue  and the website will redirect to Gluu Server for authentication.",
            "title": "Dropbox SSO with Gluu Server"
        },
        {
            "location": "/admin-guide/integrate/#saml-sso-with-google-apps",
            "text": "Google Apps will work as a Service Provider (SP) and we need to\n\"introduce\" Gluu Server with Google Apps as Gluu Server so that it can\nwork as an Identity Provider (IDP).  NOTE: It is highly recommended to use Google staging apps setup before\nGoogle production migration. If you have any question or confusion,\nplease feel free to let us know.  We need to configure Google Apps and Gluu Server so that both parties\ncan talk to each other.  Configuring Google Apps With Google Dashboard: #   Login to dashboard.      From the list of options choose the \"Security\" tab.    A new page will open. Select  Set up single sign-on(SSO)  from the\noptions.      Finally, the Single Sign-On setting page will appear.     This page contains a number of selection, and entry fields.    Setup SSO with third party Identity Provider : This\n     refers to your Gluu Server instance. Enable this box.    Sign-in Page URL : Enter the uri of the sign-in page, for\n     example  https://idp_hostname/idp/profile/SAML2/Redirect/SSO .    Sign-out Page URL : Enter the uri of the logout page, for\n     example  https://idp_hostname/idp/logout.jsp .    Change Password URL : The uri an user is redirected if he wants\n     to change his password. It is recommended that an organization \n     provides such a link for its end users.    Verification certificate : Upload the SAML certificate of your\n     Gluu Server. The SAML certificates are available in the  /etc/certs  folder inside the Gluu Server  chroot  environment.    Use a domain specific issuer : Enable this box to use a\n     domain-specific issuer.    Save your data using the  Save changes  button on the lower right\n     of the page.    If you want to know more about Google SSO, this  helps you.  Configuration In Gluu Server: #  Now we need to create a Trust Relationship in Gluu Server. Trust\nRelationships are created so that the IdP can authorize/authenticate the\nuser to the service provider (SP). In this specific case, the SP is\nGoogle Apps, and the protocol used is SAML.  In order to create a Trust Relationship, we need to grab the metadata of\nGoogle Apps. This metadata can be collected from Google. It's generally\nspecific to an organization account. The following is a template of the Google metadata.  <EntityDescriptor entityID=\"google.com/a/domain.com\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\">\n<SPSSODescriptor protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\n<NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\n<AssertionConsumerService index=\"1\" Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\nLocation=\"https://www.google.com/a/domain.com/acs\" ></AssertionConsumerService>\n</SPSSODescriptor>\n</EntityDescriptor>  Got the metadata? Great, we are ready to move forward.     Create Trust Relationship for Google Apps:     How to create a trust relationship can be found  here . We need to follow the \"File\" method for Google Apps trust relationship.   Required attributes: Generally a nameID attributes is required.   Relying Party Configuration: Yes, SAML2SSO should be configured.   includeAttributeStatement: check  assertionLifetime: default   assertionProxyCount: default  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never",
            "title": "SAML SSO With Google Apps"
        },
        {
            "location": "/admin-guide/integrate/#saml-sso-with-hobsons-education-solutions-co",
            "text": "This guide has been prepared to connect the Hobsons Service Provider\n(SP) with the Gluu Server for SP-initiated SSO. The connection is\nestablished through the creation of a Trust Relationship using the Gluu\nServer UI, oxTrust.  Creating Trust Relationship #    Log in to your Gluu Server using your admin credentials.    Next, click on the SAML tab, and select the option Trust\nRelationships. Then, click on the  Add Relationship  button.      The button  Add Relationship  will open the following page, the trust\nrelationship can be created easily using the following form.    1. __Display Name__: This field contains the display name of the \nTrust Relationship. In the example below we use \u201cTest Hobsons-Radius TR\u201d.\n\n2. __Description__: A small description of Hobsons can be input here.\n\n3. __Metadata Type__: Please select the uri from the dropdown menu.\n\n4. __SP Metadata URL__: The metadata uri provided by Hobsons goes here.\n\n5. __SP Logout URL__: This uri is meant to be supplied by the\nHobsons staff. If you did not receiv any logout uri yet, leave it blank.\n\n6. __Released__: The two necessary attributes--`Transientid` and the\n`eduPersonPrincipalName`--were selected from the attribute list.   7. Finally, click \"Add\" to finish creating the Trust Relationship.  Configuring Trust Relationship #  Please ensure that the new Trust Relationship status is \"active\".\nOtherwise click on the Trust Relationship, and activate it before\nconfiguring it.   The configuration screen opens by clicking on the Hobsons Trust Relationship.    Configure Metadata Filters : Do not make any changes.    Configure specific Relying Party : Check this option and a link \"Configure Relying Party\" will appear.    Configure Relying Party : Click on the link, and a new window opens:    Select SAML2SSO from the list and click on the \"Add\" button.    Set \"signResponses\", \"signAssertions\", \"signRequests\" and\n\"encryptAssertions\" to  Conditional  from the drop-down menu.    Set \"encryptNameIds\" to  Never  from the drop-down menu, and click\n\"Save\".        Click \"Update\" to finish the configuration of the Trust Relationship.",
            "title": "SAML SSO with Hobsons Education Solutions Co"
        },
        {
            "location": "/admin-guide/integrate/#openid-connect-from-javascript",
            "text": "See  OpenID Connect plugin for Passport  for further details.",
            "title": "OpenID Connect from JavaScript"
        },
        {
            "location": "/admin-guide/integrate/#office-365-integration-with-gluu-server",
            "text": "This guide is created to use Microsoft Office 365 Single-Sign-On with Gluu Server.\nIt is assumed that an Office 365 subscription is available/registered.  Note:  The attributes  ObjectGUID  and  IDPEmail  are mandatory for O365 SSO. The domain of  IDPEmail  must match the registered domain as well.  Office 365 Configuration #    Please create a test user from Office365 Admin Panel \n   Alternatively, use  this doc  to connect backend Azure Active Directory (AD)     Register the domain from the Office365 (O365) Admin Panel from  Settings --> Domains   Verify  the domain     Register Gluu Server in O365    Install/Use Windows Server 2012 R2    Install and Configure  Windows Powershell  cmdlets    Create a script named  gluu1.ps1  with the following template changing domain, hostname of Gluu Server and Certificate       Connect-MsolService\n\n$dom = \"company.org\"\n$url = \"https://test.gluu.org/idp/profile/SAML2/POST/SSO\"\n$uri = \"https://test.gluu.org/idp/shibboleth\"\n$logouturl = \"https://test.gluu.org/idp/logout.jsp\"\n$cert = \"Mx....SAML_cert_of_your_Gluu_Server...Tdsg9R0XO3AnBeHRtGmAA=\"\n\nSet-MsolDomainAuthentication -DomainName $dom -FederationBrandName $dom -Authentication Federated  -PassiveLogOnUri $url -SigningCertificate $cert -IssuerUri $uri -LogOffUri $logouturl -PreferredAuthenticationProtocol SAMLP    Run the  gluu.ps1  script from Windows Server 2012 R2   Gluu Server Configuration #  Custom Attributes #  The configuration begins by creating a few custom attributes named  IDPEmail ,  ImmutableID  and  objectguid .\nPlease see  this doc  to create custom attributes.    IDPEmail  Custom Attribute    ImmutableID  Custom Attribute    objectguid  Custom Attribute    OpenDJ Configuration #    Edit the  100-user.ldif  file under  /opt/opendj/config/schema  folder.    Remove the  obhectGUID  entry from the file    Add the following new entry      attributeTypes: ( 1454676848732 NAME 'objectGUID' SYNTAX 1.3.6.1.4.1.1466.115.121.1.5 USAGE userApplications X-ORIGIN 'gluu' )   * Restart OpenDJ    Edit the  attribute-resolver.xml.vm  file under  /opt/tomcat/conf/shibboleth2/idp  folder   Add  $attribute.name.equals('ImmutableID')  with the existing  ($attribute.name.equals('transientId')  to look like the snippet below     #if(!($attribute.name.equals('transientId')or$attribute.name.equals('ImmutableID')))   * Add `IDPEmail` attribute definition   <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"UserId\" sourceAttributeID=\"IDPEmail\">\n                        <resolver:Dependency ref=\"siteLDAP\" />\n                        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" name=\"IDPEmail\" friendlyName=\"UserId\" />\n        </resolver:AttributeDefinition>   * Add `ImmutableID` attribute definition   <resolver:AttributeDefinition id=\"ImmutableID\" xsi:type=\"Simple\"\n                              xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                              sourceAttributeID=\"objectguid\">\n\n        <resolver:Dependency ref=\"siteLDAP\"/>\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                nameFormat=\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" />\n</resolver:AttributeDefinition>   Identity Mapping #  The cache refresh mechanism is used to populate the Gluu Server LDAP with data from a backend LDAP/AD. The  objectGUID  attribute must be pulled from the backend data source to Gluu Server.   Edit the  ox-ldap.properties ,  oxauth-ldap.properties  and  oxidp-ldap.properties  files to add the following   binaryAttributes=objectGUID,objectguid   Note: 'objectGUID' (the first one) is the attribute which contains binary values in the backend AD and 'objectguid' (the second one) is the Gluu Server binary attribute name which will pull value from 'objectGUID' attribute   Restart Tomcat   Create Trust Relationship #  Please see  this doc  to create trust relationships.   Configure Relaying Party like the following screenshot",
            "title": "Office 365 Integration with Gluu Server"
        },
        {
            "location": "/admin-guide/integrate/#login-with-liferay",
            "text": "Server Bootup   Once the LifeRay server is restarted, open your browser and\n  navigate to the uri  http://localhost:8080 .     Login uri   Once the LifeRay page successfully loaded navigate to the OpenID\n  connect page at  http://localhost:8080/openidconnect/login .     Note: you can edit the theme code, and link to the login uri as http://localhost:8080/openidconnect/login . In result the user will\nalways redirect to the OAuth server for authentication.   OAuth authentication  The LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:       Request for permission  This screen can be configured depending upon your OAuth Server\n  implementation.       OAuth callback (user auto-login to LifeRay)  After a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:     http://localhost:8080/openidconnect/callback?code=xxx`  This will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.",
            "title": "Login with LifeRay"
        },
        {
            "location": "/admin-guide/integrate/#saml-sso-with-salesforcecom",
            "text": "By default Salesforce suggest deployers to implement IDP-initiated SSO.\nThe initialization of IDP-initiated SSO is little bit complex as it\nrequires a big hostname which includes IDP's SSO link as well as SP's\nlogin uri. So we prefer SP-initiated SSO and here in this documentation\nwe are presenting a very simple SP-initiated SSO steps with Salesforce\nand Gluu Server. Still, you can go for IDP-initiated SSO if you prefer.\nFurther documentation is available at the Salesforce.com site.  Prepare Salesforce.com #   Log into Salesforce.com with your administrative account.  Click on  Setup  in the right upper corner of the page.  You need to add a custom domain name for your Salesforce.com site if\n  you do not have any yet.  Go to  Domain Management  \u2013>  My Domain  Add your custom domain  Wait for some time. Salesforce.com will register this domain name\n  for you. As an example we use  testgluu-dev-ed.my.salesforce.com  here.     Register your Gluu Server information in Salesforce.com  Go to  Security Controls  \u2013>  Single Sign On Settings  Click  New      Now you need to add the information of your Gluu Server here   Name : Anything, whichever is easier for you to recognize this\n   setup, i.e.  Gluu Server  API Name : Gluu Server.  Issuer : EntityID of your Gluu Server, i.e.  https://test.gluu.org/idp/shibboleth  EntityID : Your Salesforce.com custom domain name as chosen\n   above, i.e.  https://testgluu-dev-ed.my.salesforce.com  Identity Provider Certificate : Grab your Gluu Server's SAML\n   certificate. SAML certificate can be grabbed from your Gluu Sever's\n   metadata. Save the certificate and upload it.  Request Signing Certificate : Default certificate  Request Signature Method : RSA-SHA1  Assertion Decryption Certificate : Assertion not encrypted.  SAML Identity Type : Assertion contains user's Salesforce.com username  SAML Identity Location : Identity is in an Attribute element  Attribute Name : Provide 'SAML2 URI' of your attribute. For our test case we are using Gluu Server's Email attribute. How to check the information of your attribute is available  here .  NameID Format : Leave this field empty.  Identity Provider Login URL :  https://test.gluu.org/idp/profile/SAML2/Redirect/SSO  Service Provider Initiated Request Binding : HTTP-Redirect  Here is how our example setup looks like:      Prepare Gluu Server #   How to create SAML trust relationship is available  here .   Grab Salesforce.com metadata from the Salesforce.com website. There is\n  an option named 'Download Metadata':  Modify Salesforce.com metadata a bit:  Remove  AuthnRequestsSigned=\u201ctrue\u201d  from metadata.  Save metadata    Create Trust Relationship:  Display Name : Anything, whichever is easier for you to recognize this trust relationship.  Description : Anything, whichever is easier for you to recognize this trust relationship  Metadata Type : 'File'  Upload salesforce's metadata (your modified one)  Releases attributes: TransientID and Email  'Add' this trust  Configure Specific Relying: It can be done from Gluu Server's GUI (named: oxTrust)  Select 'SAML2SSO'  includeAttributeStatement: Enabled  assertionLifetime: keep the default one  assertionProxyCount: keep the default one  signResponses: conditional  signAssertions: never  signRequests: conditional  encryptAssertions: never  encryptNameIds: never  Save it      'Update' the trust relationship  Here is how it looks like in our example setup:    Test SSO #   Go back to Salesforce.com setup  Security Controls \u2013> Single Sign On Settings  Enable 'Federated Single Sign-On Using SAML'  Go to 'Domain Management'  Configure 'Authentication Configuration'  Select 'Gluu Server'  Save it  Here is how the 'Authentication Configuration' looks like:      This is SP-initiate SSO. So hit your Salesforce.com website link to\ninitiate the SSO.    Here \nis a video link of this SSO.",
            "title": "SAML SSO with Salesforce.com"
        },
        {
            "location": "/admin-guide/integrate/#cisco-webex-sso",
            "text": "Attribute creation with oxTrust #   'WebexNameID'  Name: webexnameid  SAML1 URI: urn:gluu:dir:attribute-def:webexnameid  SAML2 URI: urn:oid:webexnameid  DisplayName: WebexNameID  Type: Text  Edit Type: admin  View Type: admin + user  Usage Type: Not definte  Multivalue: False  SCIM Attribute: False  Description: Custom nameID for WebEx, takes value from uid (through Shibboleth's config files)   'wxemail'  Name: email_webex  SAML1 URI: email  SAML2 URI: email  DisplayName: wxemail  Type: Text  Edit type: admin  View type: admin + user  Usage type: Not defined  Multivalue: False  SCIM Attribute: False  Description: Custom attribute for WebEX SSO. Pulling email from backend.    'wxfirstname'  Name: firstname_webex  SAML1 URI: firstname  SAML2 URI: firstname  Display Name: wxfirstname  Type: Text  Edit Type: admin  View Type: admin + user  Usage Type: Not defined  Multivalued: False  SCIM Attribute: False  Description: Custom attribute for WebEX SSO, pulling 'givenname' from backend.    'wxlastname'  Name: lastname_webex  SAML1 URI: lastname  SAML2 URI: lastname  Display Name: wxlastname  Type: Text  Edit Type: admin  View Type: admin + user  Usage Type: Not defined  Multivalued: False  SCIM Attribute: False  Description: Custom attribute for WebEX SSO, pulling 'sn' from backend.    'wxuid'  Name: uid_webex  SAML1 URI: uid  SAML2 URI: uid  Display Name: wxuid  Type: Text  Edit Type: admin  View Type: admin + user  Usage Type: Not defined  Multivalue: False  SCIM Attribute: False  Description: Custom attribute for WebEX SSO, pulling 'uid' from backend.     Configuring attribute resolver #  Add below snippets in 'attribute-resolver.xml.vm' ( location: /opt/tomcat/conf/shibboleth2/idp )   Attribute definition:    #if( ! ($attribute.name.equals('transientId') or $attribute.name.equals('webexnameid') or $attribute.name.equals('webexnameidmail') or $attribute.name.equals('firstname_webex') or $attribute.name.equals('uid_webex') or $attribute.name.equals('lastname_webex') or $attribute.name.equals('email_webex')  ) )   Attribute declaration:    <resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"firstname_webex\" sourceAttributeID=\"firstname_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"firstname\" />\n    </resolver:AttributeDefinition>\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"uid_webex\" sourceAttributeID=\"uid_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"uid\" />\n    </resolver:AttributeDefinition>\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"lastname_webex\" sourceAttributeID=\"lastname_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"lastname\" />\n    </resolver:AttributeDefinition>\n\n<resolver:AttributeDefinition xsi:type=\"ad:Simple\" id=\"email_webex\" sourceAttributeID=\"email_webex\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"enc:SAML2String\" nameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified\" name=\"email\" />\n    </resolver:AttributeDefinition>\n\n    <resolver:AttributeDefinition id=\"webexnameid\"\n                                      xsi:type=\"Simple\"\n                                      xmlns=\"urn:mace:shibboleth:2.0:resolver:ad\"\n                                      sourceAttributeID=\"uid\">\n        <resolver:Dependency ref=\"siteLDAP\" />\n        <resolver:AttributeEncoder xsi:type=\"SAML2StringNameID\"\n                                   xmlns=\"urn:mace:shibboleth:2.0:attribute:encoder\"\n                                   nameFormat=\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"/>\n    </resolver:AttributeDefinition>   Restart tomcat",
            "title": "Cisco WebEx SSO"
        },
        {
            "location": "/admin-guide/plugin/",
            "text": "OXD\n\n\nDocumentation\n\n\nOpenID Connect RP in CentOS\n\n\nBasic Web Server Installation\n\n\nApache Web Server\n\n\nSSL Configuration\n\n\nConfigure Apache to use SSL\n\n\n\n\n\n\n\n\n\n\nConfiguration of mod_auth_openidc\n\n\nInstallation\n\n\nClient Registration\n\n\nInstall CGI script\n\n\nConfiguring the Apache VirtualHost\n\n\n\n\n\n\nOpenID Connect RP in CentOS\n\n\nInstallation\n\n\nAdd EPEL Repository\n\n\nApache Web Server\n\n\nConfigure SSL Module\n\n\nAuthentication Module (mod_auth_openidc)\n\n\nLoad Authentication Module\n\n\n\n\n\n\nClient Registration\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\nGetting DN from Client ID\n\n\n\n\n\n\n\n\n\n\noxRay\n\n\nOverview\n\n\nDeployment\n\n\nDeploying WAR file using Maven\n\n\nUsing LifeRay Plugin SDK With Ant\n\n\nUsing Binary From Repository\n\n\nClient Registration\n\n\nModifying portal.properties\n\n\n\n\n\n\nLogin Using the LifeRay Front End\n\n\n\n\n\n\n\n\n\n\nOpenID Connect Authentication Java\n\n\nUsing OpenID Connect to authenticate a person in Java\n\n\nDiscovery\n\n\nClient Registration\n\n\nObtaining the id_token\n\n\nLogout\n\n\n\n\n\n\nUsing OpenID Connect from JavaScript\n\n\nApache SAML\n\n\nConfiguring Apache Shibboleth SP in CentOS\n\n\nSystem Preparation\n\n\nShibboleth SP Installation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall and Configure httpd\n\n\nInstallation\n\n\nConfiguration\n\n\nHttpd Testing\n\n\nSP Key Certificate\n\n\nShibboleth SP Configuration\n\n\nShibboleth Manual Configuration (one Physical SP):\n\n\n\n\n\n\nSuper Quick Ubuntu Shib Apache Install\n\n\nConfigure Apache\n\n\n\n\n\n\nConfigure the Shibboleth SP\n\n\nTest\n\n\n\n\n\n\nTroubleshooting\n\n\nIIS SAML Configuration\n\n\nIIS Configuration in Windows 7\n\n\nISAPI Filter Configuration\n\n\n\n\n\n\nShibboleth SP Setup in Windows 2008 R2 with IIS7\n\n\nShibboleth SP 2.5.x Setup\n\n\nTrust Relationship in IdP\n\n\nSP Configuration\n\n\nSSO Testing\n\n\n\n\n\n\nConfiguring Apache Shibboleth SP in Windows\n\n\nShibboleth SP Installation\n\n\nApache Configuration\n\n\nShibboleth and Apache Configuration\n\n\n\n\n\n\nTest SP Installation with Windows and Apache\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOXD\n#\n\n\noxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application. \n\n\nOne significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.\n\n\nDocumentation\n#\n\n\nThe complete documentation for oxd is made available in a separate address. Please see \nthis link\n for the OXD documentation.\n\n\nOpenID Connect RP in CentOS\n#\n\n\nBasic Web Server Installation\n#\n\n\nBefore you can install mod_auth_openidc, you need to have an Apache\nHTTPD server running with SSL enabled. \n\n\nApache Web Server\n#\n\n\nIt is assumed that all the hostnames will be dns resolvable. If not, \nthen add the entries in \n/etc/hosts\n file on both the web server\nand Gluu Server. \n\n\nIf you don't have the Apache HTTPD server installed, use apt-get\nto install the Ubuntu standard distribution:\n\n\n# apt-get install apache2\n# service apache2 start\n\n\n\n\nSSL Configuration\n#\n\n\nThe SSL Module is necessary for the Apache OpenID Connect Module. Please \nuse the following commands to activate the \nssl module\n.\n\n\n# a2enmod ssl\n\n\n\n\nThe next step is to create a self-signed SSL Certificate.\n\n\n\n\nCreate a directory to put the generate the ssl certificate\n\n\n\n\n# mkdir /etc/apache2/ssl`\n# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nAnswer the questions that are asked. A template is given below\n\n\n\n\n    Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:TX\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Acme Inc.\n    Organizational Unit Name (eg, section) []:\n    Common Name (e.g. server FQDN or YOUR name) []:www.mydomain.com\n    Email Address []:help@mydomain.com\n\n\n\n\nConfigure Apache to use SSL\n#\n\n\nThis section will guide you through the steps to configure apache to \nuse the SSL module\n\n\n\n\nOpen the \ndefault-ssl.conf\n file\n\n\n\n\n# vim /etc/apache2/sites-available/default-ssl.conf`\n\n\n\n\n\n\n\n\n\nUpdate the certificate locations with the newly created certificates \n\n/etc/apache2/ssl/apache.key\n and \n/etc/apache2/ssl/apache.crt\n\n\n\n\n\n\nActivate the SSL Virtual Host and CGI\n\n\n\n\n\n\n# a2ensite default-ssl.conf\n# a2enmod cgid\n# service apache2 restart\n\n\n\n\n\nAt this point, its a good time to test to make sure SSL and CGI are \nworking. Point your browser at \nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi\nYou should see a list of current environment variables. \n\n\nConfiguration of mod_auth_openidc\n#\n\n\nInstallation\n#\n\n\nmod_auth_openidc\n module depends on the Ubuntu package \nlibjansson4\n: \n\n\n# apt-get install libjansson\n\n\n\n\n\nYou'll also need the mod_auth_openidc and libjose packages which can \nbe downloaded from the \nReleases Page\n.\n\n\nFor example, at this time the current release is 2.1.3, so the command would be:\n\n\n# wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb\n\n\n\n\n\n\n\nNote\n\n\nGet the latest packages here: https://github.com/pingidentity/mod_auth_openidc/releases\n\n\n\n\nNote, if you like to build from source, you can clone the project at \nGithub Page\n\n\nNow you can enable the module\n\n\n# sudo a2enmod auth_openidc\n# sudo service apache2 restart\n\n\n\n\n\nClient Registration\n#\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\nFor this example, let's create the client manually in the Gluu Server.\nWhen you add the client, use the following parameters:\n\n\nName: mod_auth_openidc\nClient Secret: something-sufficiently-unguessable\nApplication Type: Web\nPre-Authorization: Enabled\nlogin uri: https://www.mydomain.com/callback\nSubject Type: Public\nScopes: openid, profile, email\nResponse Types: code\n\n\n\n\n\nMake a note of the \nclient_secret\n (you won't get to see it again)! You'll\nalso need the \nclient_id\n for the next step.\n\n\nInstall CGI script\n#\n\n\nThis cgi-script makes for a good test page! \n\n\n# vi /usr/lib/cgi-bin/printHeaders.cgi\n\n\n\n\n\nThen paste in this code\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><Head><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\n\nThen you'll need to make the script executable by the Apache2\n\n\n# chown www-data:www-data /usr/lib/cgi-bin/printHeaders.cgi\n# chmod ug+x /usr/lib/cgi-bin/printHeaders.cgi\n\n\n\n\n\nConfiguring the Apache VirtualHost\n#\n\n\nYou are almost done! You'll need to configure mod_auth_openidc to\nprotect your server.\n\n\n# vi /etc/apache2/sites-available/default-ssl.conf\n\n\n\n\n\nAdd the following right under \n<VirtualHost _default_:443>\n\n\nOIDCProviderMetadataURL https://idp.mydomain.com/.well-known/openid-configuration\nOIDCClientID (client-id-you-got-back-when-you-added-the-client)\nOIDCClientSecret (your-client-secret)\nOIDCRedirectURI https://www.mydomain.com/callback\nOIDCResponseType code\nOIDCScope \"openid profile email\"\nOIDCSSLValidateServer Off\nOIDCCryptoPassphrase (a-random-seed-value)\nOIDCPassClaimsAs environment\nOIDCClaimPrefix USERINFO_\nOIDCPassIDTokenAs payload\n<Location \"/\">\n    Require valid-user\n    AuthType openid-connect\n</Location>\n\n\n\n\n\nThen restart Apache to effect the changes\n\n\n# service apache2 restart\n\n\n\n\n\nThe most confusing part here is the \nOIDCRedirectURI\n--don't set this\nto a path used by your server. The apache-filter uses the redirect_uri \nto process the response from the OpenID Provider (Gluu Server). \n\n\nNow you're ready to test. Open your web browser, and point it at \n\nhttps://www.mydomain.com/cgi-bin/printHeaders.py\n \n\n\nIf you're not logged in already, you should be redirected to \nthe authentication page. If you are logged in, you should just see\nan html page with the \nREMOTE_USER\n variable populated. Also\ncheck out the \nOIDC_id_token_payload\n and all the claims for \n\nUSERINFO_\n \n\n\nOpenID Connect RP in CentOS\n#\n\n\nInstallation\n#\n\n\nWe assume that all the hostnames will be dns resolvable. If not, then\nadd the according entries in \n/etc/hosts\n, please.\n\n\nAdd EPEL Repository\n#\n\n\nRun the following command to \nAdd EPEL Repo\n.\n\n\n\n\nrpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm\n\n\n\n\nApache Web Server\n#\n\n\nTo setup \nApache2 SSL\n, run the following commands:\n\n\nyum install httpd mod_ssl\nyum install curl hiredis jansson\n\n\n\n\nConfigure SSL Module\n#\n\n\nThis section will guide you to create SSL certificates.\nUse the following commands to crete a  directory and generate the certificates.\n\n\nmkdir /etc/httpd/ssl\nopenssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key\n\n\n\n\nYou will be prompted to enter some values such as company name, country etc. Please enter them and your certificate will be ready.\n\n\nThe next step is to configure Apache to use the certificates and use the following command to edit the vhost.conf file.\n\n\nvi /etc/httpd/conf.d/vhost.conf\n\n\n\n\nThe important part of the configuration is to enter the path to the created SSL certificates. The example is given below.\n\n\nNote:\n Please make sure to use the correct server name in the configuration file.\n\n\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org\n\n\n\n\nRestart Apache Server and you are done configuring the SSL Module. Use the command below to restart the Apache Server.\n\n\nservice httpd restart\n\n\n\n\nAuthentication Module (mod_auth_openidc)\n#\n\n\nRun the following command to install the \nmod_auth_openidc\n module:\n\n\nrpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm\n\n\n\n\nNote:\n If there are any difficulties installing \nhiredis\n and \njansson\n,\ntry to update the package database of your system using the following command:\n\n\nyum upgrade\n\n\n\n\nLoad Authentication Module\n#\n\n\nPlease make sure that the following shared-object file exists by running the following command:\n\n\nls -l /usr/lib64/httpd/modules/mod_auth_openidc.so\n\n\n\n\nNext, create an \nApache \nconf\n file for loading this module.\n\n\necho -e \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\\nListen 44443\" > /etc/httpd/conf.d/mod_auth_openidc.conf\n\n\n\n\nThe file \n/etc/httpd/conf.d/mod_auth_openidc.conf\n will now contain\nthese two lines:\n\n\nLoadModule auth_openidc_module modules/mod_auth_openidc.so\nListen 44443\n\n\n\n\nThis Apache mod should now be listening on port \n44443\n. To enable\nthis, start the Apache service (running gluuCE at \nce.gluu.org\n):\n\n\nservice httpd start\n\n\n\n\nClient Registration\n#\n\n\nThere are two methods for client registration:\n\n\n\n\nDynamic Client Registration\n\n\nManual Client Registration\n\n\n\n\nYou can use any of the methods to register the client.\n\n\nDynamic Client Registration\n#\n\n\nFor dynamic client registration, we'll name the server: \ndynamic.gluu.org.\n\n\nCreate a directory named \ndynamic\n inside the directory \n/var/www/html\n, that is:\n\n\nmkdir /var/www/html/dynamic\n\n\n\n\nNow, create a file named \nindex.html\n, and add the following content:\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>\n\n\n\n\nCreate another directory named \nmetadata\n inside the directory from\nabove to hold further metadata. Then, change the ownership of this\ndirectory using this command:\n\n\nchown -R apache:apache /var/www/html\n\n\n\n\nLet's create the Apache configuration file now. Create a file named\n\n/etc/httpd/conf.d/dynamic.conf\n with the content as below:\n\n\n<VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n</VirtualHost>\n\n\n\n\nHere, both certificate and key files already exist on the server. You\ncan use your own, too. Next, enable the site by running the\nfollowing command, and restart the Apache service as:\n\n\nln -s /etc/httpd/sites-available/dynamic.conf\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n,\nand you'll be presented with a discovery page. To access this page,\nenter \nadmin@ce.gluu.org\n.\n\n\n\n\nThe usual choice as per present used uris is: \nadmin@ce.gluu.org\n. Note\nthat you have to use an existing user at the gluuCE along with an\nexisting uri. An example is \nexisting_user@your.gluu.ce.server\n.\n\n\nAfter this the \noxAuth\n page from gluuCE is displayed where you enter\nthe credentials for authentication.\n\n\n\n\nManual Client Registration\n#\n\n\nConsidering the \nmanual client registration\n case, we will name the\nserver \nstatic.gluu.org\n, instead.\n\n\nCreate a directory named \n/var/www/html/static\n, i. e. with this\ncommand:\n\n\nmkdir /var/www/html/static\n\n\n\n\nNow, let's create another file named \nindex.html\n with this content:\n\n\n<html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Manual registration\n    </body>\n</html>\n\n\n\n\nThen, change the ownerships by using this command:\n\n\nchown -R apache:apache /var/www/html\n\n\n\n\nCreate a file named \n/etc/httpd/conf.d/static.conf\n with the contents as\nbelow:\n\n\n<VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n</VirtualHost>\n\n\n\n\nInstead of pre-existing cert and key files, feel free to use your own.\nNext, enable the static site by running the following command, and\nrestart the Apache service as below:\n\n\nln -s /etc/httpd/sites-available/sites-available/static.conf\nservice httpd restart\n\n\n\n\nNow, try to access \nthis page\n,\nand you should see the oxAuth page from gluuCE where you enter the\ncredentials for authentication.\n\n\n\n\nChances are there that you'll see this error after logging in: \n\n\nError:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.\n\n\n\n\nThe according Apache log looks like that:\n\n\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n\n\n\n\nTo solve this problem, log into the gluuCE server by running the\nfollowing command:\n\n\nservice gluu-server login\n\n\n\n\nGetting DN from Client ID\n#\n\n\nWe get the client id from the search performed in Gluu Server's Web UI.\nSo, to get the DN part we perform the below command. The LDAP password\ncan be stored in \n/root/.pw\n or at any other location that is convenient\nfor you. In our case the command is:\n\n\n/opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'\n\n\n\n\nCreate a file named \nmod.ldif\n with the contents given below. The DN\npart to be used in \nmod.ldif\n is obtained from output of the command\nabove:\n\n\ndn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n\n\n\n\nThen, run the \nldapmodify\n command to insert the\n\noxAuthSubjectIdentifier\n as below:\n\n\n/opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif\n\n\n\n\nThe command may vary depending upon your installation. Next, access\n\nthis page\n or \n<hostname>:4443/static\n, and the success\nmessage should be visible.\n\n\noxRay\n#\n\n\nLifeRay\n OpenID Connect plugin to authenticate users using Gluu IdP.\n\n\nOverview\n#\n\n\nThe oxAuth LifeRay plugin is used to authenticate and auto-log users\nfrom Gluu Server into \nLifeRay\n with the same credentials. It\nis built on top of oxAuth, the OpenID Connect provider by Gluu.\n\n\nThe oxAuth plugin intercepts any attempt to login from anywhere in the\nLifeRay and redirects the request and the user to an oxAuth server where\nthe identification takes place, actually. If the user has authorized the\nserver to share some of his basic information with the oxAuth plugin,\nthe user will be redirected back to the LifeRay CMS, and logged in,\nautomatically.\n\n\nThe goal of this project is to use the LifeRay CMS as the basis for an\norganizational personal data store service.\n\n\nNote: This plugin does not support auto-user creation from information\nsupplied by the oxAuth Plugin. Instead, it can be implemented by\nextending the plugin.\n\n\nDeployment\n#\n\n\nThe plugin is provided in two variants--\nMaven\n and \nAnt\n.\nYou can either use Maven or the LifeRay plugin SDK to build and deploy\nthis plugin as a standard LifeRay hot deployable WAR file.\n\n\nDeploying WAR file using Maven\n#\n\n\nThis requires a prerequisite: make sure that you have \nMaven\n\ninstalled on your system to build this plugin from source.\n\n\n\n\n\n\nCheckout the Maven source from the [oxRay Repository][https://github.com/GluuFederation/oxRay/tree/master/6.2.x/maven/gluu-openid-connect-hook].\n\n\n\n\n\n\nOpen the file \npom.xml\n in \ngluu-openid-connect-hook\n, and update\nyour local LifeRay Tomcat bundle path. This is required for building the\nWAR file and deploying to the LifeRay Tomcat bundle.\n\n\n\n\n\n\n\n\n\n\nRun the following command in the \ngluu/6.2.x/maven/gluu-openid-connect-hook\n \ndirectory:\n\n\n\n\nmvn clean install package liferay:deploy\n\n\n\n\nThis will take a few seconds to download the dependency \njar\n files, and\ngenerate the LifeRay-compiled deployable WAR file. It will be placed\nwithin your \n<liferay-bundle-folder>/deploy\n directory, and the hot\ndeployable process will start.\n\n\nUsing LifeRay Plugin SDK With Ant\n#\n\n\nThis requires a prerequisite: we assume that you have the plugin SDK\nboth installed and configured with LifeRay bundle.\n\n\n\n\n\n\nCheckout the gluu-openid-connect-hook plugin source from the\nrepository, and place these files in your local directory for the plugin\nSDK. Usually, this is \nliferay-plugins-sdk-6.2.0-ce-ga1/hooks\n.\n\n\n\n\n\n\nRun the following command in the folder \nliferay-plugins-sdk-6.2.0-ce-ga1/hooks/gluu-openid-connect-hook\n:\n\n\n\n\n\n\nant clean deploy\n\n\n\n\nUsing Binary From Repository\n#\n\n\nYou can also download a compiled binary as a standard LifeRay deployable\nWAR file from the following location:\n\n\noxRay LifeRay Deployable War File\n\n\nCopy this WAR file in your LifeRay bundle. Usually, this is located at\n\nliferay-portal-6.2.0-ce-ga1/deploy\n.\n\n\nOnce the plugin is deployed as a WAR file either using Maven or Ant, you\nwill see the following success message in your LifeRay Tomcat server:\n\n\n\n\nClient Registration\n#\n\n\nA LifeRay application needs to be registered with the Authorization\nserver before initiating an authentication request/response with OAuth\nIdP server.\n\n\nThe following steps are necessary to obtain both a client id and a\nclient secret. These data will be used within the LifeRay portal\nproperties.\n\n\n\n\nGo to the location \nhttps://seed.gluu.org/oxauth-rp/home.seam\n.\n\n\nYou will see the Dynamic Client Registration Section.\n\n\nEnter the Registration Endpoint uri, for example\n\nhttps://idp.example.org/oxauth/seam/resource/restv1/oxauth/authorize\n.\n\n\nYou can derive this uri from your IdP auto-discovery uri which is\nlike that: \nhttps://<Your IDP Server Domain>/.well-known/openid-configuration\n.\n\n\nYou can search for the registration endpoint, and copy that uri here.\n\n\n\n\n\n\nEnter the redirect uris as \nhttp://localhost:8080/openidconnect/callback\n:\n\n\nReplace your domain name with \nlocalhost:8080\n\n\nThis will be your LifeRay handler for logging a user into LifeRay,\nautomatically, when a redirect comes back from the OAuth server.\n\n\n\n\n\n\nSelect the Response Types: CODE\n\n\nSelect the Application Type: WEB\n\n\nFor development purposes use: NATIVE (if you are testing on a local\nmachine with \nlocalhost:8080\n domain)\n\n\nEnter Client Name: LifeRay App (you can choose any name here).\n\n\nAll other options can be left as they are--please see the attached\nscreenshot:\n\n\n\n\n\n\n\n\nClick \nSubmit\n, and both the following \nRegistration Request\n and\n\nRegistration Response\n will be displayed:\n\n\n\n\n\n\n\n\nSave the Registration Response to your local system. The parameters\n\nclient_id\n and \nclient_secret\n are used in LifeRay when configuring\n\nportal-ext.properties\n.\n\n\n\n\nModifying portal.properties\n#\n\n\nIt is necessary to modify \nportal-ext.properties\n file to reflect oxAuth\nserver client credentials and server's URL. It can be accomplished by\nnavigating into the \nliferay-portal-6.2.0-ce-ga1\n folder, where the file\n\nportal-ext.properties\n is stored.\n\n\n\n\nNote\n\n\nTo either activate or deactivate the oxAuth plugin put the value\n\n\n\n\ntrue\n (to activate) or \nfalse\n (to deactivate), respectively.\n\n\ngluu.openidconnect.auth.enabled=true\n\n\n\n\n\n\noxAuth client ID and client secret:\n\n\n\n\ngluu.openidconnect.client.id=@!1111!0008!51CE.1E59\ngluu.openidconnect.client.secret=65777eb7-87a8-4d60-9dbc-d31d43971f2b\n\n\n\n\n\n\nOAuth server domain\n\n\n\n\ngluu.openidconnect.idp.domain=https://idp.gluu.org`\n\n\n\n\n\n\nOAuth server auto discovery uri\n\n\n\n\ngluu.openidconnect.url.discovery=https://idp.gluu.org/.well-known/openid-configuration\n\n\n\n\n\n\nYour OAuth server logout uri (typically, this will be used to logout a\nuser from OAuth when a user logs out from LifeRay)\n\n\n\n\ngluu.openidconnect.idp.logout=https://idp.gluu.org/identity/logout\n\n\n\n\n\n\nLifeRay server callback uri that will be used as a handling response\nby the OAuth server after authentication:\n\n\nreplace the \nlocalhost:8080\n with your LifeRay domain name:\n\n\n\n\ngluu.openidconnect.client.redirect.url=http://localhost:8080/openidconnect/callback\n\n\n\n\n This page will be invoked when the user does not exist in the\n LifeRay database, but gets authenticated from the OAuth Server.\n\n\n\n\n\nTypically, create a LifeRay page with the name \n/no-such-user-found\n,\n  or redirect to the LifeRay registration page uri like that:\n\n\n\n\ngluu.openidconnect.no.such.user.redirect.url=http://localhost:8080/no-such-user-found\n\n\n\n\nRestart the LifeRay server after editing the file\n\nportal-ext.properties\n.\n\n\nLogin Using the LifeRay Front End\n#\n\n\n\n\n\n\nServer Bootup\n\n\n\n\nOnce the LifeRay server is restarted, open your browser and\n  navigate to the uri \nhttp://localhost:8080\n.\n\n\n\n\n\n\n\n\nLogin uri\n\n\n\n\nOnce the LifeRay page successfully loaded navigate to the OpenID\n  connect page at \nhttp://localhost:8080/openidconnect/login\n.\n\n\n\n\n\n\n\n\nNote: you can edit the theme code, and link to the login uri as\n\nhttp://localhost:8080/openidconnect/login\n. In result the user will\nalways redirect to the OAuth server for authentication.\n\n\n\n\nOAuth authentication\n\n\nThe LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:\n\n\n\n\n\n\n\n\n\n\n\n\nRequest for permission\n\n\nThis screen can be configured depending upon your OAuth Server\n  implementation.\n\n\n\n\n\n\n\n\n\n\n\n\nOAuth callback (user auto-login to LifeRay)\n\n\nAfter a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:\n\n\n\n\n\n\n\n\nhttp://localhost:8080/openidconnect/callback?code=xxx`\n\n\n\n\nThis will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.\n\n\n\n\nOpenID Connect Authentication Java\n#\n\n\nUsing OpenID Connect to authenticate a person in Java\n#\n\n\nThe \nOpenID Connect\n Protocol offers Java\ndevelopers a way to authenticate a person at any Internet domain that\nsupports the standard. To accomplish this, the domain must provide a way\nto register clients--the website and mobile applications that use the\nauthentication API offered by the domain.\n\n\nDiscovery\n#\n\n\nDiscovery is the first step! Luckily, its super-easy! All you have to \ndo is make a get request to\n\nhttps://{domain}/.well-known/openid-configuration\n.\n\n\nThis will return a JSON object, as described in the\n\nspecification\n.\nFor example, you can see Gluu's OpenID Connect discovery\n\nurl\n.\n\n\nThis will tell you everything you need to know about this OpenID Connect\nprovider, like what are the endpoints (URLs), what crypto is supported,\nand what user claims can you ask for.\n\n\nAn \nexample\n\nof a Discovery Request, using the oxAuth RP library.\n\n\nClient Registration\n#\n\n\nIn SAML, the website was called a \"Service Provider.\" In OpenID Connect,\nthe website (or mobile application) is called a \"Client\". Clients can be\nregistered manually by the OP, but more frequently, clients use the\n\nDynamic Registration\nAPI\n to\nautomate the process.\n\n\nObtaining the id_token\n#\n\n\nAfter your client is registered, it is time to get down to business.\nOpenID Connect offers two common workflows for authentication: basic\n(where the person is using a browser, and can be re-directed) and\nimplicit where the client sends the credentials, including the secret.\nThere is a useful implements guide for\n\nbasic\n and\n\nimplicit\n.\n\n\nLogout\n#\n\n\nOpenID Connect defines a mechanism for \nSession\nManagement\n.\nThe idea is that JavaScript in a web tab can detect that another tab has\nlogged out. One detection of a logout event, the Web application can\ncleanup sessions in any backend systems as necessary. It is not 100%\neffective. If the tab is closed when the logout occurs in another tab,\nthe event may not be detected, and the backend systems are advised to\ntimeout sessions.\n\n\nUsing OpenID Connect from JavaScript\n#\n\n\nSee \nOpenID Connect plugin for Passport\n for further details.\n\n\nApache SAML\n#\n\n\nConfiguring Apache Shibboleth SP in CentOS\n#\n\n\nSystem Preparation\n#\n\n\nAdd Shibboleth repository for CentOS\n\n\n\n\nThe file \nshib.repo\n contains the following entry:\n\n\n\n\n[security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1\n\n\n\n\n\n\nDownload the Shibboleth security repo key from here:\n\n\n\n\nhttp://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo\n\n\n\n\nShibboleth SP Installation\n#\n\n\nTo install the Shibboleth SP, run the following commands in a terminal:\n\n\n# yum install shibboleth\n# service shibd start\n# chkconfig shibd on\n\n\n\n\nInstall and Configure httpd\n#\n\n\nInstallation\n#\n\n\nThe following commands will both install, and start the Apache web\nserver on your machine/Linux environment:\n\n\n# yum install httpd\n# service httpd start\n# service iptables stop \n\n\n\n\nConfiguration\n#\n\n\nEdit the file \nhttpd.conf\n, and do the following changes:\n\n\n\n\n\n\nChange the \nServerName\n directive to the server name of the SP.\n\n\n\n\n\n\nSet \nUseCanonicalName On\n.\n\n\n\n\n\n\nRestart the httpd service using the command \nservice httpd restart\n.\n\n\n\n\n\n\nHttpd Testing\n#\n\n\n\n\n\n\nCreate an \nindex.html\n file inside the directory \n/var/www/html\n.\n\n\n\n\n\n\nRestart the httpd service using the command \nservice httpd restart\n.\n\n\n\n\n\n\nCheck from your browser if the file \nindex.html\n is visible.\n\n\n\n\n\n\nSP Key Certificate\n#\n\n\n\n\n\n\nCreate both a private key, and a certificate, and place those in the\n  file \n/etc/shibboleth\n.\n\n\n\n\n\n\nChange the permissions of these files so that the web server can read\n  the files.\n\n\n\n\n\n\nShibboleth SP Configuration\n#\n\n\nThis section describes how to configure the file \nshibboleth2.xml\n.\n\n\n\n\n\n\nProvide the \nentityID\n of the according SP in:\n\n\n\n\n<ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"> section\n\n\n\n\n\n\n\n\nProvide the \nentityID\n of the IdP in:\n\n\n\n\n<SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"> section\n\n\n\n\n\n\n\n\nAdjust the entry of the metadata provider. In most cases this is the\n  Gluu IdP metadata link:\n\n\n\n\n<MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"> section\n\n\n\n\n\n\n\n\nProvide both the key and certificate of the SP in:\n\n\n\n\n<CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"> section\n\n\n\n\n\n\n\n\nShibboleth Manual Configuration (one Physical SP):\n#\n\n\n\n\n\n\nCreate a directory named under \n/var/www/secure\n.\n\n\n\n\n\n\nChange the permissions for that directory \nsecure\n to\n  \napache:apache\n (owner and group of the web server).\n\n\n\n\n\n\nhttpd.conf\n\n\n\n\n\n\nchange the ServerName \n<hostname_of_server>\n\n\n\n\n\n\nDefine the Location, and the authorization type:\n\n\n<Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>\n\n\n\n\n\n\n\n\n\n\nconfigure \nshibboleth2.xml\n\n\n\n\n\n\nSet the EntityID of the SP: \nApplicationDefaults entityID=\"http://hostname/secure\"\n\n\n\n\n\n\nProvide the EntityID of the IDP: \nSSO entityID=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\nSet both the Metadata Provider, and the IDP: \nMetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"\n\n\n\n\n\n\n\n\n\n\nRestart both shibd and Apache2 using these lines:\n\n\n\n\n\n\nservice shibd restart\nservice httpd restart\n\n\n\n\n\n\nCreate a Trust Relationship for this SP in your desired IdP.\n\n\n\n\nSuper Quick Ubuntu Shib Apache Install\n#\n\n\nNeed to protect a test Apache folder using SAML on an Ubuntu server?\nHate to read? This article is for you. Replace both \nminnow\n and\n\nminnow.gluu.info\n with your desired website hostname.\n\n\nConfigure Apache\n#\n\n\nThese are the steps to configure your Apache webserver properly:\n\n\n# apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start\n\n\n\n\nDownload \nminnow-metadata.xml\n to your machine. You will need this file\nlater when you create the Trust Relationship in the Gluu Server.\n\n\n# mkdir /var/www/protected\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py\n\n\n\n\nEdit \nprintHeaders.py\n, and add this simple script. It will show you the\nHTTP headers:\n\n\n#!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"\n\n\n\n\nEdit the default site at \n/etc/apache2/sites-available/default-ssl.conf\n, \nand add this part:\n\n\nScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>\n\n\n\n\nConfigure the Shibboleth SP\n#\n\n\nUse this for \nshibboleth2.xml\n and replace \nsquid.gluu.info\n with the\nhostname of your SP, and \nalbacore.gluu.info\n with the hostname of your\nIDP.\n\n\n<SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"squid.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://squid.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/squid.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>\n\n\n\n\nCopy this file into \n/etc/shibboleth/attribute-map.xml\n:\n\n\n\n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>\n\n\n\n\nNow you need to create a Trust Relationship in your Gluu Server. Login,\ngo to SAML / Trust Relationships, and \"Add Relationship\":\n\n\n\n\nThen, configure for SAML2SSO profile. Click on the checkbox to\n\"Configure specific RelyingParty\":\n\n\n\n\nThen, click to add the SAML2SSO profile:\n\n\n\n\nThen \"Save\" and \"Update.\" Wait 5 minutes for the Shibboleth IDP to detect reload the metadata or\nstop and start tomcat.\n\n\nTest\n#\n\n\nTest the CGI script at \nhttps://minnow.gluu.info/protected/printHeaders.py\n.\nEnter both the valid username and password (like \nadmin\n and your\ninitial admin password). The output will contain something like this:\n\n\n**Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://brookie.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f\n\n\n\nTroubleshooting\n#\n\n\n\n\n\n\nMake sure you update your hosts file on the Gluu Server, Apache\n   server, and your workstation--this won't work with IP addresses,\n   only.\n\n\n\n\n\n\nCheck the Shibboleth log file \n/opt/idp/logs/idp-process.log\n if you\n   don't see the headers or REMOTE_USER environment variables. Also,\n   restart the Apache Tomcat service by \nservice tomcat restart\n to \n   make sure the new Shibboleth IDP xml files were loaded.\n\n\n\n\n\n\nClear the cookies in your web browser for both the Apache site, and \n   the Gluu Server if you are logging in and logging out a lot with \n   lots of server restarts.\n\n\n\n\n\n\nIIS SAML Configuration\n#\n\n\nIIS Configuration in Windows 7\n#\n\n\n\n\n\n\nStart --> Control Panel --> Programs --> \"Turn Windows features on or off\"\n\n\n\n\n\n\nSelect (i) IIS (ii) Web Management Tools (iii) II6 Management Compatibility (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service\n\n\n\n\n\n\nSelect (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --> Press OK.\n\n\n\n\n\n\n\nTest IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.\n\n\n\n\n\n\n\nISAPI Filter Configuration\n#\n\n\n\n\n\n\nOpen IIS Manager (Start --> Administrative Tools --> Internet Information Service/IIS Manager)\n\n\n\n\n\n\nDouble click on \"ISAPI and CGI Restrictions\"\n\n\n\n\n\n\n\nAdd a new Filter\n\n\n\n\n\n\na. Click Actions --> Add (upper right corner)\n\n\nb. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\nc. Description: \"Shibboleth\"\n\n\nd. Click \"Allow\" (from the right hand side)\n\n\n\n\ne. Back to IIS Manager --> ISAPI Filters\n\n\n\n\n    1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"\n\n\n\n\n\nf. SSO file extension mapping\n\n\n    1. Click on \"Handler Mapping\" from main page\n\n\n\n\n\n    2. Click \"Add Script Map\" from Action\n\n\n\n\n\n    3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"\n\n\n\n\n\ng. Restart IIS\n\n\nh. Check Status\n\n\nCheck Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.\n\n\n\nShibboleth SP Setup in Windows 2008 R2 with IIS7\n#\n\n\n\n\nOpen up \"Server Manager\", scroll down and click on \"Add Roles\".\n\n\n\n\n\n\n\n\nHit \"Next\"\n\n\n\n\n\n\n\n\nSelect \"Web Server (IIS)\", hit \"Next\"\n\n\n\n\n\n\n\n\nSelect (i) CGI\n\n\n\n\n(ii) ISAPI Extensions\n\n\n(iii) ISAPI Filters\n\n\n(iv) Management Tools\n\n\n(a) IIS Management Console\n\n\n(b) IIS Management Scripts and Tools\n\n\n(c) Management Service\n\n\n(v) All IIS6 Management Compatibility\n\n\n\n\n\n\n\n\nHit \"Next\", for the confirmation, check the list of plugins.\n\n\n\n\n\n\n\n\n\n\nHit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.\n\n\n\n\n\n\n7.Test IIS7 setup from the Internet.\n\n\n\n\nShibboleth SP 2.5.x Setup\n#\n\n\n\n\n\n\nDown the \nShibboleth SP 2.5.x\n\n\n\n\n\n\nStart the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".\n\n\n\n\n\n\n\n\n\n\nAfter the completion of the installation, the system will ask to reboot the system; hit \"Yes\".\n\n\n\n\n\n\n\n\nTest the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.\n\n\n\n\n\n\nTrust Relationship in IdP\n#\n\n\n\n\nCreate a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in the IdP. Please note that the CN of the public certificate MUST BE the same as \nHostname\n of the SP. Hit \"Add\".\n\n\n\n\n\n\n\n\nDownload the IdP generated configuration files for Shib SP modification.\n\n\n\n\n\n\nSP Configuration\n#\n\n\n\n\n\n\nThe files from the IdP must be placed in the SP Configuration.\n\n\n\n\n\n\nBefore placing them inside the SP Configuration please check\n\n\n\n\n\n\n(a) The \"spcert.crt\" file has the CN same as the SP hostname.\n\n\n(b) The \"spcert.crt\" and \"spkey.key\" has the same \nmd5sum\n value.\n\n\n(c) The IdP-metadata is perfectly placed inside the SP Configuration.\n\n\n(d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.\n\n\n\n\nFor testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.\n\n\n\n\n\n\nSSO Testing\n#\n\n\n\n\n\n\nPlace the following URL in the web browser: \"https://SP_Name/secure\"\n\n\n\n\n\n\nIt will redirect the user to the IdP for authentication.\n\n\n\n\n\n\nAfter the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.\n\n\n      xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">\n\n\n\n      \n\n      \n\n\n\n      \n\n        \n\n              \n\n        \n\n      \n\n\n\n      \n\n      \n\n\n\n      \n\n      \n\n      \n\n      \n\n\n\n      \n\n        \n\n                \n\n                \n\n                \n\n        \n\n      \n\n\n\n  \n\n\n<!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    -->\n<Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\">\n\n    <!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -->\n\n    <!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -->\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\">\n               <SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/>\n               <SessionInitiator type=\"Shib1\" acsIndex=\"5\"/>\n            </SessionInitiator>\n\n    <!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -->\n    <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/>\n            <md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/>\n            <md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/>\n\n    <!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -->\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\">\n            <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n    <!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -->\n            <md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -->\n            <md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -->\n            <md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n\n    <!-- Extension service that generates \"approximate\" metadata based on SP configuration. -->\n            <Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/>\n\n            <!-- Status reporting service. -->\n            <Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/>\n\n            <!-- Session diagnostic service. -->\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n\n</Sessions>\n\n<!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -->\n    <Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n<!-- Uncomment and modify to tweak settings for specific IdPs or groups. -->\n    <RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/>\n\n<!-- Chains together all your metadata sources. -->\n    <MetadataProvider type=\"Chaining\">\n    <MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/>\n    </MetadataProvider>\n\n<!-- Chain the two built-in trust engines together. -->\n    <TrustEngine type=\"Chaining\">\n            <TrustEngine type=\"ExplicitKey\"/>\n            <TrustEngine type=\"PKIX\"/>\n    </TrustEngine>\n\n<!-- Map to extract attributes from SAML assertions. -->\n    <AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/>\n\n    <!-- Use a SAML query if no attributes are supplied during SSO. -->\n    <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n\n    <!-- Default filtering policy for recognized attributes, lets other data pass. -->\n    <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n\n<!-- Simple file-based resolver for using a single keypair. -->\n    <!-- <CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/> -->\n\n    <!-- TODO is password needed? -->\n    <CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" />\n\n</ApplicationDefaults>\n\n<!-- Each policy defines a set of rules to use to secure messages. -->\n    <SecurityPolicies>\n    <!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    -->\n<Policy id=\"default\" validate=\"false\">\n            <PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/>\n            <PolicyRule type=\"Conditions\">\n                <PolicyRule type=\"Audience\"/>\n                <!-- Enable Delegation rule to permit delegated access. -->\n                <!-- <PolicyRule type=\"Delegation\"/> -->\n            </PolicyRule>\n            <PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/>\n            <PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/>\n            <PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/>\n    </Policy>\n    </SecurityPolicies>\n\n\n\n\n\n\n\n\n\nConfiguring Apache Shibboleth SP in Windows\n#\n\n\nShibboleth SP Installation\n#\n\n\n\n\n\n\nDownload the MSI of Shibboleth-SP from:\n   http://www.shibboleth.net/downloads/service-provider/latest/ .\n\n\n\n\n\n\nStart the installation\n\n\n\n\n\n\n\n\nDefine the destination folder (by default it is: C:\\opt\\shibboleth-sp).\n\n\n\n\n\n\n\n\nSelect the Shibboleth Daemon port. By default it is 1600, and you may\n   keep it for testing it, locally.\n\n\n\n\n\n\n\n\nNow, there are two options. According to your target you will have to\nchoose one.\n\n\n\n\n\n\nOption 1: If you install Shibboleth for the Apache Web Server\n\n\n\n\n\n\nOption 2: If you install Shibboleth for Microsoft IIS Web Server\n\n\na. For the Microsoft IIS Web Server, CHECK \"Install ISAPI filter and configure IIS\". Remember to put the fie Extension \".sso\" is necessary.\n\n\n\n\nb. For the Apache Web Server, UNCHECK \"Install ISAPI filter and configure IIS\".\n\n\n\n\n\n\n\n\nUAC of Windows 7 may block this program, so allow it.\n\n\n\n\n\n\n\n\n\n\n\n\nApache Configuration\n#\n\n\n1. Download the Apache HTTP server MSI Installer with OpenSSL:\n   http://httpd.apache.org/download.cgi#apache22 .\n\n![IMAGE](/img/admin-guide/plugin/admin_sp_apacheclick.png)\n\n2. Select the destination. You can keep the default destination for your local testing. But, make sure that there is no other \"Apache Software Foundation\" directory in your current \"C:\\Program Files\\\" location.\n\n![IMAGE](/img/admin-guide/plugin/admin_sp_apachedestination.png)\n\n3. Provide the Server Information. For local testing you can use\n   `localdomain/localhost`.\n\n![IMAGE](/img/admin-guide/plugin/admin_sp_serverinfo.png)\n\n4. Test whether the Apache web server is installed or not. Open your web\nbrowser and use `localhost`. If you see something like the image shown\nbelow--you are done!\n\n\n\n\n\nShibboleth and Apache Configuration\n#\n\n\n\n\nChange the permission of the Apache installation directory, and\n   provide \"write\" access.\n\n\n\n\nhttpd.conf\n configuration\n\n\n\n\n\n\nChange \"ServerName localhost:80\" (for your local testing)\n\n\n\n\n\n\nCopy \napache22.conf\n from the Shibboleth directory to \n~/apache/conf/extra/\n\n\n\n\n\n\n\n\n\n\nShibboleth2.xml\n configuration\n\n\n\n\n\n\nChange: Host name=\"localhost\" (for local testing)\n\n\n\n\n\n\nChange: entityID=\"https://localhost/shibboleth\" (for local testing)\n\n\n\n\n\n\nChange: ApplicationOverride id=\"admin\" entityID=\"https://localhost/shibboleth/\"\n\n\n\n\n\n\n\n\n\n\nReboot your windows machine.\n\n\n\n\n\n\nTest SP Installation with Windows and Apache\n#\n\n\n\n\nOpen the web browser, and provide the address:\n   \nlocalhost/Shibboleth.sso/Status\n\n\nIf you can see some XML page like the one shown below--you are done\n   with your SP installation in Windows through Apache2.\n\n\n\n\na",
            "title": "Plugin Integration"
        },
        {
            "location": "/admin-guide/plugin/#oxd",
            "text": "oxd is a mediator, a service demon that listens on localhost, providing easy APIs that can be called by a web application to simplify using an external OAuth2 server for authentication or authorization. oxd is not a proxy--sometimes it makes API calls on behalf of an application, but other times it just forms the right URLs and returns them to the application.   One significant advantage of using oxd over a native client library is that oxd consolidates the OAuth2 code in one package. If there are updates to the OAuth2 client code, you can update the oxd-server package, without changing the interface to the application.",
            "title": "OXD"
        },
        {
            "location": "/admin-guide/plugin/#documentation",
            "text": "The complete documentation for oxd is made available in a separate address. Please see  this link  for the OXD documentation.",
            "title": "Documentation"
        },
        {
            "location": "/admin-guide/plugin/#openid-connect-rp-in-centos",
            "text": "Basic Web Server Installation #  Before you can install mod_auth_openidc, you need to have an Apache\nHTTPD server running with SSL enabled.   Apache Web Server #  It is assumed that all the hostnames will be dns resolvable. If not, \nthen add the entries in  /etc/hosts  file on both the web server\nand Gluu Server.   If you don't have the Apache HTTPD server installed, use apt-get\nto install the Ubuntu standard distribution:  # apt-get install apache2\n# service apache2 start  SSL Configuration #  The SSL Module is necessary for the Apache OpenID Connect Module. Please \nuse the following commands to activate the  ssl module .  # a2enmod ssl  The next step is to create a self-signed SSL Certificate.   Create a directory to put the generate the ssl certificate   # mkdir /etc/apache2/ssl`\n# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt   Answer the questions that are asked. A template is given below       Country Name (2 letter code) [AU]:US\n    State or Province Name (full name) [Some-State]:TX\n    Organization Name (eg, company) [Internet Widgits Pty Ltd]:Acme Inc.\n    Organizational Unit Name (eg, section) []:\n    Common Name (e.g. server FQDN or YOUR name) []:www.mydomain.com\n    Email Address []:help@mydomain.com  Configure Apache to use SSL #  This section will guide you through the steps to configure apache to \nuse the SSL module   Open the  default-ssl.conf  file   # vim /etc/apache2/sites-available/default-ssl.conf`    Update the certificate locations with the newly created certificates  /etc/apache2/ssl/apache.key  and  /etc/apache2/ssl/apache.crt    Activate the SSL Virtual Host and CGI    # a2ensite default-ssl.conf\n# a2enmod cgid\n# service apache2 restart  At this point, its a good time to test to make sure SSL and CGI are \nworking. Point your browser at \nhttps://www.mydomain.com/cgi-bin/printHeaders.cgi\nYou should see a list of current environment variables.",
            "title": "OpenID Connect RP in CentOS"
        },
        {
            "location": "/admin-guide/plugin/#configuration-of-mod_auth_openidc",
            "text": "Installation #  mod_auth_openidc  module depends on the Ubuntu package  libjansson4 :   # apt-get install libjansson  You'll also need the mod_auth_openidc and libjose packages which can \nbe downloaded from the  Releases Page .  For example, at this time the current release is 2.1.3, so the command would be:  # wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# wget https://github.com/pingidentity/mod_auth_openidc/releases/download/v2.1.3/libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libcjose_0.4.1-1ubuntu1.trusty.1_amd64.deb\n# dpkg -i libapache2-mod-auth-openidc_2.1.3-1ubuntu1.trusty.1_amd64.deb   Note  Get the latest packages here: https://github.com/pingidentity/mod_auth_openidc/releases   Note, if you like to build from source, you can clone the project at  Github Page  Now you can enable the module  # sudo a2enmod auth_openidc\n# sudo service apache2 restart  Client Registration #  There are two methods for client registration:   Dynamic Client Registration  Manual Client Registration   For this example, let's create the client manually in the Gluu Server.\nWhen you add the client, use the following parameters:  Name: mod_auth_openidc\nClient Secret: something-sufficiently-unguessable\nApplication Type: Web\nPre-Authorization: Enabled\nlogin uri: https://www.mydomain.com/callback\nSubject Type: Public\nScopes: openid, profile, email\nResponse Types: code  Make a note of the  client_secret  (you won't get to see it again)! You'll\nalso need the  client_id  for the next step.  Install CGI script #  This cgi-script makes for a good test page!   # vi /usr/lib/cgi-bin/printHeaders.cgi  Then paste in this code  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><Head><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"  Then you'll need to make the script executable by the Apache2  # chown www-data:www-data /usr/lib/cgi-bin/printHeaders.cgi\n# chmod ug+x /usr/lib/cgi-bin/printHeaders.cgi  Configuring the Apache VirtualHost #  You are almost done! You'll need to configure mod_auth_openidc to\nprotect your server.  # vi /etc/apache2/sites-available/default-ssl.conf  Add the following right under  <VirtualHost _default_:443>  OIDCProviderMetadataURL https://idp.mydomain.com/.well-known/openid-configuration\nOIDCClientID (client-id-you-got-back-when-you-added-the-client)\nOIDCClientSecret (your-client-secret)\nOIDCRedirectURI https://www.mydomain.com/callback\nOIDCResponseType code\nOIDCScope \"openid profile email\"\nOIDCSSLValidateServer Off\nOIDCCryptoPassphrase (a-random-seed-value)\nOIDCPassClaimsAs environment\nOIDCClaimPrefix USERINFO_\nOIDCPassIDTokenAs payload\n<Location \"/\">\n    Require valid-user\n    AuthType openid-connect\n</Location>  Then restart Apache to effect the changes  # service apache2 restart  The most confusing part here is the  OIDCRedirectURI --don't set this\nto a path used by your server. The apache-filter uses the redirect_uri \nto process the response from the OpenID Provider (Gluu Server).   Now you're ready to test. Open your web browser, and point it at  https://www.mydomain.com/cgi-bin/printHeaders.py    If you're not logged in already, you should be redirected to \nthe authentication page. If you are logged in, you should just see\nan html page with the  REMOTE_USER  variable populated. Also\ncheck out the  OIDC_id_token_payload  and all the claims for  USERINFO_",
            "title": "Configuration of mod_auth_openidc"
        },
        {
            "location": "/admin-guide/plugin/#openid-connect-rp-in-centos_1",
            "text": "Installation #  We assume that all the hostnames will be dns resolvable. If not, then\nadd the according entries in  /etc/hosts , please.  Add EPEL Repository #  Run the following command to  Add EPEL Repo .   rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm   Apache Web Server #  To setup  Apache2 SSL , run the following commands:  yum install httpd mod_ssl\nyum install curl hiredis jansson  Configure SSL Module #  This section will guide you to create SSL certificates.\nUse the following commands to crete a  directory and generate the certificates.  mkdir /etc/httpd/ssl\nopenssl req -new -x509 -sha256 -days 365 -nodes -out /etc/httpd/ssl/httpd.pem -keyout /etc/httpd/ssl/httpd.key  You will be prompted to enter some values such as company name, country etc. Please enter them and your certificate will be ready.  The next step is to configure Apache to use the certificates and use the following command to edit the vhost.conf file.  vi /etc/httpd/conf.d/vhost.conf  The important part of the configuration is to enter the path to the created SSL certificates. The example is given below.  Note:  Please make sure to use the correct server name in the configuration file.      SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n    ServerAdmin support@gluu.org\n    ServerName gluu.org  Restart Apache Server and you are done configuring the SSL Module. Use the command below to restart the Apache Server.  service httpd restart  Authentication Module (mod_auth_openidc) #  Run the following command to install the  mod_auth_openidc  module:  rpm -ivh https://github.com/pingidentity/mod_auth_openidc/releases/download/v1.8.2/mod_auth_openidc-1.8.2-1.el6.x86_64.rpm  Note:  If there are any difficulties installing  hiredis  and  jansson ,\ntry to update the package database of your system using the following command:  yum upgrade  Load Authentication Module #  Please make sure that the following shared-object file exists by running the following command:  ls -l /usr/lib64/httpd/modules/mod_auth_openidc.so  Next, create an  Apache  conf  file for loading this module.  echo -e \"LoadModule auth_openidc_module modules/mod_auth_openidc.so\\nListen 44443\" > /etc/httpd/conf.d/mod_auth_openidc.conf  The file  /etc/httpd/conf.d/mod_auth_openidc.conf  will now contain\nthese two lines:  LoadModule auth_openidc_module modules/mod_auth_openidc.so\nListen 44443  This Apache mod should now be listening on port  44443 . To enable\nthis, start the Apache service (running gluuCE at  ce.gluu.org ):  service httpd start",
            "title": "OpenID Connect RP in CentOS"
        },
        {
            "location": "/admin-guide/plugin/#client-registration_1",
            "text": "There are two methods for client registration:   Dynamic Client Registration  Manual Client Registration   You can use any of the methods to register the client.  Dynamic Client Registration #  For dynamic client registration, we'll name the server:  dynamic.gluu.org.  Create a directory named  dynamic  inside the directory  /var/www/html , that is:  mkdir /var/www/html/dynamic  Now, create a file named  index.html , and add the following content:  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Dynamic Registration\n    </body>\n</html>  Create another directory named  metadata  inside the directory from\nabove to hold further metadata. Then, change the ownership of this\ndirectory using this command:  chown -R apache:apache /var/www/html  Let's create the Apache configuration file now. Create a file named /etc/httpd/conf.d/dynamic.conf  with the content as below:  <VirtualHost *:44443>\n    ServerName dynamic.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCMetadataDir /var/www/html/metadata\n    OIDCClientSecret secret\n\n    OIDCRedirectURI https://dynamic.gluu.org:44443/dynamic/fake_redirect_uri\n    OIDCCryptoPassphrase secret\n    OIDCSSLValidateServer Off\n\n    <Location /dynamic/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/pki/tls/certs/localhost.crt\n    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key\n</VirtualHost>  Here, both certificate and key files already exist on the server. You\ncan use your own, too. Next, enable the site by running the\nfollowing command, and restart the Apache service as:  ln -s /etc/httpd/sites-available/dynamic.conf\nservice httpd restart  Now, try to access  this page ,\nand you'll be presented with a discovery page. To access this page,\nenter  admin@ce.gluu.org .   The usual choice as per present used uris is:  admin@ce.gluu.org . Note\nthat you have to use an existing user at the gluuCE along with an\nexisting uri. An example is  existing_user@your.gluu.ce.server .  After this the  oxAuth  page from gluuCE is displayed where you enter\nthe credentials for authentication.   Manual Client Registration #  Considering the  manual client registration  case, we will name the\nserver  static.gluu.org , instead.  Create a directory named  /var/www/html/static , i. e. with this\ncommand:  mkdir /var/www/html/static  Now, let's create another file named  index.html  with this content:  <html>\n    <title>\n        Protected URL\n    </title>\n    <body>\n        Nice to see the protected url via Manual registration\n    </body>\n</html>  Then, change the ownerships by using this command:  chown -R apache:apache /var/www/html  Create a file named  /etc/httpd/conf.d/static.conf  with the contents as\nbelow:  <VirtualHost *:44443>\n    ServerName static.gluu.org\n    DocumentRoot /var/www/html\n\n    OIDCRedirectURI https://static.gluu.org:44443/static/fake_redirect_uri\n    OIDCCryptoPassphrase newsecret\n\n    OIDCProviderMetadataURL https://ce.gluu.org/.well-known/openid-configuration\n    OIDCClientID @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650\n    OIDCClientSecret newsecret\n    OIDCResponseType id_token\n    OIDCProviderTokenEndpointAuth client_secret_basic\n\n    OIDCProviderIssuer  https://ce.gluu.org\n    OIDCSSLValidateServer Off\n\n    <Location /static/>\n        AuthType openid-connect\n        Require valid-user\n    </Location>\n\n    SSLEngine On\n    SSLCertificateFile /etc/httpd/ssl/httpd.pem\n    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key\n</VirtualHost>  Instead of pre-existing cert and key files, feel free to use your own.\nNext, enable the static site by running the following command, and\nrestart the Apache service as below:  ln -s /etc/httpd/sites-available/sites-available/static.conf\nservice httpd restart  Now, try to access  this page ,\nand you should see the oxAuth page from gluuCE where you enter the\ncredentials for authentication.   Chances are there that you'll see this error after logging in:   Error:\n\nThe OpenID Connect Provider returned an error: Error in handling response type.  The according Apache log looks like that:  [Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_validate_idtoken: id_token JSON payload did not contain the required-by-spec \"sub\" string value, referer: https://static.gluu.org:44443/static/fake_redirect_uri\n[Fri Jun 05 14:48:28 2015] [error] [client 124.253.60.123] oidc_proto_parse_idtoken: id_token payload could not be validated, aborting, referer: https://static.gluu.org:44443/static/fake_redirect_uri  To solve this problem, log into the gluuCE server by running the\nfollowing command:  service gluu-server login  Getting DN from Client ID #  We get the client id from the search performed in Gluu Server's Web UI.\nSo, to get the DN part we perform the below command. The LDAP password\ncan be stored in  /root/.pw  or at any other location that is convenient\nfor you. In our case the command is:  /opt/opendj/bin/ldapsearch -T -X -Z -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -s sub -b \"o=gluu\" 'inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650'  Create a file named  mod.ldif  with the contents given below. The DN\npart to be used in  mod.ldif  is obtained from output of the command\nabove:  dn: inum=@!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650,ou=clients,o=@!C648.9803.5565.E5CB!0001!0DB0.EEDB,o=gluu\nchangetype: modify\nadd: oxAuthSubjectIdentifier\noxAuthSubjectIdentifier: @!C648.9803.5565.E5CB!0001!0DB0.EEDB!0008!7728.5650  Then, run the  ldapmodify  command to insert the oxAuthSubjectIdentifier  as below:  /opt/opendj/bin/ldapmodify -Z -X -h localhost -p 1636 -D \"cn=Directory Manager\" -j /root/.pw -f /root/mod.ldif  The command may vary depending upon your installation. Next, access this page  or  <hostname>:4443/static , and the success\nmessage should be visible.",
            "title": "Client Registration"
        },
        {
            "location": "/admin-guide/plugin/#oxray",
            "text": "LifeRay  OpenID Connect plugin to authenticate users using Gluu IdP.  Overview #  The oxAuth LifeRay plugin is used to authenticate and auto-log users\nfrom Gluu Server into  LifeRay  with the same credentials. It\nis built on top of oxAuth, the OpenID Connect provider by Gluu.  The oxAuth plugin intercepts any attempt to login from anywhere in the\nLifeRay and redirects the request and the user to an oxAuth server where\nthe identification takes place, actually. If the user has authorized the\nserver to share some of his basic information with the oxAuth plugin,\nthe user will be redirected back to the LifeRay CMS, and logged in,\nautomatically.  The goal of this project is to use the LifeRay CMS as the basis for an\norganizational personal data store service.  Note: This plugin does not support auto-user creation from information\nsupplied by the oxAuth Plugin. Instead, it can be implemented by\nextending the plugin.  Deployment #  The plugin is provided in two variants-- Maven  and  Ant .\nYou can either use Maven or the LifeRay plugin SDK to build and deploy\nthis plugin as a standard LifeRay hot deployable WAR file.  Deploying WAR file using Maven #  This requires a prerequisite: make sure that you have  Maven \ninstalled on your system to build this plugin from source.    Checkout the Maven source from the [oxRay Repository][https://github.com/GluuFederation/oxRay/tree/master/6.2.x/maven/gluu-openid-connect-hook].    Open the file  pom.xml  in  gluu-openid-connect-hook , and update\nyour local LifeRay Tomcat bundle path. This is required for building the\nWAR file and deploying to the LifeRay Tomcat bundle.      Run the following command in the  gluu/6.2.x/maven/gluu-openid-connect-hook  \ndirectory:   mvn clean install package liferay:deploy  This will take a few seconds to download the dependency  jar  files, and\ngenerate the LifeRay-compiled deployable WAR file. It will be placed\nwithin your  <liferay-bundle-folder>/deploy  directory, and the hot\ndeployable process will start.  Using LifeRay Plugin SDK With Ant #  This requires a prerequisite: we assume that you have the plugin SDK\nboth installed and configured with LifeRay bundle.    Checkout the gluu-openid-connect-hook plugin source from the\nrepository, and place these files in your local directory for the plugin\nSDK. Usually, this is  liferay-plugins-sdk-6.2.0-ce-ga1/hooks .    Run the following command in the folder  liferay-plugins-sdk-6.2.0-ce-ga1/hooks/gluu-openid-connect-hook :    ant clean deploy  Using Binary From Repository #  You can also download a compiled binary as a standard LifeRay deployable\nWAR file from the following location:  oxRay LifeRay Deployable War File  Copy this WAR file in your LifeRay bundle. Usually, this is located at liferay-portal-6.2.0-ce-ga1/deploy .  Once the plugin is deployed as a WAR file either using Maven or Ant, you\nwill see the following success message in your LifeRay Tomcat server:   Client Registration #  A LifeRay application needs to be registered with the Authorization\nserver before initiating an authentication request/response with OAuth\nIdP server.  The following steps are necessary to obtain both a client id and a\nclient secret. These data will be used within the LifeRay portal\nproperties.   Go to the location  https://seed.gluu.org/oxauth-rp/home.seam .  You will see the Dynamic Client Registration Section.  Enter the Registration Endpoint uri, for example https://idp.example.org/oxauth/seam/resource/restv1/oxauth/authorize .  You can derive this uri from your IdP auto-discovery uri which is\nlike that:  https://<Your IDP Server Domain>/.well-known/openid-configuration .  You can search for the registration endpoint, and copy that uri here.    Enter the redirect uris as  http://localhost:8080/openidconnect/callback :  Replace your domain name with  localhost:8080  This will be your LifeRay handler for logging a user into LifeRay,\nautomatically, when a redirect comes back from the OAuth server.    Select the Response Types: CODE  Select the Application Type: WEB  For development purposes use: NATIVE (if you are testing on a local\nmachine with  localhost:8080  domain)  Enter Client Name: LifeRay App (you can choose any name here).  All other options can be left as they are--please see the attached\nscreenshot:     Click  Submit , and both the following  Registration Request  and Registration Response  will be displayed:     Save the Registration Response to your local system. The parameters client_id  and  client_secret  are used in LifeRay when configuring portal-ext.properties .   Modifying portal.properties #  It is necessary to modify  portal-ext.properties  file to reflect oxAuth\nserver client credentials and server's URL. It can be accomplished by\nnavigating into the  liferay-portal-6.2.0-ce-ga1  folder, where the file portal-ext.properties  is stored.   Note  To either activate or deactivate the oxAuth plugin put the value   true  (to activate) or  false  (to deactivate), respectively.  gluu.openidconnect.auth.enabled=true   oxAuth client ID and client secret:   gluu.openidconnect.client.id=@!1111!0008!51CE.1E59\ngluu.openidconnect.client.secret=65777eb7-87a8-4d60-9dbc-d31d43971f2b   OAuth server domain   gluu.openidconnect.idp.domain=https://idp.gluu.org`   OAuth server auto discovery uri   gluu.openidconnect.url.discovery=https://idp.gluu.org/.well-known/openid-configuration   Your OAuth server logout uri (typically, this will be used to logout a\nuser from OAuth when a user logs out from LifeRay)   gluu.openidconnect.idp.logout=https://idp.gluu.org/identity/logout   LifeRay server callback uri that will be used as a handling response\nby the OAuth server after authentication:  replace the  localhost:8080  with your LifeRay domain name:   gluu.openidconnect.client.redirect.url=http://localhost:8080/openidconnect/callback   This page will be invoked when the user does not exist in the\n LifeRay database, but gets authenticated from the OAuth Server.   Typically, create a LifeRay page with the name  /no-such-user-found ,\n  or redirect to the LifeRay registration page uri like that:   gluu.openidconnect.no.such.user.redirect.url=http://localhost:8080/no-such-user-found  Restart the LifeRay server after editing the file portal-ext.properties .  Login Using the LifeRay Front End #    Server Bootup   Once the LifeRay server is restarted, open your browser and\n  navigate to the uri  http://localhost:8080 .     Login uri   Once the LifeRay page successfully loaded navigate to the OpenID\n  connect page at  http://localhost:8080/openidconnect/login .     Note: you can edit the theme code, and link to the login uri as http://localhost:8080/openidconnect/login . In result the user will\nalways redirect to the OAuth server for authentication.   OAuth authentication  The LifeRay login uri will redirect users to the OAuth IdP server\n  for user authentication. Internally, passing the oAuth client id \n  as the following screen:       Request for permission  This screen can be configured depending upon your OAuth Server\n  implementation.       OAuth callback (user auto-login to LifeRay)  After a successful authentication with the OAuth server, IdP will\nsend a callback to LifeRay with a specific code as a parameter:     http://localhost:8080/openidconnect/callback?code=xxx`  This will be intercepted by our oxAuth LifeRay plugin. Upon validation\nof the token with the Gluu IdP, it will result in a login of the user to\nthe LifeRay. The user will be redirected to his respective start page.",
            "title": "oxRay"
        },
        {
            "location": "/admin-guide/plugin/#openid-connect-authentication-java",
            "text": "Using OpenID Connect to authenticate a person in Java #  The  OpenID Connect  Protocol offers Java\ndevelopers a way to authenticate a person at any Internet domain that\nsupports the standard. To accomplish this, the domain must provide a way\nto register clients--the website and mobile applications that use the\nauthentication API offered by the domain.  Discovery #  Discovery is the first step! Luckily, its super-easy! All you have to \ndo is make a get request to https://{domain}/.well-known/openid-configuration .  This will return a JSON object, as described in the specification .\nFor example, you can see Gluu's OpenID Connect discovery url .  This will tell you everything you need to know about this OpenID Connect\nprovider, like what are the endpoints (URLs), what crypto is supported,\nand what user claims can you ask for.  An  example \nof a Discovery Request, using the oxAuth RP library.  Client Registration #  In SAML, the website was called a \"Service Provider.\" In OpenID Connect,\nthe website (or mobile application) is called a \"Client\". Clients can be\nregistered manually by the OP, but more frequently, clients use the Dynamic Registration\nAPI  to\nautomate the process.  Obtaining the id_token #  After your client is registered, it is time to get down to business.\nOpenID Connect offers two common workflows for authentication: basic\n(where the person is using a browser, and can be re-directed) and\nimplicit where the client sends the credentials, including the secret.\nThere is a useful implements guide for basic  and implicit .  Logout #  OpenID Connect defines a mechanism for  Session\nManagement .\nThe idea is that JavaScript in a web tab can detect that another tab has\nlogged out. One detection of a logout event, the Web application can\ncleanup sessions in any backend systems as necessary. It is not 100%\neffective. If the tab is closed when the logout occurs in another tab,\nthe event may not be detected, and the backend systems are advised to\ntimeout sessions.",
            "title": "OpenID Connect Authentication Java"
        },
        {
            "location": "/admin-guide/plugin/#using-openid-connect-from-javascript",
            "text": "See  OpenID Connect plugin for Passport  for further details.",
            "title": "Using OpenID Connect from JavaScript"
        },
        {
            "location": "/admin-guide/plugin/#apache-saml",
            "text": "Configuring Apache Shibboleth SP in CentOS #  System Preparation #  Add Shibboleth repository for CentOS   The file  shib.repo  contains the following entry:   [security_shibboleth]\nname=Shibboleth (CentOS_CentOS-6)\ntype=rpm-md\nbaseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/\ngpgcheck=1\ngpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/repodata/repomd.xml.key\nenabled=1   Download the Shibboleth security repo key from here:   http://download.opensuse.org/repositories/security:/shibboleth/CentOS_CentOS-6/security:shibboleth.repo  Shibboleth SP Installation #  To install the Shibboleth SP, run the following commands in a terminal:  # yum install shibboleth\n# service shibd start\n# chkconfig shibd on",
            "title": "Apache SAML"
        },
        {
            "location": "/admin-guide/plugin/#install-and-configure-httpd",
            "text": "",
            "title": "Install and Configure httpd"
        },
        {
            "location": "/admin-guide/plugin/#installation_2",
            "text": "The following commands will both install, and start the Apache web\nserver on your machine/Linux environment:  # yum install httpd\n# service httpd start\n# service iptables stop   Configuration #  Edit the file  httpd.conf , and do the following changes:    Change the  ServerName  directive to the server name of the SP.    Set  UseCanonicalName On .    Restart the httpd service using the command  service httpd restart .    Httpd Testing #    Create an  index.html  file inside the directory  /var/www/html .    Restart the httpd service using the command  service httpd restart .    Check from your browser if the file  index.html  is visible.    SP Key Certificate #    Create both a private key, and a certificate, and place those in the\n  file  /etc/shibboleth .    Change the permissions of these files so that the web server can read\n  the files.    Shibboleth SP Configuration #  This section describes how to configure the file  shibboleth2.xml .    Provide the  entityID  of the according SP in:   <ApplicationDefaults entityID=\"http://sp.example.org/Shibboleth\"> section     Provide the  entityID  of the IdP in:   <SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"> section     Adjust the entry of the metadata provider. In most cases this is the\n  Gluu IdP metadata link:   <MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"> section     Provide both the key and certificate of the SP in:   <CredentialResolver type=\"File\" key=\"spkey.key\" certificate=\"spcrt.crt\"> section     Shibboleth Manual Configuration (one Physical SP): #    Create a directory named under  /var/www/secure .    Change the permissions for that directory  secure  to\n   apache:apache  (owner and group of the web server).    httpd.conf    change the ServerName  <hostname_of_server>    Define the Location, and the authorization type:  <Location /secure>\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    ShibUseHeaders on\n    Require valid-user\n</Location>      configure  shibboleth2.xml    Set the EntityID of the SP:  ApplicationDefaults entityID=\"http://hostname/secure\"    Provide the EntityID of the IDP:  SSO entityID=\"https://idp.gluu.org/idp/shibboleth\"    Set both the Metadata Provider, and the IDP:  MetadataProvider type=\"XML\" uri=\"https://idp.gluu.org/idp/shibboleth\"      Restart both shibd and Apache2 using these lines:    service shibd restart\nservice httpd restart   Create a Trust Relationship for this SP in your desired IdP.",
            "title": "Installation"
        },
        {
            "location": "/admin-guide/plugin/#super-quick-ubuntu-shib-apache-install",
            "text": "Need to protect a test Apache folder using SAML on an Ubuntu server?\nHate to read? This article is for you. Replace both  minnow  and minnow.gluu.info  with your desired website hostname.  Configure Apache #  These are the steps to configure your Apache webserver properly:  # apt-get install apache2 libshibsp6 libapache2-mod-shib2\n# a2enmod cgi\n# a2enmod ssl\n# a2enmod shib2\n# a2ensite default-ssl\n# mkdir /etc/certs\n# cd /etc/certs\n# openssl genrsa -des3 -out minnow.key 2048\n# openssl rsa -in minnow.key -out minnow.key.insecure\n# mv minnow.key.insecure minnow.key\n# openssl req -new -key minnow.key -out minnow.csr\n# openssl x509 -req -days 365 -in minnow.csr -signkey minnow.key -out minnow.crt\n# shib-metagen -c /etc/certs/minnow.crt -h minnow.gluu.info > /etc/shibboleth/minnow-metadata.xml\n# service apache2 start\n# service shibd start  Download  minnow-metadata.xml  to your machine. You will need this file\nlater when you create the Trust Relationship in the Gluu Server.  # mkdir /var/www/protected\n# touch /var/www/protected/printHeaders.py\n# chmod ugo+x /var/www/protected/printHeaders.py  Edit  printHeaders.py , and add this simple script. It will show you the\nHTTP headers:  #!/usr/bin/python\n\nimport os\n\nd = os.environ\nk = d.keys()\nk.sort()\n\nprint \"Content-type: text/html\\n\\n\"\n\nprint \"<HTML><HEAD><TITLE>Print Env Variables</TITLE></Head><BODY>\"\nprint \"<h1>Environment Variables</H1>\"\nfor item in k:\n    print \"<p><B>%s</B>: %s </p>\" % (item, d[item])\nprint \"</BODY></HTML>\"  Edit the default site at  /etc/apache2/sites-available/default-ssl.conf , \nand add this part:  ScriptAlias /protected/ /var/www/protected/\n<Directory /var/www/protected>\n    AddHandler cgi-script .py\n    Options +ExecCGI\n    SSLOptions +StdEnvVars\n    AuthType shibboleth\n    ShibRequestSetting requireSession 1\n    Require valid-user\n</Directory>",
            "title": "Super Quick Ubuntu Shib Apache Install"
        },
        {
            "location": "/admin-guide/plugin/#configure-the-shibboleth-sp",
            "text": "Use this for  shibboleth2.xml  and replace  squid.gluu.info  with the\nhostname of your SP, and  albacore.gluu.info  with the hostname of your\nIDP.  <SPConfig xmlns=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:conf=\"urn:mace:shibboleth:2.0:native:sp:config\"\n    xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\"\n    xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"    \n    xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n    logger=\"syslog.logger\" clockSkew=\"180\">\n    <OutOfProcess logger=\"shibd.logger\"></OutOfProcess>\n    <UnixListener address=\"shibd.sock\"/>\n    <StorageService type=\"Memory\" id=\"mem\" cleanupInterval=\"900\"/>\n    <SessionCache type=\"StorageService\" StorageService=\"mem\" cacheAssertions=\"false\"\n                  cacheAllowance=\"900\" inprocTimeout=\"900\" cleanupInterval=\"900\"/>\n    <ReplayCache StorageService=\"mem\"/>\n    <RequestMapper type=\"Native\">\n        <RequestMap>\n            <Host name=\"squid.gluu.info\">\n                <Path name=\"protected\" authType=\"shibboleth\" requireSession=\"true\"/>\n            </Host>\n        </RequestMap>\n    </RequestMapper>\n    <ApplicationDefaults entityID=\"https://squid.gluu.info/shibboleth\"\n                         REMOTE_USER=\"uid\"\n                         metadataAttributePrefix=\"Meta-\"\n                         sessionHook=\"/Shibboleth.sso/AttrChecker\"\n                         signing=\"false\" encryption=\"false\">\n\n        <Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"true\"\n            handlerURL=\"/Shibboleth.sso\" handlerSSL=\"true\" cookieProps=\"https\" relayState=\"ss:mem\">\n\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"Login\"\n                              entityID=\"https://albacore.gluu.info/idp/shibboleth\">\n                <SessionInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            </SessionInitiator>\n\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\">\n                <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n                <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n                Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n\n            <Handler type=\"Status\" Location=\"/Status\"/>\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n            <Handler type=\"AttributeChecker\" Location=\"/AttrChecker\" template=\"attrChecker.html\"\n                attributes=\"uid\" flushSession=\"true\"/>\n        </Sessions>\n\n        <Errors supportContact=\"root@localhost\"\n            helpLocation=\"/about.html\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n        <MetadataProvider type=\"XML\" file=\"albacore.xml\"/>\n        <TrustEngine type=\"ExplicitKey\"/>\n        <TrustEngine type=\"PKIX\"/>\n        <AttributeExtractor type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"attribute-map.xml\"/>\n        <AttributeExtractor type=\"Metadata\" errorURL=\"errorURL\" DisplayName=\"displayName\"/>\n        <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n        <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n        <CredentialResolver type=\"File\" key=\"/etc/certs/squid.key\" certificate=\"/etc/certs/squid.crt\"/>\n    </ApplicationDefaults>\n    <SecurityPolicyProvider type=\"XML\" validate=\"true\" path=\"security-policy.xml\"/>\n    <ProtocolProvider type=\"XML\" validate=\"true\" reloadChanges=\"false\" path=\"protocols.xml\"/>\n\n</SPConfig>  Copy this file into  /etc/shibboleth/attribute-map.xml :  \n<Attributes xmlns=\"urn:mace:shibboleth:2.0:attribute-map\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <Attribute name=\"urn:oid:2.5.4.42\" id=\"givenName\"/>\n    <Attribute name=\"urn:oid:2.5.4.4\" id=\"sn\"/>\n    <Attribute name=\"urn:oid:2.16.840.1.113730.3.1.241\" id=\"displayName\"/>\n    <Attribute name=\"urn:oid:0.9.2342.19200300.100.1.1\" id=\"uid\"/>\n</Attributes>  Now you need to create a Trust Relationship in your Gluu Server. Login,\ngo to SAML / Trust Relationships, and \"Add Relationship\":   Then, configure for SAML2SSO profile. Click on the checkbox to\n\"Configure specific RelyingParty\":   Then, click to add the SAML2SSO profile:   Then \"Save\" and \"Update.\" Wait 5 minutes for the Shibboleth IDP to detect reload the metadata or\nstop and start tomcat.  Test #  Test the CGI script at  https://minnow.gluu.info/protected/printHeaders.py .\nEnter both the valid username and password (like  admin  and your\ninitial admin password). The output will contain something like this:  **Environment Variables**\n\nAUTH_TYPE: shibboleth\nCONTEXT_DOCUMENT_ROOT: /var/www/protected/\nCONTEXT_PREFIX: /protected/\nDOCUMENT_ROOT: /var/www/html\nGATEWAY_INTERFACE: CGI/1.1\nHTTPS: on\nHTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nHTTP_ACCEPT_ENCODING: gzip, deflate, sdch\nHTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8\nHTTP_CONNECTION: keep-alive\nHTTP_COOKIE: _shibsession_64656661756c7468747470733a2f2f6d696e6e6f772e676c75752e696e666f2f73686962626f6c657468=_6aab7e287072bcc123989d8bf5f0ed5e\nHTTP_DNT: 1\nHTTP_HOST: minnow.gluu.info\nHTTP_UPGRADE_INSECURE_REQUESTS: 1\nHTTP_USER_AGENT: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nQUERY_STRING:\nREMOTE_ADDR: 192.168.88.1\nREMOTE_PORT: 52140\nREMOTE_USER: mike\nREQUEST_METHOD: GET\nREQUEST_SCHEME: https\nREQUEST_URI: /protected/printHeaders.py\nSCRIPT_FILENAME: /var/www/protected/printHeaders.py\nSCRIPT_NAME: /protected/printHeaders.py\nSERVER_ADDR: 192.168.88.133\nSERVER_ADMIN: webmaster@localhost\nSERVER_NAME: minnow.gluu.info\nSERVER_PORT: 443\nSERVER_PROTOCOL: HTTP/1.1\nSERVER_SIGNATURE:\nApache/2.4.7 (Ubuntu) Server at minnow.gluu.info Port 443\nSERVER_SOFTWARE: Apache/2.4.7 (Ubuntu)\nSHIB_Shib_Application_ID: default\nSHIB_Shib_Authentication_Instant: 2015-09-17T01:13:23.278Z\nSHIB_Shib_Authentication_Method: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_AuthnContext_Class: urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\nSHIB_Shib_Identity_Provider: https://brookie.gluu.info/idp/shibboleth\nSHIB_Shib_Session_ID: _6aab7e287072bcc123989d8bf5f0ed5e\nSHIB_Shib_Session_Index: _40e4b17668a13e0d406e41cc9f6bf116\nSHIB_displayName: Mike Schwartz\nSHIB_givenName: Michael\nSHIB_mail: mike@gmail.com\nSHIB_sn: Schwartz\nSHIB_uid: mike\nSSL_CIPHER: ECDHE-RSA-AES128-GCM-SHA256\nSSL_CIPHER_ALGKEYSIZE: 128\nSSL_CIPHER_EXPORT: false\nSSL_CIPHER_USEKEYSIZE: 128\nSSL_CLIENT_VERIFY: NONE\nSSL_COMPRESS_METHOD: NULL\nSSL_PROTOCOL: TLSv1.2\nSSL_SECURE_RENEG: true\nSSL_SERVER_A_KEY: rsaEncryption\nSSL_SERVER_A_SIG: sha256WithRSAEncryption\nSSL_SERVER_I_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_I_DN_C: US\nSSL_SERVER_I_DN_CN: minnow.gluu.info\nSSL_SERVER_I_DN_Email: mike@gmail.com\nSSL_SERVER_I_DN_L: Austin\nSSL_SERVER_I_DN_O: Gluu\nSSL_SERVER_I_DN_ST: TX\nSSL_SERVER_M_SERIAL: 9F5E4F891590BB53\nSSL_SERVER_M_VERSION: 1\nSSL_SERVER_S_DN: emailAddress=mike@gluu.org,CN=minnow.gluu.info,O=Gluu,L=Austin,ST=TX,C=US\nSSL_SERVER_S_DN_C: US\nSSL_SERVER_S_DN_CN: minnow.gluu.info\nSSL_SERVER_S_DN_Email: mike@gmail.com\nSSL_SERVER_S_DN_L: Austin\nSSL_SERVER_S_DN_O: Gluu\nSSL_SERVER_S_DN_ST: TX\nSSL_SERVER_V_END: Sep 10 18:46:32 2016 GMT\nSSL_SERVER_V_START: Sep 11 18:46:32 2015 GMT\nSSL_SESSION_RESUMED: Initial\nSSL_TLS_SNI: minnow.gluu.info\nSSL_VERSION_INTERFACE: mod_ssl/2.4.7\nSSL_VERSION_LIBRARY: OpenSSL/1.0.1f",
            "title": "Configure the Shibboleth SP"
        },
        {
            "location": "/admin-guide/plugin/#troubleshooting",
            "text": "Make sure you update your hosts file on the Gluu Server, Apache\n   server, and your workstation--this won't work with IP addresses,\n   only.    Check the Shibboleth log file  /opt/idp/logs/idp-process.log  if you\n   don't see the headers or REMOTE_USER environment variables. Also,\n   restart the Apache Tomcat service by  service tomcat restart  to \n   make sure the new Shibboleth IDP xml files were loaded.    Clear the cookies in your web browser for both the Apache site, and \n   the Gluu Server if you are logging in and logging out a lot with \n   lots of server restarts.",
            "title": "Troubleshooting"
        },
        {
            "location": "/admin-guide/plugin/#iis-saml-configuration",
            "text": "IIS Configuration in Windows 7 #    Start --> Control Panel --> Programs --> \"Turn Windows features on or off\"    Select (i) IIS (ii) Web Management Tools (iii) II6 Management Compatibility (iv) IIS Management Console (v) IIS Management Scripts and Tools (vi) IIS Management Service    Select (i) World Wide Web Services (ii) CGI (iii) ISAPI Filters (iv) ISAPI Extensions --> Press OK.    Test IIS to see if it is installed in your system with \"127.0.0.1\" in the web browser. For our test case, we used IIS7.    ISAPI Filter Configuration #    Open IIS Manager (Start --> Administrative Tools --> Internet Information Service/IIS Manager)    Double click on \"ISAPI and CGI Restrictions\"    Add a new Filter    a. Click Actions --> Add (upper right corner)  b. Select \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"  c. Description: \"Shibboleth\"  d. Click \"Allow\" (from the right hand side)   e. Back to IIS Manager --> ISAPI Filters       1. Click \"Add\" (upper right corner)\n\n    2. Filter Name: Shibboleth\n\n    3. Executable: \"\\opt\\shibboleth-sp\\lib\\shibboleth\\isapi_shib.dll\"   f. SSO file extension mapping      1. Click on \"Handler Mapping\" from main page       2. Click \"Add Script Map\" from Action       3. Request Path :\".sso\"\n\n    4. Executable should be pointed to \"isapi_shib.dll\"   g. Restart IIS  h. Check Status  Check Status by typing in \"http://127.0.0.1/Shibboleth.sso/Status\" in the web browser. If it displays an XML document, then the Shibboleth SP Installation in Windows IIS7 in complete.",
            "title": "IIS SAML Configuration"
        },
        {
            "location": "/admin-guide/plugin/#shibboleth-sp-setup-in-windows-2008-r2-with-iis7",
            "text": "Open up \"Server Manager\", scroll down and click on \"Add Roles\".     Hit \"Next\"     Select \"Web Server (IIS)\", hit \"Next\"     Select (i) CGI   (ii) ISAPI Extensions  (iii) ISAPI Filters  (iv) Management Tools  (a) IIS Management Console  (b) IIS Management Scripts and Tools  (c) Management Service  (v) All IIS6 Management Compatibility     Hit \"Next\", for the confirmation, check the list of plugins.      Hit \"Install\" and Windows 2008 will complete the installation. A confirmation window shall appear which resembles the screenshot below.    7.Test IIS7 setup from the Internet.   Shibboleth SP 2.5.x Setup #    Down the  Shibboleth SP 2.5.x    Start the installation, keep the default path, Select \"Install ISAPI modules into IIS\", IIS Script Extension must be \".sso\" and Hit \"Next\".      After the completion of the installation, the system will ask to reboot the system; hit \"Yes\".     Test the Shibboleth SP installation from the SP VM using the URL \"localhost/Shibboleth.sso/Status\" in the address bar of the Web Browser.    Trust Relationship in IdP #   Create a Trust Relationship for the new SP in the IdP. It is necessary to upload the Public Certificate of the new SP in the IdP. Please note that the CN of the public certificate MUST BE the same as  Hostname  of the SP. Hit \"Add\".     Download the IdP generated configuration files for Shib SP modification.    SP Configuration #    The files from the IdP must be placed in the SP Configuration.    Before placing them inside the SP Configuration please check    (a) The \"spcert.crt\" file has the CN same as the SP hostname.  (b) The \"spcert.crt\" and \"spkey.key\" has the same  md5sum  value.  (c) The IdP-metadata is perfectly placed inside the SP Configuration.  (d) The downloaded \"shibboleth2.xml\" file has values resembling the file content below.   For testing purpose, we are going to protect a directory named \"secure\" with the IdP.  Create a folder/directory in the IIS Root Directory and restart Shibd and IIS.    SSO Testing #    Place the following URL in the web browser: \"https://SP_Name/secure\"    It will redirect the user to the IdP for authentication.    After the authentication is complete, the user will be shown the protected page. For this case, the page is the IIS7 index page.        xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\"\n      logger=\"syslog.logger\" clockSkew=\"180\">  \n       \n        \n       \n         \n               \n         \n        \n       \n        \n       \n       \n       \n        \n       \n         \n                 \n                 \n                 \n         \n        \n    <!--\n    Controls session lifetimes, address checks, cookie handling, and the protocol handlers.\n    You MUST supply an effectively unique handlerURL value for each of your applications.\n    The value can be a relative path, a URL with no hostname (https:///path) or a full URL.\n    The system can compute a relative value based on the virtual host. Using handlerSSL=\"true\"\n    will force the protocol to be https. You should also add a cookieProps setting of \"; path=/; secure\"\n    in that case. Note that while we default checkAddress to \"false\", this has a negative\n    impact on the security of the SP. Stealing cookies/sessions is much easier with this disabled.\n    -->\n<Sessions lifetime=\"28800\" timeout=\"3600\" checkAddress=\"false\"\n            handlerURL=\"https://SP_HOSTNAME/Shibboleth.sso\" handlerSSL=\"false\"\n            exportLocation=\"http://localhost/Shibboleth.sso/GetAssertion\" exportACL=\"127.0.0.1\"\n            idpHistory=\"false\" idpHistoryDays=\"7\" cookieProps=\"; path=/; secure; httpOnly\">\n\n    <!--\n            SessionInitiators handle session requests and relay them to a Discovery page,\n            or to an IdP if possible. Automatic session setup will use the default or first\n            element (or requireSessionWith can specify a specific id to use).\n            -->\n\n    <!-- Default example directs to a specific IdPs SSO service (favoring SAML 2 over Shib 1). -->\n            <SessionInitiator type=\"Chaining\" Location=\"/Login\" isDefault=\"true\" id=\"gluu\"\n                    relayState=\"cookie\" entityID=\"https://IDP_HOSTNAME/idp/shibboleth\">\n               <SessionInitiator type=\"SAML2\" acsIndex=\"1\" template=\"bindingTemplate.html\"/>\n               <SessionInitiator type=\"Shib1\" acsIndex=\"5\"/>\n            </SessionInitiator>\n\n    <!--\n            md:AssertionConsumerService locations handle specific SSO protocol bindings,\n            such as SAML 2.0 POST or SAML 1.1 Artifact. The isDefault and index attributes\n            are used when sessions are initiated to determine how to tell the IdP where and\n            how to return the response.\n            -->\n    <md:AssertionConsumerService Location=\"/SAML2/POST\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/POST-SimpleSign\" index=\"2\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/Artifact\" index=\"3\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n            <md:AssertionConsumerService Location=\"/SAML2/ECP\" index=\"4\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\"/>\n            <md:AssertionConsumerService Location=\"/SAML/POST\" index=\"5\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:browser-post\"/>\n            <md:AssertionConsumerService Location=\"/SAML/Artifact\" index=\"6\"\n            Binding=\"urn:oasis:names:tc:SAML:1.0:profiles:artifact-01\"/>\n\n    <!-- LogoutInitiators enable SP-initiated local or global/single logout of sessions. -->\n            <LogoutInitiator type=\"Chaining\" Location=\"/Logout\" relayState=\"cookie\">\n            <LogoutInitiator type=\"SAML2\" template=\"bindingTemplate.html\"/>\n            <LogoutInitiator type=\"Local\"/>\n            </LogoutInitiator>\n\n    <!-- md:SingleLogoutService locations handle single logout (SLO) protocol messages. -->\n            <md:SingleLogoutService Location=\"/SLO/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:SingleLogoutService Location=\"/SLO/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:SingleLogoutService Location=\"/SLO/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:SingleLogoutService Location=\"/SLO/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!-- md:ManageNameIDService locations handle NameID management (NIM) protocol messages. -->\n            <md:ManageNameIDService Location=\"/NIM/SOAP\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n            <md:ManageNameIDService Location=\"/NIM/Redirect\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"/>\n            <md:ManageNameIDService Location=\"/NIM/POST\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"/>\n            <md:ManageNameIDService Location=\"/NIM/Artifact\" conf:template=\"bindingTemplate.html\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\"/>\n\n    <!--\n            md:ArtifactResolutionService locations resolve artifacts issued when using the\n            SAML 2.0 HTTP-Artifact binding on outgoing messages, generally uses SOAP.\n            -->\n            <md:ArtifactResolutionService Location=\"/Artifact/SOAP\" index=\"1\"\n            Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\"/>\n\n    <!-- Extension service that generates \"approximate\" metadata based on SP configuration. -->\n            <Handler type=\"MetadataGenerator\" Location=\"/Metadata\" signing=\"false\"/>\n\n            <!-- Status reporting service. -->\n            <Handler type=\"Status\" Location=\"/Status\" acl=\"127.0.0.1\"/>\n\n            <!-- Session diagnostic service. -->\n            <Handler type=\"Session\" Location=\"/Session\" showAttributeValues=\"false\"/>\n\n</Sessions>\n\n<!--\n    Allows overriding of error template filenames. You can also add attributes with values\n    that can be plugged into the templates.\n    -->\n    <Errors supportContact=\"support@gluu.org\"\n            logoLocation=\"/shibboleth-sp/logo.jpg\"\n            styleSheet=\"/shibboleth-sp/main.css\"/>\n\n<!-- Uncomment and modify to tweak settings for specific IdPs or groups. -->\n    <RelyingParty Name=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\" keyName=\"IDP_HOSTNAME_WITHOUT_HTTP_OR_HTTPS\"/>\n\n<!-- Chains together all your metadata sources. -->\n    <MetadataProvider type=\"Chaining\">\n    <MetadataProvider type=\"XML\" file=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\idp-metadata.xml\"/>\n    </MetadataProvider>\n\n<!-- Chain the two built-in trust engines together. -->\n    <TrustEngine type=\"Chaining\">\n            <TrustEngine type=\"ExplicitKey\"/>\n            <TrustEngine type=\"PKIX\"/>\n    </TrustEngine>\n\n<!-- Map to extract attributes from SAML assertions. -->\n    <AttributeExtractor type=\"XML\" validate=\"true\" path=\"attribute-map.xml\"/>\n\n    <!-- Use a SAML query if no attributes are supplied during SSO. -->\n    <AttributeResolver type=\"Query\" subjectMatch=\"true\"/>\n\n    <!-- Default filtering policy for recognized attributes, lets other data pass. -->\n    <AttributeFilter type=\"XML\" validate=\"true\" path=\"attribute-policy.xml\"/>\n\n<!-- Simple file-based resolver for using a single keypair. -->\n    <!-- <CredentialResolver type=\"File\" key=\"sp-key.pem\" certificate=\"sp-cert.pem\"/> -->\n\n    <!-- TODO is password needed? -->\n    <CredentialResolver type=\"File\" key=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spkey.key\"\n                    certificate=\"C:\\opt\\shibboleth-sp\\etc\\shibboleth\\spcert.crt\" />\n\n</ApplicationDefaults>\n\n<!-- Each policy defines a set of rules to use to secure messages. -->\n    <SecurityPolicies>\n    <!--\n    The predefined policy enforces replay/freshness, standard\n    condition processing, and permits signing and client TLS.\n    -->\n<Policy id=\"default\" validate=\"false\">\n            <PolicyRule type=\"MessageFlow\" checkReplay=\"true\" expires=\"60\"/>\n            <PolicyRule type=\"Conditions\">\n                <PolicyRule type=\"Audience\"/>\n                <!-- Enable Delegation rule to permit delegated access. -->\n                <!-- <PolicyRule type=\"Delegation\"/> -->\n            </PolicyRule>\n            <PolicyRule type=\"ClientCertAuth\" errorFatal=\"true\"/>\n            <PolicyRule type=\"XMLSigning\" errorFatal=\"true\"/>\n            <PolicyRule type=\"SimpleSigning\" errorFatal=\"true\"/>\n    </Policy>\n    </SecurityPolicies>",
            "title": "Shibboleth SP Setup in Windows 2008 R2 with IIS7"
        },
        {
            "location": "/admin-guide/plugin/#configuring-apache-shibboleth-sp-in-windows",
            "text": "Shibboleth SP Installation #    Download the MSI of Shibboleth-SP from:\n   http://www.shibboleth.net/downloads/service-provider/latest/ .    Start the installation     Define the destination folder (by default it is: C:\\opt\\shibboleth-sp).     Select the Shibboleth Daemon port. By default it is 1600, and you may\n   keep it for testing it, locally.     Now, there are two options. According to your target you will have to\nchoose one.    Option 1: If you install Shibboleth for the Apache Web Server    Option 2: If you install Shibboleth for Microsoft IIS Web Server  a. For the Microsoft IIS Web Server, CHECK \"Install ISAPI filter and configure IIS\". Remember to put the fie Extension \".sso\" is necessary.   b. For the Apache Web Server, UNCHECK \"Install ISAPI filter and configure IIS\".     UAC of Windows 7 may block this program, so allow it.       Apache Configuration #  1. Download the Apache HTTP server MSI Installer with OpenSSL:\n   http://httpd.apache.org/download.cgi#apache22 .\n\n![IMAGE](/img/admin-guide/plugin/admin_sp_apacheclick.png)\n\n2. Select the destination. You can keep the default destination for your local testing. But, make sure that there is no other \"Apache Software Foundation\" directory in your current \"C:\\Program Files\\\" location.\n\n![IMAGE](/img/admin-guide/plugin/admin_sp_apachedestination.png)\n\n3. Provide the Server Information. For local testing you can use\n   `localdomain/localhost`.\n\n![IMAGE](/img/admin-guide/plugin/admin_sp_serverinfo.png)\n\n4. Test whether the Apache web server is installed or not. Open your web\nbrowser and use `localhost`. If you see something like the image shown\nbelow--you are done!   Shibboleth and Apache Configuration #   Change the permission of the Apache installation directory, and\n   provide \"write\" access.   httpd.conf  configuration    Change \"ServerName localhost:80\" (for your local testing)    Copy  apache22.conf  from the Shibboleth directory to  ~/apache/conf/extra/      Shibboleth2.xml  configuration    Change: Host name=\"localhost\" (for local testing)    Change: entityID=\"https://localhost/shibboleth\" (for local testing)    Change: ApplicationOverride id=\"admin\" entityID=\"https://localhost/shibboleth/\"      Reboot your windows machine.    Test SP Installation with Windows and Apache #   Open the web browser, and provide the address:\n    localhost/Shibboleth.sso/Status  If you can see some XML page like the one shown below--you are done\n   with your SP installation in Windows through Apache2.   a",
            "title": "Configuring Apache Shibboleth SP in Windows"
        },
        {
            "location": "/admin-guide/backup/",
            "text": "How to back up Gluu CE Server\n\n\nTar command to Back up Gluu Server\n\n\nSteps to Back up Gluu CE server using tar\n\n\n\n\n\n\nUsing Gluu Script to Back up Ldif of LDAP\n\n\nSteps to Back up Gluu CE Server using Gluu Export Scripts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to back up Gluu CE Server\n#\n\n\nGluu CE Server Back up can be performed using below methods.\n\n\n\n\nUsing tar command to tar the Gluu Server Folder from the Host OS\n\n\nUsing Gluu provided export and import scripts to back up ldif of the LDAP.\n\n\n\n\n\n\nNOTE: In this documentation,'2.4.x' is referred to the existing installed version of Gluu CE Server. \n\n\n\n\nTar command to Back up Gluu Server\n#\n\n\nSteps to Back up Gluu CE server using tar\n#\n\n\n1. Stop the server using below command\n    a. #service gluu-server-2.4.x stop\n2. use tar command to take a back up\n    b. # tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/\n\n\n\nUsing Gluu Script to Back up Ldif of LDAP\n#\n\n\nSteps to Back up Gluu CE Server using Gluu Export Scripts\n#\n\n\n1. Login to Gluu chroot\n    a. # service gluu-server-2.4.x login\n2. Fetch export script from Gluu \n    b. wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n3. Change permission of the script\n    c. # chmod +x export24.py\n4. run the script\n    d. # ./export24.py\n\n\n\nThe export script will generate a directory called  backup_24  which will have all the data backed up from the current installation. Check the log file generated in the directory for any errors.",
            "title": "Backup Gluu Server CE"
        },
        {
            "location": "/admin-guide/backup/#how-to-back-up-gluu-ce-server",
            "text": "Gluu CE Server Back up can be performed using below methods.   Using tar command to tar the Gluu Server Folder from the Host OS  Using Gluu provided export and import scripts to back up ldif of the LDAP.    NOTE: In this documentation,'2.4.x' is referred to the existing installed version of Gluu CE Server.",
            "title": "How to back up Gluu CE Server"
        },
        {
            "location": "/admin-guide/backup/#tar-command-to-back-up-gluu-server",
            "text": "Steps to Back up Gluu CE server using tar #  1. Stop the server using below command\n    a. #service gluu-server-2.4.x stop\n2. use tar command to take a back up\n    b. # tar cvf gluu244-backup.tar /opt/gluu-server-2.4.4/",
            "title": "Tar command to Back up Gluu Server"
        },
        {
            "location": "/admin-guide/backup/#using-gluu-script-to-back-up-ldif-of-ldap",
            "text": "Steps to Back up Gluu CE Server using Gluu Export Scripts #  1. Login to Gluu chroot\n    a. # service gluu-server-2.4.x login\n2. Fetch export script from Gluu \n    b. wget https://raw.githubusercontent.com/GluuFederation/community-edition-setup/master/static/scripts/export24.py\n3. Change permission of the script\n    c. # chmod +x export24.py\n4. run the script\n    d. # ./export24.py  The export script will generate a directory called  backup_24  which will have all the data backed up from the current installation. Check the log file generated in the directory for any errors.",
            "title": "Using Gluu Script to Back up Ldif of LDAP"
        },
        {
            "location": "/admin-guide/custom-script/",
            "text": "Custom Script / Interception Script\n\n\nInterception Script Methods\n\n\nInterception Script Logs\n\n\nPerson Authentication\n\n\nCertificate Authentication\n\n\n\n\n\n\nUpdate User\n\n\nUser Registration\n\n\nClient Registration\n\n\nDynamic Scopes\n\n\nID Generator\n\n\nCache Refresh\n\n\nUMA Authorization Policies\n\n\nApplication Session Management\n\n\n\n\n\n\nCustom Script / Interception Script\n#\n\n\nGluu Server is very flexible by design enabling the use of \nJython\n interception scripts to customize behaviour. Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers. Another advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.\n\n\nCustom Scripts can be accessed by navigating to Configuration \nand selecting the \nManage Custom Scritps\n tab.\n\n\n\n\nInterception Script Methods\n#\n\n\nThere are three methods that inherit a base interface\n\n\n\n\n\n\n\n\nInherited Methods\n\n\nMethod description\n\n\n\n\n\n\n\n\n\n\ndef init(self, configurationAttributes)\n\n\nThis method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc\n\n\n\n\n\n\ndef destroy(self, configurationAttributes)\n\n\nThis method is called once to destroy events. It can be used to free resource and objects created in the \ninit()\n method\n\n\n\n\n\n\ndef getApiVersion(self)\n\n\nThe \ngetApiVersion\n method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return \n1\n\n\n\n\n\n\n\n\nThe \nconfigurationAttributes\n parameter is \njava.util.Map<String, SimpleCustomProperty>\n with properties specified in \noxConfigurationProperty\n attributes.\n\n\nThe script manager only loads enabled scripts. Hence, after enabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script. All scripts are stored in LDAP in the\n\nou=scripts,o=<org_inum>,o=gluu\n branch.\n\n\nThis is a sample entry:\n\n\n    dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\n    objectClass: oxCustomScript\n    objectClass: top\n    description: <custom_script_description>\n    displayName: <display_name>\n    gluuStatus: true\n    inum: @!1111!031C.4A65\n    oxLevel: <priority>\n    oxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\n    oxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\n    oxRevision: <revision>\n    oxScript: <custom_script>\n    oxScriptType: <script_type>\n    programmingLanguage: python\n\n\n\n\nThe script manager reloads scripts automatically without needing to\nrestart the application once \noxRevision\n is increased.\n\n\nInterception Script Logs\n#\n\n\nThe log files regarding interception scripts are not stored in the\n\nwrapper.log\n file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in \noxauth_script.log\n\nand the oxTrust custom script logs are stored in the\n\noxtrust_script.log\n. Please refer to these log files for any errors in\nthe interception scripts or following the workflow of the script.\n\n\nPerson Authentication\n#\n\n\nFor a list of pre-written, open source Gluu authentication scripts, view our \nserver integrations\n\n\nAn authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth uses simple username/password authentication method. This\nscript type allows an admin to implement more secure workflows to cover\nan organizations security requirements. It extends the base script type\nwith the \ninit\n, \ndestroy\n and \ngetApiVersion\n methods but also adds the\nfollowing methods:\n\n\n\n\n\n\n\n\nMethod\n\n\nisValidAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nusageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if \nisValidAuthenticationMethod\n returns False. As a result it should return the reserved authentication method name\n\n\n\n\n\n\nMethod Parameter\n\n\nuageType\n is \norg.xdi.model.AuthenticationScriptUsageType\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authenticate(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is java integar\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef prepareForStep(self, configurationAttributes, requestParameters, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameter\n\n\nrequestParameters\n is \njava.util.Map<String, String[]>\nstep\n is a java integer\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getCountAuthenticationSteps(self, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method should return an integer value with the number of steps in the authentication workflow\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getExtraParametersForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef getPageForStep(self, configurationAttributes, step)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page \n/login.xhtml\n\n\n\n\n\n\nMethod Parameter\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nstep\n is a java integar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\ndef logout(self, configurationAttributes, requestParameters)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns \nFalse\n. As a result it should either return \nTrue\n or \nFalse\n\n\n\n\n\n\nMethod Parameters\n\n\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\nrequestParameters\n is \njava.util.Map<String, String[]>\n\n\n\n\n\n\n\n\nThis script can be used in oxAuth application only.\n\n\n\n\nSample Authentication Script\n\n\n\n\nCertificate Authentication\n#\n\n\nGluu Server CE offers a person authentication module enabling Certificate Authentication.\nThe image below contains the design diagram for this module.\n\n\n\n\nThe script has a few properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nAllowed Values\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nchain_cert_file_path\n\n\nmandatory property pointing to certificate chains in \npem\n format\n\n\nfile path\n\n\n/etc/certs/chain_cert.pem\n\n\n\n\n\n\nmap_user_cert\n\n\nspecifies if the script should map new user to local account\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_generic_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_path_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\ntrue\n\n\n\n\n\n\nuse_oscp_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\nuse_crl_validator\n\n\nenable/disable specific certificate validation\n\n\ntrue/false\n\n\nfalse\n\n\n\n\n\n\ncrl_max_response_size\n\n\nspecifies the maximum allowed size of [CRL][crl] response\n\n\nInteger > 0\n\n\n2\n\n\n\n\n\n\n\n\n\n\nSample Certificate Authentication Script\n\n\n\n\nUpdate User\n#\n\n\noxTrust allows an admin to add and modify users which belong to groups.\nIn order to simplify this process and apply repeating actions, oxTrust\nsupports an Update User script. In this script it is possible to modify\na person entry before it is stored in LDAP.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateUser(self, user, persisted, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method updates the user\n\n\n\n\n\n\nMethod Parameter\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\npersisted is a boolean value to specify the operation type: add/modify\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample Update User Script\n\n\n\n\nUser Registration\n#\n\n\noxTrust allows users to perform self-registration. In order to\ncontrol/validate user registrations there is the user registration\nscript type.\n\n\nThis script type adds three methods to the base script type:\n\n\n\n\n\n\n\n\nMethods\n\n\ndef initRegistration(self, user, requestParameters, configurationAttributes)\ndef preRegistration(self, user, requestParameters, configurationAttributes)\ndef postRegistration(self, user, requestParameters, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nThis method enables/disables user account based on the custom property's value\n\n\n\n\n\n\nMethod Parameters\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nrequestParameters\n is \njava.util.Map<String, String[]>\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\nCustom Property\n\n\nenable_user\n--> defaults to \nfalse\n\n\n\n\n\n\nDescription\n\n\nIt controls whether or not this user account will be ready for loggin into the Gluu Server CE instance\n\n\n\n\n\n\n\n\nThe methods are executed in the following order:\n\n\n\n\n\n\n\n\nOrder\n\n\nMethod\n\n\nExpected Return\n\n\n\n\n\n\n\n\n\n\nFirst\n\n\ninitRegistration()\n\n\nTrue/False\n\n\n\n\n\n\nSecond\n\n\npreRegistration()\n\n\nTrue/False\n\n\n\n\n\n\nThird\n\n\npostRegistration()\n\n\nTrue/False\n\n\n\n\n\n\n\n\nFirst oxTrust executes the \ninitRegistration\n method to do an initial\nuser entry update. The \npreRegistration\n method is called before storing\nthe user entry in LDAP. Hence in this script it is possible to validate\nthe user entry. The \npostRegistration\n method is called after\nsuccessfully storing the user entry in LDAP. In this method, for\nexample, the script can send an e-mail or send notifications to other\norganization systems about the new user entry.\n\n\n\n\nSample User Registration Script\n\n\n\n\nClient Registration\n#\n\n\noxAuth implements the \nOpenID Connect dynamic client\nregistration\n\nspecification. All new clients have the same default access scopes and\nattributes except password and client ID. The Client Registration script\nallows an admin to modify this limitation. In this script it is possible\nto get a registration request, analyze it, and apply customizations to\nregistered clients. For example, a script can give access to specified\nscopes if \nredirect_uri\n belongs to a specified service or domain.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateClient(self, registerRequest, client, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nregisterRequest\n is \norg.xdi.oxauth.client.RegisterRequest\nclient\n is \norg.xdi.oxauth.model.registration.Client\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Client Registration Script\n\n\n\n\nDynamic Scopes\n#\n\n\nThe dynamic scope custom script allows the parsing of token returned from \nuser_info endpoint\n into \nLDAP attributes. The \nid_token\n is returned from \nuser_info endpoint\n and the values are dynamically placed \nin the LDAP attributes in Gluu Server.\n\n\n\n\nSample Dynamic Scope Script\n \n\n\n\n\nID Generator\n#\n\n\nBy default oxAuth/oxTrust uses an internal method to generate unique\nidentifiers for new person/client, etc. entries. In most cases the\nformat of the ID is:\n\n\n'!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.\n\n\nThe ID generation script enables an admin to implement custom ID\ngeneration rules.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef generateId(self, appId, idType, idPrefix, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nappId\n is application ID\nidType\n is ID Type\nidPrefix\n is ID Prefix\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample ID Generation Script\n\n\n\n\nCache Refresh\n#\n\n\nIn order to integrate an interception script with an existing\nauthentication server oxTrust provides a mechanism called Cache\nRefresh to copy user data to the local LDAP server. During this process it is possible\nto specify key attribute(s) and specify attribute name transformations.\nThere are also cases when it can be used to overwrite attribute values\nor to add new attributes based on other attribute values.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef updateUser(self, user, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nuser\n is \norg.gluu.oxtrust.model.GluuCustomPerson\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxTrust application only.\n\n\n\n\nSample Cache Refresh Script\n\n\n\n\nUMA Authorization Policies\n#\n\n\nThis is a special script for UMA. It allows an admin to protect UMA\nscopes with policies. It is possible to add more than one UMA policy to\nan UMA scope. On requesting access to a specified resource, the\napplication should call specified UMA policies in order to grant or deny\naccess.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef authorize(self, authorizationContext, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nauthorizationContext\n is \norg.xdi.oxauth.service.uma.authorization.AuthorizationContext\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Authorization Script\n\n\n\n\nApplication Session Management\n#\n\n\nThis script allows an admin to notify 3rd party systems about requests\nto end an OAuth session. This method is triggered by an oxAuth call to\nthe \nend_session\n endpoint. It's possible to add multiple scripts with\nthis type. The application should call all of them according to the\nlevel.\n\n\nThis script type adds only one method to the base script type:\n\n\n\n\n\n\n\n\nMethod\n\n\ndef endSession(self, httpRequest, authorizationGrant, configurationAttributes)\n\n\n\n\n\n\n\n\n\n\nMethod Parameter\n\n\nhttpRequest\n is \njavax.servlet.http.HttpServletRequest\nauthorizationGrant\n is \norg.xdi.oxauth.model.common.AuthorizationGrant\nconfigurationAttributes\n is \njava.util.Map<String, SimpleCustomProperty>\n\n\n\n\n\n\n\n\nThis script can be used in an oxAuth application only.\n\n\n\n\nSample Application Session Management Script",
            "title": "Custom Script in Gluu CE"
        },
        {
            "location": "/admin-guide/custom-script/#custom-script-interception-script",
            "text": "Gluu Server is very flexible by design enabling the use of  Jython  interception scripts to customize behaviour. Jython was chosen because an interpreted language facilitates dynamic creation of business logic, and makes it easier to distribute this logic to a cluster of Gluu servers. Another advantage of Jython was that developers can use either Java or Python classes. Combined with the option of calling web services from Python or Java, this enables the Gluu Server to support any business-driven policy requirement.  Custom Scripts can be accessed by navigating to Configuration \nand selecting the  Manage Custom Scritps  tab.",
            "title": "Custom Script / Interception Script"
        },
        {
            "location": "/admin-guide/custom-script/#interception-script-methods",
            "text": "There are three methods that inherit a base interface     Inherited Methods  Method description      def init(self, configurationAttributes)  This method is only called once during the script initialization. It can be used for global script initialization, initiate objects etc    def destroy(self, configurationAttributes)  This method is called once to destroy events. It can be used to free resource and objects created in the  init()  method    def getApiVersion(self)  The  getApiVersion  method allows API changes in order to do transparent migration from an old script to a new API. Currently all scripts should return  1     The  configurationAttributes  parameter is  java.util.Map<String, SimpleCustomProperty>  with properties specified in  oxConfigurationProperty  attributes.  The script manager only loads enabled scripts. Hence, after enabling a\nscript, the script manager should trigger an event to either load or\ndestroy a script. All scripts are stored in LDAP in the ou=scripts,o=<org_inum>,o=gluu  branch.  This is a sample entry:      dn: inum=@!1111!031C.4A65,ou=scripts,o=@!1111,o=gluu\n    objectClass: oxCustomScript\n    objectClass: top\n    description: <custom_script_description>\n    displayName: <display_name>\n    gluuStatus: true\n    inum: @!1111!031C.4A65\n    oxLevel: <priority>\n    oxModuleProperty: {\"value1\":\"module_property_name\",\"value2\":\"module_property_value\",\"description\":\"\"}\n    oxConfigurationProperty: {\"value1\":\"configuration_property_name\",\"value2\":\"configuration_property_value\",\"description\":\"\"}\n    oxRevision: <revision>\n    oxScript: <custom_script>\n    oxScriptType: <script_type>\n    programmingLanguage: python  The script manager reloads scripts automatically without needing to\nrestart the application once  oxRevision  is increased.",
            "title": "Interception Script Methods"
        },
        {
            "location": "/admin-guide/custom-script/#interception-script-logs",
            "text": "The log files regarding interception scripts are not stored in the wrapper.log  file. The logs are separated according to the module they\naffect. The oxAuth custom script logs are stored in  oxauth_script.log \nand the oxTrust custom script logs are stored in the oxtrust_script.log . Please refer to these log files for any errors in\nthe interception scripts or following the workflow of the script.",
            "title": "Interception Script Logs"
        },
        {
            "location": "/admin-guide/custom-script/#person-authentication",
            "text": "For a list of pre-written, open source Gluu authentication scripts, view our  server integrations  An authentication script enables you to customize the user\nauthentication experience. For example, you can write a script that\nenables a two-factor authentication mechanism like Duo Security. By\ndefault oxAuth uses simple username/password authentication method. This\nscript type allows an admin to implement more secure workflows to cover\nan organizations security requirements. It extends the base script type\nwith the  init ,  destroy  and  getApiVersion  methods but also adds the\nfollowing methods:     Method  isValidAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is used to check if the authentication method is in a valid state. For example we can check there if a 3rd party mechanism is available to authenticate users. As a result it should either return  True  or  False    Method Parameter  usageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getAlternativeAuthenticationMethod(self, usageType, configurationAttributes)      Description  This method is called only if the current authentication method is in an invalid state. Hence authenticator calls it only if  isValidAuthenticationMethod  returns False. As a result it should return the reserved authentication method name    Method Parameter  uageType  is  org.xdi.model.AuthenticationScriptUsageType configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def authenticate(self, configurationAttributes, requestParameters, step)      Description  This method is the key method within the person authentication script. It checks if the user has passed the specified step or not. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is java integar configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def prepareForStep(self, configurationAttributes, requestParameters, step)      Description  This method can be used to prepare variables needed to render the login page and store them in an according event context. As a result it should either return  True  or  False    Method Parameter  requestParameters  is  java.util.Map<String, String[]> step  is a java integer configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getCountAuthenticationSteps(self, configurationAttributes)      Description  This method should return an integer value with the number of steps in the authentication workflow    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>        Method  def getExtraParametersForStep(self, configurationAttributes, step)      Description  This method provides a way to notify the authenticator that it should store specified event context parameters event in the oxAuth session. It is needed in a few cases, for example when an authentication script redirects the user to a 3rd party authentication system and expects the workflow to resume after that. As a result it should return a java array of strings    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integer        Method  def getPageForStep(self, configurationAttributes, step)      Description  This method allows the admin to render a required page for a specified authentication step. It should return a string value with a path to an XHTML page. If the return value is empty or null, the authenticator should render the default log in page  /login.xhtml    Method Parameter  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> step  is a java integar        Method  def logout(self, configurationAttributes, requestParameters)      Description  This method is not mandatory. It can be used in cases when you need to execute specific logout logic within the authentication script when oxAuth receives an end session request. Also, it allows oxAuth to stop processing the end session request workflow if it returns  False . As a result it should either return  True  or  False    Method Parameters  configurationAttributes  is  java.util.Map<String, SimpleCustomProperty> requestParameters  is  java.util.Map<String, String[]>     This script can be used in oxAuth application only.   Sample Authentication Script",
            "title": "Person Authentication"
        },
        {
            "location": "/admin-guide/custom-script/#certificate-authentication",
            "text": "Gluu Server CE offers a person authentication module enabling Certificate Authentication.\nThe image below contains the design diagram for this module.   The script has a few properties:     Property  Description  Allowed Values  example      chain_cert_file_path  mandatory property pointing to certificate chains in  pem  format  file path  /etc/certs/chain_cert.pem    map_user_cert  specifies if the script should map new user to local account  true/false  true    use_generic_validator  enable/disable specific certificate validation  true/false  false    use_path_validator  enable/disable specific certificate validation  true/false  true    use_oscp_validator  enable/disable specific certificate validation  true/false  false    use_crl_validator  enable/disable specific certificate validation  true/false  false    crl_max_response_size  specifies the maximum allowed size of [CRL][crl] response  Integer > 0  2      Sample Certificate Authentication Script",
            "title": "Certificate Authentication"
        },
        {
            "location": "/admin-guide/custom-script/#update-user",
            "text": "oxTrust allows an admin to add and modify users which belong to groups.\nIn order to simplify this process and apply repeating actions, oxTrust\nsupports an Update User script. In this script it is possible to modify\na person entry before it is stored in LDAP.  This script type adds only one method to the base script type:     Method  def updateUser(self, user, persisted, configurationAttributes)      Description  This method updates the user    Method Parameter  user  is  org.gluu.oxtrust.model.GluuCustomPerson persisted is a boolean value to specify the operation type: add/modify configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample Update User Script",
            "title": "Update User"
        },
        {
            "location": "/admin-guide/custom-script/#user-registration",
            "text": "oxTrust allows users to perform self-registration. In order to\ncontrol/validate user registrations there is the user registration\nscript type.  This script type adds three methods to the base script type:     Methods  def initRegistration(self, user, requestParameters, configurationAttributes) def preRegistration(self, user, requestParameters, configurationAttributes) def postRegistration(self, user, requestParameters, configurationAttributes)      Description  This method enables/disables user account based on the custom property's value    Method Parameters  user  is  org.gluu.oxtrust.model.GluuCustomPerson requestParameters  is  java.util.Map<String, String[]> configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>    Custom Property  enable_user --> defaults to  false    Description  It controls whether or not this user account will be ready for loggin into the Gluu Server CE instance     The methods are executed in the following order:     Order  Method  Expected Return      First  initRegistration()  True/False    Second  preRegistration()  True/False    Third  postRegistration()  True/False     First oxTrust executes the  initRegistration  method to do an initial\nuser entry update. The  preRegistration  method is called before storing\nthe user entry in LDAP. Hence in this script it is possible to validate\nthe user entry. The  postRegistration  method is called after\nsuccessfully storing the user entry in LDAP. In this method, for\nexample, the script can send an e-mail or send notifications to other\norganization systems about the new user entry.   Sample User Registration Script",
            "title": "User Registration"
        },
        {
            "location": "/admin-guide/custom-script/#client-registration",
            "text": "oxAuth implements the  OpenID Connect dynamic client\nregistration \nspecification. All new clients have the same default access scopes and\nattributes except password and client ID. The Client Registration script\nallows an admin to modify this limitation. In this script it is possible\nto get a registration request, analyze it, and apply customizations to\nregistered clients. For example, a script can give access to specified\nscopes if  redirect_uri  belongs to a specified service or domain.  This script type adds only one method to the base script type:     Method  def updateClient(self, registerRequest, client, configurationAttributes)      Method Parameter  registerRequest  is  org.xdi.oxauth.client.RegisterRequest client  is  org.xdi.oxauth.model.registration.Client configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Client Registration Script",
            "title": "Client Registration"
        },
        {
            "location": "/admin-guide/custom-script/#dynamic-scopes",
            "text": "The dynamic scope custom script allows the parsing of token returned from  user_info endpoint  into \nLDAP attributes. The  id_token  is returned from  user_info endpoint  and the values are dynamically placed \nin the LDAP attributes in Gluu Server.   Sample Dynamic Scope Script",
            "title": "Dynamic Scopes"
        },
        {
            "location": "/admin-guide/custom-script/#id-generator",
            "text": "By default oxAuth/oxTrust uses an internal method to generate unique\nidentifiers for new person/client, etc. entries. In most cases the\nformat of the ID is:  '!' + idType.getInum() + '!' + four_random_HEX_characters + '.' + four_random_HEX_characters.  The ID generation script enables an admin to implement custom ID\ngeneration rules.  This script type adds only one method to the base script type:     Method  def generateId(self, appId, idType, idPrefix, configurationAttributes)      Method Parameter  appId  is application ID idType  is ID Type idPrefix  is ID Prefix user  is  org.gluu.oxtrust.model.GluuCustomPerson configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample ID Generation Script",
            "title": "ID Generator"
        },
        {
            "location": "/admin-guide/custom-script/#cache-refresh",
            "text": "In order to integrate an interception script with an existing\nauthentication server oxTrust provides a mechanism called Cache\nRefresh to copy user data to the local LDAP server. During this process it is possible\nto specify key attribute(s) and specify attribute name transformations.\nThere are also cases when it can be used to overwrite attribute values\nor to add new attributes based on other attribute values.  This script type adds only one method to the base script type:     Method  def updateUser(self, user, configurationAttributes)      Method Parameter  user  is  org.gluu.oxtrust.model.GluuCustomPerson configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxTrust application only.   Sample Cache Refresh Script",
            "title": "Cache Refresh"
        },
        {
            "location": "/admin-guide/custom-script/#uma-authorization-policies",
            "text": "This is a special script for UMA. It allows an admin to protect UMA\nscopes with policies. It is possible to add more than one UMA policy to\nan UMA scope. On requesting access to a specified resource, the\napplication should call specified UMA policies in order to grant or deny\naccess.  This script type adds only one method to the base script type:     Method  def authorize(self, authorizationContext, configurationAttributes)      Method Parameter  authorizationContext  is  org.xdi.oxauth.service.uma.authorization.AuthorizationContext configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Authorization Script",
            "title": "UMA Authorization Policies"
        },
        {
            "location": "/admin-guide/custom-script/#application-session-management",
            "text": "This script allows an admin to notify 3rd party systems about requests\nto end an OAuth session. This method is triggered by an oxAuth call to\nthe  end_session  endpoint. It's possible to add multiple scripts with\nthis type. The application should call all of them according to the\nlevel.  This script type adds only one method to the base script type:     Method  def endSession(self, httpRequest, authorizationGrant, configurationAttributes)      Method Parameter  httpRequest  is  javax.servlet.http.HttpServletRequest authorizationGrant  is  org.xdi.oxauth.model.common.AuthorizationGrant configurationAttributes  is  java.util.Map<String, SimpleCustomProperty>     This script can be used in an oxAuth application only.   Sample Application Session Management Script",
            "title": "Application Session Management"
        },
        {
            "location": "/admin-guide/certificate/",
            "text": "Certificates\n#\n\n\nGluu Server components have cryptographic keys and X.509 certificates that are stored inside the\n\nchroot\n. The details of the certificates are given below according to each component. The certificates\nare available in the \n/etc/certs\n folder.\n\n\n\n\n\n\n\n\nASIMBA\n\n\nShibboleth\n\n\nAPACHE\n\n\nOPENLDAP\n\n\n\n\n\n\n\n\n\n\nasimba.crt\n\n\nshibIDP.crt\n\n\nhttpd.crt\n\n\nopenldap.crt\n\n\n\n\n\n\nasimba.csr\n\n\nshibIDP.csr\n\n\nhttps.csr\n\n\nopenldap.csr\n\n\n\n\n\n\nasimba.key\n\n\nshibIDP.jsk\n\n\nhttpd.key\n\n\nopenldap.key\n\n\n\n\n\n\nasimba.key.orig\n\n\nshibIDP.key\n\n\nhttpd.key.orig\n\n\nopenldap.key.orig\n\n\n\n\n\n\nasimba.pkcs12\n\n\nshibIDP.key.orig\n\n\n\n\nopenldap.pem\n\n\n\n\n\n\nasimbaIDP.jsk\n\n\nshibIDP.pkcs12\n\n\n\n\n\n\n\n\n\n\n\n\noxAuth\n#\n\n\noxauth-web-keys.json\n is being used by Gluu's OpenID Connect & UMA\n server.\n\n\nUpdating Apache Certificate\n#\n\n\nThe certificates require manual update from \n/etc/certs/\n folder. \n\n\n\n\nWarning\n\n\nThe private key cannot be password protected, and the public key must be base64 X.509. \n\n\n\n\n\n\nNote\n\n\nPlease backup your full \n/etc/certs\n directory and \ncacerts\n file before updating certificates.\n\n\n\n\nPlease follow these steps shown below to update the Apache SSL cert:\n\n\n\n\nSave the latest SSL httpd key and certificate in the \n/etc/certs\n folder\n\n\nRename them to \nhttpd.key\n and \nhttpd.crt\n respectively\n\n\nImport 'httpd.der' into the java keystore\n/ Convertion to DER, command:\n \nopenssl x509 -outform der -in httpd.crt -out httpd.der\n\n\nImport certificate in to Java Keystore(cacerts):\n \nkeytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd\n\n\n\n\n\n\nRestart LDAP server, apache2/httpd and tomcat.\n\n\n\n\nInstall Intermediate Certificates\n#\n\n\nPlease follow the steps below to install intermediate certificates:\n\n\n\n\nLog into your Gluu Server container.\n\n\nKeep your intermediate certificate in the file \n/etc/certs/\n.\n\n\nModify \n/etc/httpd/conf.d/https_gluu.conf\n, and add\n\n  \nSSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt\n.\n\n\nRestart the service of the httpd server.",
            "title": "Certificate Management"
        },
        {
            "location": "/admin-guide/certificate/#certificates",
            "text": "Gluu Server components have cryptographic keys and X.509 certificates that are stored inside the chroot . The details of the certificates are given below according to each component. The certificates\nare available in the  /etc/certs  folder.     ASIMBA  Shibboleth  APACHE  OPENLDAP      asimba.crt  shibIDP.crt  httpd.crt  openldap.crt    asimba.csr  shibIDP.csr  https.csr  openldap.csr    asimba.key  shibIDP.jsk  httpd.key  openldap.key    asimba.key.orig  shibIDP.key  httpd.key.orig  openldap.key.orig    asimba.pkcs12  shibIDP.key.orig   openldap.pem    asimbaIDP.jsk  shibIDP.pkcs12",
            "title": "Certificates"
        },
        {
            "location": "/admin-guide/certificate/#oxauth",
            "text": "oxauth-web-keys.json  is being used by Gluu's OpenID Connect & UMA\n server.",
            "title": "oxAuth"
        },
        {
            "location": "/admin-guide/certificate/#updating-apache-certificate",
            "text": "The certificates require manual update from  /etc/certs/  folder.    Warning  The private key cannot be password protected, and the public key must be base64 X.509.     Note  Please backup your full  /etc/certs  directory and  cacerts  file before updating certificates.   Please follow these steps shown below to update the Apache SSL cert:   Save the latest SSL httpd key and certificate in the  /etc/certs  folder  Rename them to  httpd.key  and  httpd.crt  respectively  Import 'httpd.der' into the java keystore\n/ Convertion to DER, command:   openssl x509 -outform der -in httpd.crt -out httpd.der  Import certificate in to Java Keystore(cacerts):   keytool -importcert -file httpd.der -keystore cacerts -alias <hostname_of_your_Gluu_Server>_httpd    Restart LDAP server, apache2/httpd and tomcat.",
            "title": "Updating Apache Certificate"
        },
        {
            "location": "/admin-guide/certificate/#install-intermediate-certificates",
            "text": "Please follow the steps below to install intermediate certificates:   Log into your Gluu Server container.  Keep your intermediate certificate in the file  /etc/certs/ .  Modify  /etc/httpd/conf.d/https_gluu.conf , and add \n   SSLCertificateChainFile /etc/certs/name_of_your_interm_root_cert.crt .  Restart the service of the httpd server.",
            "title": "Install Intermediate Certificates"
        },
        {
            "location": "/admin-guide/fine-tuning/",
            "text": "Fine Tuning Gluu Server\n\n\nLDAP Server\n\n\nApache Tomcat\n\n\nGluu Server\n\n\nGluu Server Benchmark\n\n\n\n\n\n\nUseful Links\n\n\n\n\n\n\nFine Tuning Gluu Server\n#\n\n\nGluu Server has a stateless architecture, it scales quite easy. However\nto get high-performant server it must be tuned accordingly.\n\n\nTuning consists of:\n\n\n\n\nLDAP Server (OpenDJ, OpenLDAP)\n\n\nWeb Application Container (Tomcat, Jetty, JBoss)\n\n\nGluu Server configuration Tuning\n\n\n\n\nLDAP Server\n#\n\n\n(For convenience all samples stick to OpenDJ however general recommendations are the same for other LDAP Servers)\n\n\n\n\nMaximum number of allowed connections\nIf there are not enough connections to serve the client, a connection is\nput \"on hold\" and waits. To avoid delays it's recommended to provide\nexpected maximum allowed connections.\n\n \nmax-allowed-client-connections=1000\n\n\nProvide enough resources to LDAP Server\n For example OpenDJ use JVM for running, for high performance it's\n    recommended to give enough memory via JVM system properties.\n\n\nAllow LDAP Server use cache as much as possible.\n\n\n\n\ndsconfig -n set-backend-prop --backend-name userRoot --set db-cache-percent:50\n\n\n\n\nApache Tomcat\n#\n\n\n\n\nSet maximum for parallel requests.\n\nConnector parameters in \nserver.xml\n:\n\n\nmaxThreads=\"10000\"\n\n\nmaxConnections=\"10000\"\n\n\n\n\n\n\nSet memory settings via JAVA_OPTS\n\n \nset \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"\n\n\nOperating time\n\nCheck via Tomcat monitor whether requests are handled or just \"hangs\"\nbecause there are not enough resources. Here is sample when processing\ntime increase due to lack of resources:\n\n\n\n\n\n\nGluu Server\n#\n\n\n\n\noxauth-ldap.properties - Increase ldap connection pool size\n\n\n\n\n     maxconnections: 1000\n\n\n\n\nGluu Server Benchmark\n#\n\n\nBenchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth\n\n\nMeasures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite \nsubjective\n results\n\n\n\n\n\n\n\n\nInvocations\n\n\nParallel Threads\n\n\nTime\n\n\nComments\n\n\n\n\n\n\n\n\n\n\n100\n\n\n100\n\n\n8 seconds\n\n\n\n\n\n\n\n\n1000\n\n\n100\n\n\n\n\n\n\n\n\n\n\n1000\n\n\n200\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n2000\n\n\n100\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n2000\n\n\n200\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n10000\n\n\n300\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n100000\n\n\n300\n\n\n\n\nNot representable: CPU 100%\n\n\n\n\n\n\n\n\nUseful Links\n#\n\n\n\n\nOpenDJ Performance Tuning\n\n\nOpenDJ Global configuration",
            "title": "Fine Tuning Gluu Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#fine-tuning-gluu-server",
            "text": "Gluu Server has a stateless architecture, it scales quite easy. However\nto get high-performant server it must be tuned accordingly.  Tuning consists of:   LDAP Server (OpenDJ, OpenLDAP)  Web Application Container (Tomcat, Jetty, JBoss)  Gluu Server configuration Tuning",
            "title": "Fine Tuning Gluu Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#ldap-server",
            "text": "(For convenience all samples stick to OpenDJ however general recommendations are the same for other LDAP Servers)   Maximum number of allowed connections If there are not enough connections to serve the client, a connection is\nput \"on hold\" and waits. To avoid delays it's recommended to provide\nexpected maximum allowed connections. \n  max-allowed-client-connections=1000  Provide enough resources to LDAP Server  For example OpenDJ use JVM for running, for high performance it's\n    recommended to give enough memory via JVM system properties.  Allow LDAP Server use cache as much as possible.   dsconfig -n set-backend-prop --backend-name userRoot --set db-cache-percent:50",
            "title": "LDAP Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#apache-tomcat",
            "text": "Set maximum for parallel requests. Connector parameters in  server.xml :  maxThreads=\"10000\"  maxConnections=\"10000\"    Set memory settings via JAVA_OPTS \n  set \"JAVA_OPTS=-Xms1456m -Xmx7512m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\"  Operating time \nCheck via Tomcat monitor whether requests are handled or just \"hangs\"\nbecause there are not enough resources. Here is sample when processing\ntime increase due to lack of resources:",
            "title": "Apache Tomcat"
        },
        {
            "location": "/admin-guide/fine-tuning/#gluu-server",
            "text": "oxauth-ldap.properties - Increase ldap connection pool size        maxconnections: 1000",
            "title": "Gluu Server"
        },
        {
            "location": "/admin-guide/fine-tuning/#gluu-server-benchmark",
            "text": "Benchmarking based on Authentication Implicit Flow: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth  Measures were made on single machine with Gluu Server, LDAP Server and test runner (clients). Therefore here is quite  subjective  results     Invocations  Parallel Threads  Time  Comments      100  100  8 seconds     1000  100      1000  200   Not representable: CPU 100%    2000  100   Not representable: CPU 100%    2000  200   Not representable: CPU 100%    10000  300   Not representable: CPU 100%    100000  300   Not representable: CPU 100%",
            "title": "Gluu Server Benchmark"
        },
        {
            "location": "/admin-guide/fine-tuning/#useful-links",
            "text": "OpenDJ Performance Tuning  OpenDJ Global configuration",
            "title": "Useful Links"
        },
        {
            "location": "/admin-guide/faq/",
            "text": "FAQ\n\n\nGeneral FAQ\n\n\nLogs\n\n\nHow to change the hostname/IP address/listening port of Gluu Server\n\n\nHow to set the port to something other than 443\n\n\nHow to customize IDP to ask for Email instead of username\n\n\nHow to add additional roles to oxTrust and change permissions for existing ones\n\n\n\n\n\n\nTroubleshooting Guide\n\n\nAdd admin for Gluu server\n\n\nConnectivity Issues?\n\n\nDNS names not resolving!\n\n\nForgot the admin password!\n\n\nRevert Authentication Method\n\n\nNo admin access after Cache Refresh?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFAQ\n#\n\n\nGeneral FAQ\n#\n\n\nLogs\n#\n\n\nWhen it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--your \nserver logs\n are the best place to gather relevant information.\n\n\nHow to change the hostname/IP address/listening port of Gluu Server\n#\n\n\nIt is not recommended to change the hostname or IP address or the listening port of any installed Gluu Server instance. The hostname and the IP address is used in many settings stored in LDAP configuration entries, Apache/Jetty configuration and into the custom authentication script. It is strongly recommended to use a fresh install in a new VM. \n\n\n\n\nNote\n\n\nPlease use static IP address with reverse proxy or load balancer or simple port forwarding.\n\n\n\n\nHow to set the port to something other than 443\n#\n\n\nPorts other than 443 are not supported as the port is used by Apache Web Server. In theory, the change must reflect in the SAML and OpenID Connect metadata and still there might be errors.\n\n\n\n\nNote\n\n\nPlease use a virtual ethernet interface and a different IP address on your server\n\n\n\n\nHow to customize IDP to ask for Email instead of username\n#\n\n\nIn oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to \nuid\n. Set those va    lues to \nmail\n and now your Gluu Server will expect email as the identifier instead of username.\n\n\n\n\nNow you will want to update your IDP login page to display \nEmail Address\n as the requested identifier. In order to do that you need to modify the \nlogin.xhtm    l\n file, which is located in \n/opt/tomcat/webapps/oxauth/\n. Insert \nEmail Address\n as the value for \noutputLabel\n; this snippet is under the \ndialog\n class. S    ee the screenshot below.\n\n\n\n\nHow to add additional roles to oxTrust and change permissions for existing ones\n#\n\n\nThe additional role requires the implementation of dynamic rules in Jboss SEAM and then uitlize them in oxTrust as the available \nmanager\n and \nuser\n roles are defined within the \nsecurit.drl\n hard-coded into oxTrust. The file checks for the \nmaanger\n group membership and adds the role to the web context. This is currently out of the scope of support. \n\n\n\n\nWarning\n\n\noxTrust is a tool for administrators and it must nto be used as a user facing application.\n\n\n\n\nTroubleshooting Guide\n#\n\n\nAdd admin for Gluu server\n#\n\n\nPlease follow these steps to restore your Gluu admin account (you will\nprobably need to substitute actual port, bind names and hostnames with\nones used by your installation):\n\n\n1) Login into Gluu's chroot environment with the command below:\n\n\n# service gluu-server login\n\n\n\n\n2) Run this command:\n\n\n#/opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu gluuGroupType=gluuManagerGroup 1.1\n\n\n\n\nand remember the displayed dn of the Gluu Manager Group for future use.\n\n\n3) Run this command:\n\n\n# /opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu ou=people 1.1\n\n\n\n\nand remember the displayed dn of the People ou for future use.\n\n\n4) While staying in the chrooted environment, create the file\n\n~/add_user.ldif\n using your favorite text editor, and copy the\nfollowing lines to it:\n\n\ndn: inum=tempadmin,ou=people,o=@!F9CC.D762.4778.1032!0001!2C72.BB87,o=gluu\nchangetype: add\nuid: tempadmin\nobjectClass: gluuPerson\nobjectClass: top\ngivenName: tempadmin\nsn: tempadmin\ninum: tempadmin\ngluuStatus: active\nuserPassword: 1q2w3e\n\n\n\n\nPlease note the string's segment marked with bold: you will have to\nsubstitute it with dn of your own People ou which you've acquired in\nstep 3).\n\n\n5) Run this command:\n\n\n# /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_user.ldif\n\n\n\n\nThis will create new user tempadmin with attributes provided via file\ncreated in step 4).\n\n\n6) Now create file \nadd_2_group.ldif\n in your home (\"~/\") directory and\ncopy the following lines to it:\n\n\ndn: inum=@!F9CC.D762.4778.1032!0001!2C72.BB87!0003!60B7,ou=groups,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\nchangetype: modify\nadd: member\nmember: inum=tempadmin,ou=people,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\n\n\n\n\nAgain, please note the strings' segment marked with bold: you will have\nto substitute contents of the \"dn:\" string with dn of your own Gluu\nManager Group which you've acquired in step 2), and for \"member:\" string\nyou will have to use the dn of tempadmin user (the one you already\nspecified in the 1st line of the file in step 4).\n\n\n7) Run this command:\n\n\n# /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_2_group.ldif\n\n\n\n\nThis will add tempadmin user to the IdP managers group and you can then\nlogin and assign another user to act as admin.\n\n\nConnectivity Issues?\n#\n\n\nDNS names not resolving!\n#\n\n\nIt is possible that even after configuring everything there is a \nDNS\n resolve error in Gluu Server.\nThe reason is the \nDNS\n used inside the chroot container; the \ndns\n used by the container is the Google DNS servers \nand the \nDNS\n for the host OS is not used. Therefore to fix this issue:\n\n\n\n\nChange the DNS inside the container by editing the \n/etc/resolv.conf\n file and adding the DNS used by your organization\n\n\n\n\nForgot the admin password!\n#\n\n\nGluu Server stores the admin password in the file \n/install/community-edition-setup/setup.properties.last\n under the\nproperty \nldapPass\n. Retrieve the data using the following command:\n\n\n# grep ldapPass= /install/community-edition-setup/*.last\n\n\n\n\n\n\nWarning\n\n\nIt is strongly recommended to remove the file from any production environment or encrypt the file\n\n\n\n\nRevert Authentication Method\n#\n\n\nIt is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method.\n\n\n\n\nRun the following command to collect the \ninum\n for the Gluu Server installation.\n\n\n\n\n/opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory \nmanager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" \noxAuthenticationMode\n\n\n\n\nCreate a \nLDIF\n file with the contents below:\n\n\n\n\ndn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal\n\n\n\n\nAs an example, we shall call this file \nchangeAuth.ldif\n.\n\n\nNote:\n Replace the \ninum\n from the example above with the \ninum\n of the Gluu Server from the \nldapsearch\n command.\n\n\n\n\nReplace the the authentication mode using \nldapmodify\n command.\n\n\n\n\n`/opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/changeAuth.ldif\n\n\nNo admin access after Cache Refresh?\n#\n\n\nAdd the password for your admin account to \n~/.pw\n and then use the commands below to add yourself as an admin.\n\n\n# set this to your actual user name\nexport newgluuadmin='myusername'\n\n# this is the file that will hold the info to be imported\nexport ldiffile='addManagers.ldif'\n\n# run this and verify that the output is for your account\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.\n 3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nuid: myusername\ngivenName: John\nsn: Doe\ncn: John Doe\n\n\n\n\nNow you can run these commands to make the file above:\n\n\nhead -n1 /opt/opendj/ldif/groups.ldif > $ldiffile\necho 'changetype: modify' >> $ldiffile\necho 'add: member' >> $ldiffile\necho \"member: $(/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn |grep -A1 dn |cut -d ' ' -f 2- | sed 'N;s/\\n//')\" >> $ldiffile\n\n\n\n\nThe resulting ldif will look like this:\n\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0003!60B7,ou=groups,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nchangetype: modify\nadd: member\nmember: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\n\n\n\n\nOnce the ldif looks right, run this to grant your account admin rights in Gluu:\n\n\n/opt/opendj/bin/ldapmodify -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -f addManagers.ldif\n\n\n\n\nLog into the web interface and pick up where you left off :)",
            "title": "Troubleshooting & FAQ"
        },
        {
            "location": "/admin-guide/faq/#faq",
            "text": "",
            "title": "FAQ"
        },
        {
            "location": "/admin-guide/faq/#general-faq",
            "text": "Logs #  When it comes to troubleshooting issues in the Gluu Server--from service hiccups to outages--your  server logs  are the best place to gather relevant information.  How to change the hostname/IP address/listening port of Gluu Server #  It is not recommended to change the hostname or IP address or the listening port of any installed Gluu Server instance. The hostname and the IP address is used in many settings stored in LDAP configuration entries, Apache/Jetty configuration and into the custom authentication script. It is strongly recommended to use a fresh install in a new VM.    Note  Please use static IP address with reverse proxy or load balancer or simple port forwarding.   How to set the port to something other than 443 #  Ports other than 443 are not supported as the port is used by Apache Web Server. In theory, the change must reflect in the SAML and OpenID Connect metadata and still there might be errors.   Note  Please use a virtual ethernet interface and a different IP address on your server   How to customize IDP to ask for Email instead of username #  In oxTrust navigate to the Manage Authentication tab within the Configuration section. By default the Primary Key and Local Key are set to  uid . Set those va    lues to  mail  and now your Gluu Server will expect email as the identifier instead of username.   Now you will want to update your IDP login page to display  Email Address  as the requested identifier. In order to do that you need to modify the  login.xhtm    l  file, which is located in  /opt/tomcat/webapps/oxauth/ . Insert  Email Address  as the value for  outputLabel ; this snippet is under the  dialog  class. S    ee the screenshot below.   How to add additional roles to oxTrust and change permissions for existing ones #  The additional role requires the implementation of dynamic rules in Jboss SEAM and then uitlize them in oxTrust as the available  manager  and  user  roles are defined within the  securit.drl  hard-coded into oxTrust. The file checks for the  maanger  group membership and adds the role to the web context. This is currently out of the scope of support.    Warning  oxTrust is a tool for administrators and it must nto be used as a user facing application.",
            "title": "General FAQ"
        },
        {
            "location": "/admin-guide/faq/#troubleshooting-guide",
            "text": "Add admin for Gluu server #  Please follow these steps to restore your Gluu admin account (you will\nprobably need to substitute actual port, bind names and hostnames with\nones used by your installation):  1) Login into Gluu's chroot environment with the command below:  # service gluu-server login  2) Run this command:  #/opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu gluuGroupType=gluuManagerGroup 1.1  and remember the displayed dn of the Gluu Manager Group for future use.  3) Run this command:  # /opt/opendj/bin/ldapsearch -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -b o=gluu ou=people 1.1  and remember the displayed dn of the People ou for future use.  4) While staying in the chrooted environment, create the file ~/add_user.ldif  using your favorite text editor, and copy the\nfollowing lines to it:  dn: inum=tempadmin,ou=people,o=@!F9CC.D762.4778.1032!0001!2C72.BB87,o=gluu\nchangetype: add\nuid: tempadmin\nobjectClass: gluuPerson\nobjectClass: top\ngivenName: tempadmin\nsn: tempadmin\ninum: tempadmin\ngluuStatus: active\nuserPassword: 1q2w3e  Please note the string's segment marked with bold: you will have to\nsubstitute it with dn of your own People ou which you've acquired in\nstep 3).  5) Run this command:  # /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_user.ldif  This will create new user tempadmin with attributes provided via file\ncreated in step 4).  6) Now create file  add_2_group.ldif  in your home (\"~/\") directory and\ncopy the following lines to it:  dn: inum=@!F9CC.D762.4778.1032!0001!2C72.BB87!0003!60B7,ou=groups,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu\nchangetype: modify\nadd: member\nmember: inum=tempadmin,ou=people,o=@!f9cc.d762.4778.1032!0001!2c72.bb87,o=gluu  Again, please note the strings' segment marked with bold: you will have\nto substitute contents of the \"dn:\" string with dn of your own Gluu\nManager Group which you've acquired in step 2), and for \"member:\" string\nyou will have to use the dn of tempadmin user (the one you already\nspecified in the 1st line of the file in step 4).  7) Run this command:  # /opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/add_2_group.ldif  This will add tempadmin user to the IdP managers group and you can then\nlogin and assign another user to act as admin.  Connectivity Issues? #  DNS names not resolving! #  It is possible that even after configuring everything there is a  DNS  resolve error in Gluu Server.\nThe reason is the  DNS  used inside the chroot container; the  dns  used by the container is the Google DNS servers \nand the  DNS  for the host OS is not used. Therefore to fix this issue:   Change the DNS inside the container by editing the  /etc/resolv.conf  file and adding the DNS used by your organization   Forgot the admin password! #  Gluu Server stores the admin password in the file  /install/community-edition-setup/setup.properties.last  under the\nproperty  ldapPass . Retrieve the data using the following command:  # grep ldapPass= /install/community-edition-setup/*.last   Warning  It is strongly recommended to remove the file from any production environment or encrypt the file   Revert Authentication Method #  It is not unlikely that you will lock yourself out of Gluu Server while testing the authentication script, if there is any problem in it. In such a case the following method can be used to revert back the older authentication method.   Run the following command to collect the  inum  for the Gluu Server installation.   /opt/opendj/bin/ldapsearch -h localhost -p 1389 -D \"cn=directory \nmanager\" -j ~/.pw -b \"ou=appliances,o=gluu\" -s one \"objectclass=*\" \noxAuthenticationMode   Create a  LDIF  file with the contents below:   dn: inum=@!1E3B.F133.14FA.5062!0002!4B66.CF9C,ou=appliances,o=gluu\nchangetype: modify\nreplace: oxAuthenticationMode\noxAuthenticationMode: internal  As an example, we shall call this file  changeAuth.ldif .  Note:  Replace the  inum  from the example above with the  inum  of the Gluu Server from the  ldapsearch  command.   Replace the the authentication mode using  ldapmodify  command.   `/opt/opendj/bin/ldapmodify -p 1636 -Z -X -D 'cn=directory manager' -w 'YOUR_BIND_PASSWORD' -f ~/changeAuth.ldif  No admin access after Cache Refresh? #  Add the password for your admin account to  ~/.pw  and then use the commands below to add yourself as an admin.  # set this to your actual user name\nexport newgluuadmin='myusername'\n\n# this is the file that will hold the info to be imported\nexport ldiffile='addManagers.ldif'\n\n# run this and verify that the output is for your account\n/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn\n\ndn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.\n 3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nuid: myusername\ngivenName: John\nsn: Doe\ncn: John Doe  Now you can run these commands to make the file above:  head -n1 /opt/opendj/ldif/groups.ldif > $ldiffile\necho 'changetype: modify' >> $ldiffile\necho 'add: member' >> $ldiffile\necho \"member: $(/opt/opendj/bin/ldapsearch -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -b \"o=gluu\" \"uid=$newgluuadmin\" uid givenName sn cn |grep -A1 dn |cut -d ' ' -f 2- | sed 'N;s/\\n//')\" >> $ldiffile  The resulting ldif will look like this:  dn: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0003!60B7,ou=groups,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu\nchangetype: modify\nadd: member\nmember: inum=@!134D.3C3D.796E.FECE!0001!E022.CC3C!0000!A8F2.DE1E.D7FB,ou=people,o=@!134D.3C3D.796E.FECE!0001!E022.CC3C,o=gluu  Once the ldif looks right, run this to grant your account admin rights in Gluu:  /opt/opendj/bin/ldapmodify -h localhost -p 1636 -D \"cn=directory manager\" -j ~/.pw -Z -X -f addManagers.ldif  Log into the web interface and pick up where you left off :)",
            "title": "Troubleshooting Guide"
        }
    ]
}